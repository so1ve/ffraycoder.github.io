<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Ray's Blog</title><link>https://raycoder.me/</link><description>Ray's Blog</description><generator>Hugo 0.74.3 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>nn_201312@163.com (Ray)</managingEditor><webMaster>nn_201312@163.com (Ray)</webMaster><lastBuildDate>Sat, 16 Oct 2021 14:39:58 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://raycoder.me/rss.xml"/><item><title>移植主题中</title><link>https://raycoder.me/status/porting-a-theme/</link><guid isPermaLink="true">https://raycoder.me/status/porting-a-theme/</guid><pubDate>Fri, 01 May 2020 21:55:41 +0800</pubDate><description><![CDATA[<h3 id="正在移植wp-tony主题httpsgithubcomthemetonytony_wordpress断更嘿嘿">正在移植<a href="https://github.com/ThemeTony/tony_wordpress"><code>WP-Tony</code>主题</a>，断更嘿嘿</h3>
<h3 id="感兴趣的可以去原作者博客httpsouorzcom看看">感兴趣的可以去原作者博客<a href="https://ouorz.com">https://ouorz.com</a>看看。</h3>
<p>目前已经大部分完成了！</p>
]]></description></item><item><title>正在开发博客系统</title><link>https://raycoder.me/status/working-on-a-blog-system/</link><guid isPermaLink="true">https://raycoder.me/status/working-on-a-blog-system/</guid><pubDate>Fri, 01 May 2020 21:55:41 +0800</pubDate><description>&lt;h1 id="开发中继续咕">开发中，继续咕&lt;/h1>
&lt;p>开发日志：https://mirror.raycoder.me/#/posts/9&lt;/p></description></item><item><title>暂停更新</title><link>https://raycoder.me/p/pause-update/</link><guid isPermaLink="true">https://raycoder.me/p/pause-update/</guid><pubDate>Mon, 01 Feb 2021 10:54:23 +0800</pubDate><description>&lt;p>本博客从即日起暂停更新（虽然已经咕了很久，逃&lt;/p>
&lt;p>博主正在开发新的博客系统，开发完成后将把本博客迁移到新系统。&lt;/p></description></item><item><title>图床的千层套路</title><link>https://raycoder.me/p/hey-picbed/</link><guid isPermaLink="true">https://raycoder.me/p/hey-picbed/</guid><pubDate>Sun, 13 Sep 2020 14:57:39 +0800</pubDate><description><![CDATA[<blockquote>
<p>本文转自<a href="https://blog.cyfan.top/p/eb490c73.html">陈YFの博客(￣▽￣)&quot;</a></p>
</blockquote>
<p>2020年8月9日<a href="https://github.com/jsdelivr/jsdelivr/pull/18247/files">Jsdelivr发布了一次使用政策：Create Acceptable Use Policy</a>，其中第4条Prohibited Use引起了众多议论：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">4. Prohibited Use

The following behavior is prohibited:

 1. Hosting or accessing content that:
     - contains malware or harmful code in any form,
     - violates proprietary rights of others,
     - is sexually explicit,
     - is potentially illegal in the EU or the USA.

 2. Abusing the service and its resources, or using jsDelivr as a general-purpose
    file or media hosting service. This includes, for example:
     - running an image hosting website and using jsDelivr as a storage for all
       uploaded images,
     - hosting videos, file backups, or other files in large quantities.

    We recognize that there are legitimate projects that consist of a large number
    of files, and these are not considered abuse. For example: icons packs, apps,
    or games with a large number of assets.Copy
</code></pre></div><p>其中<code>running an image hosting website and using jsDelivr as a storage for all uploaded images</code> 这一句相当的有歧义，要多少的图片才能算是图站？博客里面图片放里面算吗？上传的图片怎样才不行？<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/TlAGjm6IvJSMVpq.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/TlAGjm6IvJSMVpq.jpg" alt="img"></a></p>
<p>反观网上流传的白嫖Github做图床，基本点进去都是<code>https://cdn.jsdelivr.net/gh/</code> 这样子的图床，这种行为，我不敢妄加评论。但是，jsdelivr诞生的意义似乎并不是为了图床而生的，这种行为也很难判断成滥用。<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5896ece29a8e0.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5896ece29a8e0.jpg" alt="img"></a></p>
<p>使用政策发布之后，一时间，QQ群、v2ex、知乎上立刻就炸了锅。很多人猜测jsdelivr是不是滥用过度而禁止将其作为图床？免费图床的白嫖日子要结束了吗？更多的人，是在哭诉和询问那里还有像jsd一样优秀的<strong>图床</strong>可以白嫖，微博炸了，那里还有免费图床啊？</p>
<p>实际上，我一般采用的是<code>BackBlaze+CloudFlare</code> 但是自从八月底移动开始改道，从原先优秀的CMI绕路LAX后，国内CloudFlare访问质量再次暴跌，这不得不使我将博客迁至Vercel。好在八月份我有幸申请到了<code>doegdoge图床</code>使用权限，获得了国内较高速的图床.</p>
<p>但是，对于哪些没有没有图床的人来说，免费图床真的这么难以获得吗？</p>
<p>不好意思，<strong>免费图床非常多</strong>，只是你不会用而已，这篇文章，就是拯救面前陷入图床危机的你【当然是面向小白，大佬也可以在底下给我提意见鸭】。<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_56.png"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_56.png" alt="img"></a></p>
<h1 id="公益图床">公益图床</h1>
<h2 id="smms">sm.ms</h2>
<p><a href="https://sm.ms/">https://sm.ms</a></p>
<p>推荐程度：★</p>
<p>首先推荐的是这个图床，loli.net域名经典重现。三年前此图床域名还有备案采用的是国内CDN，可惜后来因为滥用吊销备案号而被迫迁移国外，用的是CloudFlare。实际使用效果面向国内确实不太好，建议备用。</p>
<p>你不需要注册，拖拽直接上传，只要不违反大陆和香港法律，他就能永久保留你的图片</p>
<p><a href="https://i.loli.net/2020/09/12/OxvnMBwd3VA8uyD.jpg"><img src="https://i.loli.net/2020/09/12/OxvnMBwd3VA8uyD.jpg" alt="img"></a></p>
<p>可搭配PicGo</p>
<h2 id="imgur">Imgur</h2>
<p><a href="https://imgur.com/">https://imgur.com</a></p>
<p>推荐程度：★★</p>
<p>国外一家牛逼的图片托管服务商，你可以选择注册或不注册，同样的，拖拽上传，永久保留，其SLA有着相当高的保证。</p>
<p>然而很可惜的是，这种网站很早就在国内被<strong>DNS域名污染</strong>，也就意味着访客无法正常加载你的图片。这也就是被打为两颗星的原因。<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/%E4%B8%8D%E8%AF%B4%E8%AF%9D.png"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/%E4%B8%8D%E8%AF%B4%E8%AF%9D.png" alt="img"></a></p>
<p>当然，你也可以通过<a href="https://blog.cyfan.top/2020/09/12/hey-picbed/#%E5%9B%BE%E5%83%8F%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1">#图像缓存服务</a> 从而实现国内访问。</p>
<p>可搭配PicGo【需注册】</p>
<h2 id="去不图床">去不图床</h2>
<p><a href="https://7bu.top/">https://7bu.top/</a></p>
<p>推荐程度：？？？？？</p>
<p>由<a href="https://dusays.com/241/">杜老师</a>提供的个人公益图床，存储于阿里和腾讯的COS，官方保证SLA&gt;=99%，是一个不错的选择，当然，7bu毕竟是个人维护的图床，能不能永久撑下去还是个问题，我也没有做过深度评测，无法表明其可用性。</p>
<p>可搭配PicGo。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">接口地址：https://7bu.top/upload/upload.html
post参数：image
回调json：data.urlCopy
</code></pre></div><blockquote>
<p>而且，就在我上传测试图片的时候，明明已经表明图片已经上传，打开却发现COS提示404，这一点我不得陷入思考，个人维持的公益项目真的能保证SLA吗？<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/%E4%BE%BF%E4%BE%BF.png"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/%E4%BE%BF%E4%BE%BF.png" alt="img"></a></p>
</blockquote>
<h1 id="白嫖的">白嫖的</h1>
<h2 id="阿里图床">阿里图床</h2>
<p>推荐程度：★★★★</p>
<p>我个人搭建的API：<a href="https://picbed.cyfan.top/">https://picbed.cyfan.top</a> 不保证上传SLA<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53ce897ab55.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53ce897ab55.jpg" alt="img"></a></p>
<p>由于小鸡联通国内网络不太好，很有可能无法正常上传，<a href="https://github.com/ChenYFan-Tester/Alibaba_pic">原项目已经开源</a> ，你完全可以通过在国内的机子或者是本地搭建以获得更佳体验。</p>
<p>如果上传成功了，图片将会托管于阿里云的CDN，无论是速度还是延迟都相当的优秀。</p>
<p>官方大厂，下载SLA有保障。</p>
<p>可搭配PicGo。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">接口地址：https://picbed.cyfan.top/update.php
post参数：file
回调json：data.urlCopy
</code></pre></div><h2 id="dogedoge图床">DogeDoge图床</h2>
<p>推荐程度：★★★★★</p>
<p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912192303.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912192303.jpg" alt="TEST"></a></p>
<p>其实很早就看到<a href="https://v2ex.com/t/659652">V2EX的那篇征文了</a>：</p>
<p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912190301.png?q=45"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912190301.png?q=45" alt="img"></a></p>
<p>可是当时我不够优秀啊虽然现在同样不优秀，博客也没满一年啊，于是白嫖的心态搁浅了。<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5896e8a408253.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5896e8a408253.jpg" alt="img"></a></p>
<p>后来突然看到<a href="https://blog.jalenchuh.cn/">Jalen的博客</a>也用了DogeDoge图床，这才突然意识到原来我已经满一年了。于是抱着试试看的心态向doge官方邮箱发送了邮件，结果真过了。。。</p>
<p>dogedoge拥有着国内相当不错的CDN，国内访问飞快，但是国外的访问质量的确不如人意。【反正此博客面向中国大陆】</p>
<p>而且，DogeDoge拥有着很良心的处理参数：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">w：宽
h：高
mode：模式 - crop 裁剪、clip 缩略
fmt：格式 - jpg、png、webp（原图为 gif，且没有 frame 参数时，不做任何裁切、缩略处理）
frame：1 - EOF帧，默认为 1 （对动画有效）
q：压缩质量 - 1 - 100（默认 90 ）
rect：指定位置裁剪 - top,left,w,h（若与 w / h 参数同时存在，则 会在 rect 裁剪过后，继续按照 w / h 的要求缩略）
pos：（配合 w / h ）裁剪位置 - top-left、top、top-right、left、center、right、bottom-left、bottom、bottom-right，默认为center
pos 还有一个特殊的值 auto，该值目前为 alpha 状态，可以根据图片重点来进行 pos 的位置取舍。Copy
</code></pre></div><p>当然，DogeDoge也可以搭配PicGo使用。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">接口地址：https://www.dogedoge.com/tools/upload/{Your_Token}
post参数：file
回调json：data.o_urlCopy
</code></pre></div><p>当然，现在的Doge图床还是处于免费的试用期【Creater】，不过好在试用期过后价格也比较合理，一般的tester也足够使用，目前看来SLA还是不错的。</p>
<p>当然，申请不到dogedoge图床也没关系，看下去你就会发现，白嫖的路千千万万，何必执着于一条。<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_34.png"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_34.png" alt="img"></a></p>
<p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205753.png?q=45"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205753.png?q=45" alt="img"></a></p>
<h2 id="backblaze">BackBlaze</h2>
<p>推荐程度：★★★</p>
<p>具体可以看看<a href="https://blog.cyfan.top/2020/07/09/free-10GB-oss-poweredby-backblaze/">这篇文章</a></p>
<h2 id="千奇百怪的">千奇百怪的</h2>
<h2 id="githubjsdelivr">Github+JSDelivr</h2>
<p>正如我所说的，这种组合已经被广大博主所采纳，并且网上教程已经泛滥了，在这里不再阐述。</p>
<h2 id="npmjsdelivrzhimgbdstatic">npm+JSDelivr&amp;&amp;Zhimg&amp;&amp;bdstatic</h2>
<p>推荐程度：★★★★★</p>
<p>为什么很多文章都没有提到用npm做图床？我想其中很大的原因是，白嫖jsd做图床的，很多都是小白【或者不愿花时间在于此的大佬】，同样的，这些文章面向的都是这些人，毕竟，以拖拽方式上传的Github和命令行方式上传，我想，大都数人会选择前者吧。</p>
<p>可是，你们没有想到的是，github文件镜像【github.com.cnpmjs.org是站点镜像】只有jsd一个，npm镜像可远远不止这一个啊！</p>
<p>让我们看看分别镜像在jsd、zhimg、bdstatic的文件怎么样：</p>
<p><a href="https://cdn.jsdelivr.net/npm/chenyfan-oss@0.0.1/1.jpg"><img src="https://cdn.jsdelivr.net/npm/chenyfan-oss@0.0.1/1.jpg" alt="img"></a></p>
<p><a href="https://unpkg.zhimg.com/chenyfan-oss@0.0.1/2.jpg"><img src="https://unpkg.zhimg.com/chenyfan-oss@0.0.1/2.jpg" alt="img"></a></p>
<p><a href="https://code.bdstatic.com/npm/chenyfan-oss@0.0.1/3.jpg"><img src="https://code.bdstatic.com/npm/chenyfan-oss@0.0.1/3.jpg" alt="img"></a></p>
<p>【unpkg镜像用的是CloudFlare，国内加速效果不好，暂时不写】</p>
<p>jsd就不必多说了，国内拥有强劲的网宿节点支撑【虽然以前出现过网宿下游投毒】，速度丝滑无比，国外也有强劲的CloudFlare上岗，可谓国内外两不误。而且，jsd对于npm的package单文件没有大小限制，也就是说泡个视频也不是问题。</p>
<p>zhimg是知乎的unpkg镜像，也是一个不错的选择【阿里CDN】，知乎官方也未对此做出限制，日常使用是可以的。</p>
<p>bdstatic是百度的内用npm镜像，速度也很好【百度CDN】，但是请注意，bdstatic作为内用cdn，其拉取频率较慢，经常出现无法及时更新。</p>
<p>啊哈？不会上传？
<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_31.png"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_31.png" alt="img"></a>去<a href="https://npmjs.org/">npm</a>
官网注册个账号去,然后先：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">npm loginCopy
</code></pre></div><p>接着：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">npm init
npm publishCopy
</code></pre></div><p>请注意，如果你之前用过淘宝镜像，那么请先手动切回源：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">npm config set registry https://registry.npmjs.orgCopy
</code></pre></div><p>每一次发布图片后，你可以将原来的图片删除，更改<code>package.json</code> 版本号【向上增加】,然后<code>npm publish</code>即可</p>
<p>这个似乎可以搭配picgo，不过好像没这个插件，写起来也麻烦。。。</p>
<p>unpkg的国内镜像其实远远不止这些，包括七牛、饿了么、腾讯都有，不过这个就要自己找了。<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/7DgSoyqwtYBxchE.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/7DgSoyqwtYBxchE.jpg" alt="img"></a></p>
<h2 id="ipfs">ipfs</h2>
<p>我曾经<a href="https://blog.cyfan.top/2020/04/07/IPFS-CloudFlare-ServerLessWebPage/">写过关于ipfs的讲解</a> ,作为一个去中心化的存储系统拿来做公开图床其实挺不错的。</p>
<p>我个人搭建的ipfs镜像【托管于CloudFlareWorkers】：<a href="https://ipfs.cyfan.top/">https://ipfs.cyfan.top</a> <a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53d78c3f4a5.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53d78c3f4a5.jpg" alt="img"></a></p>
<p>我个人搭建的ipfs上传API：<a href="https://ipfsupload.cyfan.top/">https://ipfsupload.cyfan.top</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">接口地址：https://ipfsupload.cyfan.top/api/v0/add?pin=true
post参数：file
回调json：HashCopy
</code></pre></div><blockquote>
<p>此处Hash获得的是文件的Qmhash，你还要依托ipfs镜像，如https://ipfs.cyfan.top/ipfs/{QmHash}</p>
</blockquote>
<p><a href="https://ipfs.cyfan.top/ipfs/QmctXmCyxkN72nzoHMAgw1geR7u9XvK7sLo72W4bDZsCm2"><img src="https://ipfs.cyfan.top/ipfs/QmctXmCyxkN72nzoHMAgw1geR7u9XvK7sLo72W4bDZsCm2" alt="img"></a></p>
<p>顺便收录一些ipfs网关【可访问】：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">【北京 阿里云】https://hashnews.k1ic.com/
【香港 阿里云】https://ipfs.jbb.one/
【美国 DigitalOcean】https://ipfs.telos.miami/
【Amazon】https://ipfs.oceanprotocol.com/Copy
</code></pre></div><p>你可以在https://ipfs.github.io/public-gateway-checker/找到更多</p>
<h1 id="图片缓存服务">图片缓存服务</h1>
<p>正如<a href="https://blog.cyfan.top/2020/09/12/hey-picbed/##Imgur">##Imgur</a>所说的，imgur在国内已经无法访问了，但是，图片缓存服务可以啊！</p>
<p><a href="https://search.pstatic.net/common/?src=https://i.imgur.com/Usdr0IT.jpg"><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/Usdr0IT.jpg" alt="img"></a></p>
<p>收集了一些图片缓存服务：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">【国内网宿节点，只能加载特定图床图片如imgur】https://search.pstatic.net/common/?src=
【Akamai节点，没有使用限制】https://imageproxy.pimg.tw/resize?url=
【CloudFlare节点】https://images.weserv.nl/?url=
【CloudFlare节点】https://pic1.xuehuaimg.com/proxy/Copy
</code></pre></div><h1 id="picgo的搭配使用">PicGo的搭配使用</h1>
<p>PicGo默认已经集成了部分图床，其拖拽上传、自动复制剪贴板实在赢得了无数人的心。但是，对于一些冷门的图床支持似乎就不太好，这时候你需要用自定义web图床实现这一切：</p>
<p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205225.png?q=45"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205225.png?q=45" alt="img"></a></p>
<p>我在上方介绍的图床如果支持web端上传，基本上就会写一个post请求，你可以依葫芦画瓢填写进去</p>
<p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205449.png?q=45"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205449.png?q=45" alt="img"></a></p>
<p>这样子你就可以实现较为丝滑的上传图片了：</p>
<p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912210009.jpg?q=45"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912210009.jpg?q=45" alt="img"></a></p>
<p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912210420.gif?q=45"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912210420.gif?q=45" alt="img"></a></p>
<p>【为了压缩方便删除了部分帧】</p>
<h1 id="后言">后言</h1>
<p>实际上最保险的莫过于使用各大厂商的对象存储，当然这笔钱不大好使。
你也可以用自己的VPS搭建Chevereto，当然前提是你有VPS<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53de1a4d14d.gif"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53de1a4d14d.gif" alt="img"></a></p>]]></description><category domain="https://raycoder.me/categories/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://raycoder.me/tags/%E5%9B%BE%E5%BA%8A/">图床</category><category domain="https://raycoder.me/tags/%E5%8D%9A%E5%AE%A2/">博客</category></item><item><title>Vue中的{ __ob__: Observer }问题解决</title><link>https://raycoder.me/p/vue-ob-observer-problem/</link><guid isPermaLink="true">https://raycoder.me/p/vue-ob-observer-problem/</guid><pubDate>Fri, 21 Aug 2020 07:47:32 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<p>在Vue的开发中，我们经常有异步获取数据的情况，在没有数据的时候使用骨架装载器（<code>Skeleton Loader</code>，直译）占位，比如：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">template</span>&gt;
    &lt;<span style="color:#f92672">div</span>&gt;
        &lt;<span style="color:#f92672">v-row</span>&gt;
            &lt;<span style="color:#f92672">template</span> <span style="color:#a6e22e">v-if</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;books&#34;</span>&gt;
            &lt;/<span style="color:#f92672">template</span>&gt;
            &lt;<span style="color:#f92672">template</span> <span style="color:#a6e22e">v-else</span>&gt;
                &lt;<span style="color:#f92672">v-card</span>
                    <span style="color:#a6e22e">min-width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;344&#34;</span>
                    <span style="color:#a6e22e">min-height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;286&#34;</span>
                    <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mx-4&#34;</span>
                &gt;
                    &lt;<span style="color:#f92672">v-skeleton-loader</span>
                        <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mx-auto&#34;</span>
                        <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;card, list-item&#34;</span>
                    &gt;&lt;/<span style="color:#f92672">v-skeleton-loader</span>&gt;
                &lt;/<span style="color:#f92672">v-card</span>&gt;
            &lt;/<span style="color:#f92672">template</span>&gt;
        &lt;/<span style="color:#f92672">v-row</span>&gt;
    &lt;/<span style="color:#f92672">div</span>&gt;
&lt;/<span style="color:#f92672">template</span>&gt;

&lt;<span style="color:#f92672">script</span>&gt;
    <span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> {
        <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;HomePage&#39;</span>,
        <span style="color:#a6e22e">data</span> () {
            <span style="color:#66d9ef">return</span> {
                <span style="color:#a6e22e">books</span><span style="color:#f92672">:</span> []
            }
        },
        <span style="color:#a6e22e">components</span><span style="color:#f92672">:</span> {
            <span style="color:#a6e22e">Item</span>
        },
        <span style="color:#a6e22e">mounted</span> () {
            document.<span style="color:#a6e22e">title</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Leanbook - Index&#39;</span>
            <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">$store</span>.<span style="color:#a6e22e">dispatch</span>(<span style="color:#e6db74">&#39;mock/getBooksData&#39;</span>)
        }
    }
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><p>然后通过axios之类的异步库（Vuex）来获取数据。</p>
<p>嘶，然后，出问题了。</p>
<p><code>Skeleton Loader</code>没显示啊！</p>
<p>我们来打印一下<code>books</code>：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">books</span>)
<span style="color:#f92672">&lt;</span> { <span style="color:#a6e22e">__ob__</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Observer</span> }
</code></pre></div><p>好吧，原来Vue为了监视数值的变化加了一个<code>Observer</code>，这会导致判断出来“数组有值”。</p>
<p>那么我们就有思路了，用<code>JSON.stringify</code>来监测这个数组是不是空数组。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">template</span>&gt;
    &lt;<span style="color:#f92672">div</span>&gt;
        &lt;<span style="color:#f92672">v-row</span>&gt;
            &lt;<span style="color:#f92672">template</span> <span style="color:#a6e22e">v-if</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;JSON.stringify(books) !== &#39;[]&#39;&#34;</span>&gt;
            &lt;/<span style="color:#f92672">template</span>&gt;
            &lt;<span style="color:#f92672">template</span> <span style="color:#a6e22e">v-else</span>&gt;
                &lt;<span style="color:#f92672">v-card</span>
                    <span style="color:#a6e22e">min-width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;344&#34;</span>
                    <span style="color:#a6e22e">min-height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;286&#34;</span>
                    <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mx-4&#34;</span>
                &gt;
                    &lt;<span style="color:#f92672">v-skeleton-loader</span>
                        <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mx-auto&#34;</span>
                        <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;card, list-item&#34;</span>
                    &gt;&lt;/<span style="color:#f92672">v-skeleton-loader</span>&gt;
                &lt;/<span style="color:#f92672">v-card</span>&gt;
            &lt;/<span style="color:#f92672">template</span>&gt;
        &lt;/<span style="color:#f92672">v-row</span>&gt;
    &lt;/<span style="color:#f92672">div</span>&gt;
&lt;/<span style="color:#f92672">template</span>&gt;
</code></pre></div><blockquote>
<p>网上的教程都是使用<code>JSON.parse(JSON.stringfy())</code>来取值，相当于深拷贝。但是我们这里的值可能会变动，所以不能深拷贝，只能使用<code>JSON.stringify()</code>。</p>
<p>如果需要在其他地方取值，那么需要深拷贝。</p>
</blockquote>
<p>好的，加入完<code>JSON.stringify</code>之后，<code>Skeleton Loader</code>工作了！</p>
<p>全文完</p>]]></description><category domain="https://raycoder.me/categories/%E5%89%8D%E7%AB%AF/">前端</category><category domain="https://raycoder.me/categories/vue/">Vue</category><category domain="https://raycoder.me/tags/%E5%89%8D%E7%AB%AF/">前端</category><category domain="https://raycoder.me/tags/vue/">Vue</category><category domain="https://raycoder.me/tags/vue%E9%97%AE%E9%A2%98/">Vue问题</category></item><item><title>Python Import This源码剖析</title><link>https://raycoder.me/p/python-import-this/</link><guid isPermaLink="true">https://raycoder.me/p/python-import-this/</guid><pubDate>Wed, 29 Jul 2020 20:00:07 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<p>众所周知，Python有一个<code>import this</code>的彩蛋：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200729200602.png" alt=""></p>
<p>但是，这个彩蛋的源代码在哪里呢🤔</p>
<p>我们来康康：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> this
<span style="color:#f92672">&lt;</span>module <span style="color:#e6db74">&#39;this&#39;</span> <span style="color:#f92672">from</span> <span style="color:#e6db74">&#39;C:</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">[User Name]</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">AppData</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Local</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Programs</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Python</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Python38</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">lib</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">this.py&#39;</span><span style="color:#f92672">&gt;</span>
</code></pre></div><p><code>this.py</code>：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;Gur Mra bs Clguba, ol Gvz Crgref
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">Ornhgvshy vf orggre guna htyl.
</span><span style="color:#e6db74">Rkcyvpvg vf orggre guna vzcyvpvg.
</span><span style="color:#e6db74">Fvzcyr vf orggre guna pbzcyrk.
</span><span style="color:#e6db74">Pbzcyrk vf orggre guna pbzcyvpngrq.
</span><span style="color:#e6db74">Syng vf orggre guna arfgrq.
</span><span style="color:#e6db74">Fcnefr vf orggre guna qrafr.
</span><span style="color:#e6db74">Ernqnovyvgl pbhagf.
</span><span style="color:#e6db74">Fcrpvny pnfrf nera&#39;g fcrpvny rabhtu gb oernx gur ehyrf.
</span><span style="color:#e6db74">Nygubhtu cenpgvpnyvgl orngf chevgl.
</span><span style="color:#e6db74">Reebef fubhyq arire cnff fvyragyl.
</span><span style="color:#e6db74">Hayrff rkcyvpvgyl fvyraprq.
</span><span style="color:#e6db74">Va gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff.
</span><span style="color:#e6db74">Gurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg.
</span><span style="color:#e6db74">Nygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh&#39;er Qhgpu.
</span><span style="color:#e6db74">Abj vf orggre guna arire.
</span><span style="color:#e6db74">Nygubhtu arire vf bsgra orggre guna *evtug* abj.
</span><span style="color:#e6db74">Vs gur vzcyrzragngvba vf uneq gb rkcynva, vg&#39;f n onq vqrn.
</span><span style="color:#e6db74">Vs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn.
</span><span style="color:#e6db74">Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg&#39;f qb zber bs gubfr!&#34;&#34;&#34;</span>

d <span style="color:#f92672">=</span> {}
<span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> (<span style="color:#ae81ff">65</span>, <span style="color:#ae81ff">97</span>):
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
        d[chr(i<span style="color:#f92672">+</span>c)] <span style="color:#f92672">=</span> chr((i<span style="color:#f92672">+</span><span style="color:#ae81ff">13</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> c)

<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([d<span style="color:#f92672">.</span>get(c, c) <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> s]))
</code></pre></div><p>原来，这个彩蛋竟然用到了凯撒密码（Caesar cipher）：</p>
<blockquote>
<p>在密码学中，恺撒密码（英语：Caesar cipher），或称恺撒加密、恺撒变换、变换加密，是一种最简单且最广为人知的加密技术。它是一种替换加密的技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。这个加密方法是以罗马共和时期恺撒的名字命名的，当年恺撒曾用此方法与其将军们进行联系。</p>
</blockquote>
<p>这样的话，从源码来看，偏移量应该是13:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">d[chr(i<span style="color:#f92672">+</span>c)] <span style="color:#f92672">=</span> chr((i<span style="color:#f92672">+</span><span style="color:#ae81ff">13</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> c)
</code></pre></div><p>好家伙，我们来看看源码，并做一些注释：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># 加密过的文字</span>
s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;Gur Mra bs Clguba, ol Gvz Crgref
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">Ornhgvshy vf orggre guna htyl.
</span><span style="color:#e6db74">Rkcyvpvg vf orggre guna vzcyvpvg.
</span><span style="color:#e6db74">Fvzcyr vf orggre guna pbzcyrk.
</span><span style="color:#e6db74">Pbzcyrk vf orggre guna pbzcyvpngrq.
</span><span style="color:#e6db74">Syng vf orggre guna arfgrq.
</span><span style="color:#e6db74">Fcnefr vf orggre guna qrafr.
</span><span style="color:#e6db74">Ernqnovyvgl pbhagf.
</span><span style="color:#e6db74">Fcrpvny pnfrf nera&#39;g fcrpvny rabhtu gb oernx gur ehyrf.
</span><span style="color:#e6db74">Nygubhtu cenpgvpnyvgl orngf chevgl.
</span><span style="color:#e6db74">Reebef fubhyq arire cnff fvyragyl.
</span><span style="color:#e6db74">Hayrff rkcyvpvgyl fvyraprq.
</span><span style="color:#e6db74">Va gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff.
</span><span style="color:#e6db74">Gurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg.
</span><span style="color:#e6db74">Nygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh&#39;er Qhgpu.
</span><span style="color:#e6db74">Abj vf orggre guna arire.
</span><span style="color:#e6db74">Nygubhtu arire vf bsgra orggre guna *evtug* abj.
</span><span style="color:#e6db74">Vs gur vzcyrzragngvba vf uneq gb rkcynva, vg&#39;f n onq vqrn.
</span><span style="color:#e6db74">Vs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn.
</span><span style="color:#e6db74">Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg&#39;f qb zber bs gubfr!&#34;&#34;&#34;</span>

d <span style="color:#f92672">=</span> {} <span style="color:#75715e"># 一个凯撒密码对应表，如下</span>
<span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">{&#39;A&#39;: &#39;N&#39;, &#39;B&#39;: &#39;O&#39;, &#39;C&#39;: &#39;P&#39;, &#39;D&#39;: &#39;Q&#39;, &#39;E&#39;: &#39;R&#39;, &#39;F&#39;: &#39;S&#39;, &#39;G&#39;: &#39;T&#39;, &#39;H&#39;: &#39;U&#39;, &#39;I&#39;: &#39;V&#39;, &#39;J&#39;: &#39;W&#39;, &#39;K&#39;: &#39;X&#39;, &#39;L&#39;: &#39;Y&#39;, &#39;M&#39;: &#39;Z&#39;, &#39;N&#39;: &#39;A&#39;, &#39;O&#39;: &#39;B&#39;, &#39;P&#39;: &#39;C&#39;, &#39;Q&#39;: &#39;D&#39;, &#39;R&#39;: &#39;E&#39;, &#39;S&#39;: &#39;F&#39;, &#39;T&#39;: &#39;G&#39;, &#39;U&#39;: &#39;H&#39;, &#39;V&#39;: &#39;I&#39;, &#39;W&#39;: &#39;J&#39;, &#39;X&#39;: &#39;K&#39;, &#39;Y&#39;: &#39;L&#39;, &#39;Z&#39;: &#39;M&#39;, &#39;a&#39;: &#39;n&#39;, &#39;b&#39;: &#39;o&#39;, &#39;c&#39;: &#39;p&#39;, &#39;d&#39;: &#39;q&#39;, &#39;e&#39;: &#39;r&#39;, &#39;f&#39;: &#39;s&#39;, &#39;g&#39;: &#39;t&#39;, &#39;h&#39;: &#39;u&#39;, &#39;i&#39;: &#39;v&#39;, &#39;j&#39;: &#39;w&#39;, &#39;k&#39;: &#39;x&#39;, &#39;l&#39;: &#39;y&#39;, &#39;m&#39;: &#39;z&#39;, &#39;n&#39;: &#39;a&#39;, &#39;o&#39;: &#39;b&#39;, &#39;p&#39;: &#39;c&#39;, &#39;q&#39;: &#39;d&#39;, &#39;r&#39;: &#39;e&#39;, &#39;s&#39;: &#39;f&#39;, &#39;t&#39;: &#39;g&#39;, &#39;u&#39;: &#39;h&#39;, &#39;v&#39;: &#39;i&#39;, &#39;w&#39;: &#39;j&#39;, &#39;x&#39;: &#39;k&#39;, &#39;y&#39;: &#39;l&#39;, &#39;z&#39;: &#39;m&#39;}
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>
<span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> (<span style="color:#ae81ff">65</span>, <span style="color:#ae81ff">97</span>): <span style="color:#75715e"># ASCII码，65代表A，97代表a</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>): <span style="color:#75715e"># 26个字母</span>
        d[chr(i<span style="color:#f92672">+</span>c)] <span style="color:#f92672">=</span> chr((i<span style="color:#f92672">+</span><span style="color:#ae81ff">13</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> c) 
<span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">chr函数：把ASCII码转换成字符
</span><span style="color:#e6db74">chr(i+c)：把每个字符转换为对应的字符，如chr(0+65)=A
</span><span style="color:#e6db74">chr((i+13) % 26 + c)：
</span><span style="color:#e6db74">  i+13：13位偏移
</span><span style="color:#e6db74">  %26：保证在26个字母内
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>

<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([d<span style="color:#f92672">.</span>get(c, c) <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> s]))
<span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">(Dictionary).get(key, default=None)：如果key存在于字典的键中，则返回相对应的值，否则返回default
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</code></pre></div><p>这玩意儿我又可以吹一年，</p>
<blockquote>
<p>震惊！Python彩蛋竟使用字典、长字符串、chr函数与凯撒密码！</p>
</blockquote>]]></description><category domain="https://raycoder.me/categories/python/">Python</category><category domain="https://raycoder.me/tags/python/">Python</category><category domain="https://raycoder.me/tags/%E5%BD%A9%E8%9B%8B/">彩蛋</category></item><item><title>Vue3的改变有哪些？</title><link>https://raycoder.me/p/vue3-design/</link><guid isPermaLink="true">https://raycoder.me/p/vue3-design/</guid><pubDate>Sun, 19 Jul 2020 18:39:22 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<h3 id="咕了这么久我干了什么">咕了这么久，我干了什么？</h3>
<p>呼，俺前些天在准备<strong>期末考试</strong>，终于放假了~~~😍😍😍🎉🎉🎉可以更新一下博客了！</p>
<h3 id="学-了-什-么活-到-老-学-到-老">学 了 什 么（活 到 老 学 到 老）</h3>
<p>哦，<code>JS</code>、<code>Vue</code>和<code>React</code>。</p>
<h3 id="为什么关注vue3">为什么关注<code>Vue3</code>？</h3>
<p><code>Vue3.0</code>RC🤢🤔</p>
<h3 id="正文开始">正文开始</h3>
<p>（<code>Vue3</code>英文文档：<a href="https://v3.vuejs.org">https://v3.vuejs.org</a>，中文：<a href="https://v3.cn.vuejs.org">https://v3.cn.vuejs.org</a>）</p>
<h4 id="vue3重写原因">Vue3重写原因？</h4>
<ul>
<li>
<p><code>Tree shaking support</code>：可以将无用模块“剪辑”，仅打包需要的。</p>
</li>
<li>
<p><code>Composition API</code>：组合<code>API</code></p>
</li>
<li>
<p><code>Better TypeScript support</code>：更优秀的Ts支持</p>
</li>
<li>
<p>更好的<code>Virtual DOM Diff算法</code></p>
</li>
<li>
<p>代码的<code>聚集性</code></p>
</li>
</ul>
<h5 id="composition-api组合api"><code>Composition API</code>：组合<code>API</code></h5>
<p>在<code>Vue 2.x</code>中，浏览器端和<code>webpack</code>都可以使用一个Vue对象（<code>import Vue from &quot;vue&quot;</code>）。</p>
<p>而在<code>Vue3</code>中（<code>webpack</code>环境），你可以通过从Vue中导入所需功能来使用，有助于减小代码体积）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vue" data-lang="vue">&lt;<span style="color:#f92672">template</span>&gt;
  &lt;<span style="color:#f92672">button</span> <span style="color:#f92672">@click</span><span style="color:#e6db74">=&#34;increment&#34;</span>&gt;
    <span style="color:#a6e22e">Count</span> <span style="color:#a6e22e">is</span><span style="color:#f92672">:</span> {{ <span style="color:#a6e22e">state.count</span> }}<span style="color:#960050;background-color:#1e0010">,</span> <span style="color:#a6e22e">double</span> <span style="color:#a6e22e">is</span><span style="color:#f92672">:</span> {{ <span style="color:#a6e22e">state.double</span> }}
  &lt;/<span style="color:#f92672">button</span>&gt;
&lt;/<span style="color:#f92672">template</span>&gt;

&lt;<span style="color:#f92672">script</span>&gt;
<span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">reactive</span>, <span style="color:#a6e22e">computed</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;vue&#39;</span>

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> {
  <span style="color:#a6e22e">setup</span>() {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">state</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">reactive</span>({
      <span style="color:#a6e22e">count</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>,
      <span style="color:#66d9ef">double</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">computed</span>(() =&gt; <span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">count</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>)
    })

    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">increment</span>() {
      <span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">count</span><span style="color:#f92672">++</span>
    }

    <span style="color:#66d9ef">return</span> {
      <span style="color:#a6e22e">state</span>,
      <span style="color:#a6e22e">increment</span>
    }
  }
}
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><p>参阅：<a href="https://composition-api.vuejs.org/">https://composition-api.vuejs.org/</a></p>
<h5 id="代码的聚集性">代码的<code>聚集性</code></h5>
<p>使用组件时，一个HTML节点可能会与多个选项相关：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vue" data-lang="vue">&lt;<span style="color:#f92672">template</span>&gt;
	&lt;<span style="color:#f92672">input</span> <span style="color:#f92672">v-model</span><span style="color:#e6db74">=&#34;inputVal&#34; @blur=&#34;handleBlur&#34; </span><span style="color:#f92672">:style</span><span style="color:#e6db74">=&#34;inputStyle&#34;</span>&gt;&lt;/<span style="color:#f92672">input</span>&gt;
&lt;/<span style="color:#f92672">template</span>&gt;

&lt;<span style="color:#f92672">script</span>&gt;
    <span style="color:#a6e22e">prefixCls</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`test-input`</span>
    <span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> {
        <span style="color:#a6e22e">data</span> () {
            <span style="color:#66d9ef">return</span> {
                <span style="color:#a6e22e">inputVal</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>,
                <span style="color:#a6e22e">prefixCls</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">prefixCls</span>
                <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>            }
        },
        <span style="color:#a6e22e">methods</span><span style="color:#f92672">:</span> {
            <span style="color:#a6e22e">handleBlur</span> () {
                <span style="color:#75715e">// Handle Blur
</span><span style="color:#75715e"></span>            }
            <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>        },
        <span style="color:#a6e22e">computed</span><span style="color:#f92672">:</span> {
            <span style="color:#a6e22e">inputStyle</span> () {
                <span style="color:#66d9ef">return</span> [<span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">prefixCls</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>]
            },
            <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>        },
        <span style="color:#a6e22e">watch</span><span style="color:#f92672">:</span> {
            <span style="color:#a6e22e">inputVal</span> () {
                <span style="color:#a6e22e">handleInput</span>()
            },
            <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>        },
        <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>    }
&lt;/<span style="color:#f92672">script</span>&gt;

&lt;<span style="color:#f92672">style</span>&gt;...&lt;/<span style="color:#f92672">style</span>&gt;
</code></pre></div><p>如是，一个<code>input</code>的代码被分散到了许多选项中：<code>data</code>，<code>methods</code>，<code>computed</code>，<code>watch</code>，如Vue官方图：</p>
<p align="center">
<img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200719190119.png" style="width:131px">
</p>
<p>Vue官方示例如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">useCreateFolder</span> (<span style="color:#a6e22e">openFolder</span>) {
  <span style="color:#75715e">// originally data properties
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">showNewFolder</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">ref</span>(<span style="color:#66d9ef">false</span>)
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newFolderName</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">ref</span>(<span style="color:#e6db74">&#39;&#39;</span>)

  <span style="color:#75715e">// originally computed property
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newFolderValid</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">computed</span>(() =&gt; <span style="color:#a6e22e">isValidMultiName</span>(<span style="color:#a6e22e">newFolderName</span>.<span style="color:#a6e22e">value</span>))

  <span style="color:#75715e">// originally a method
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">createFolder</span> () {
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">newFolderValid</span>.<span style="color:#a6e22e">value</span>) <span style="color:#66d9ef">return</span>
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">mutate</span>({
      <span style="color:#a6e22e">mutation</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">FOLDER_CREATE</span>,
      <span style="color:#a6e22e">variables</span><span style="color:#f92672">:</span> {
        <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">newFolderName</span>.<span style="color:#a6e22e">value</span>
      }
    })
    <span style="color:#a6e22e">openFolder</span>(<span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">folderCreate</span>.<span style="color:#a6e22e">path</span>)
    <span style="color:#a6e22e">newFolderName</span>.<span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#a6e22e">showNewFolder</span>.<span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>
  }

  <span style="color:#66d9ef">return</span> {
    <span style="color:#a6e22e">showNewFolder</span>,
    <span style="color:#a6e22e">newFolderName</span>,
    <span style="color:#a6e22e">newFolderValid</span>,
    <span style="color:#a6e22e">createFolder</span>
  }
}
</code></pre></div><p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200719191506.png" alt=""></p>
<hr>
<p>Q.是不是<code>Vue3</code>就不能使用选项API了？</p>
<p>A.可以用，这是两个并存的API。</p>
<p>推荐视频：<a href="https://www.bilibili.com/video/BV1ke411W7WB/">https://www.bilibili.com/video/BV1ke411W7WB/</a></p>
]]></description><category domain="https://raycoder.me/categories/%E5%89%8D%E7%AB%AF/">前端</category><category domain="https://raycoder.me/categories/vue/">Vue</category><category domain="https://raycoder.me/tags/%E5%89%8D%E7%AB%AF/">前端</category><category domain="https://raycoder.me/tags/vue/">Vue</category><category domain="https://raycoder.me/tags/vue3/">Vue3</category></item><item><title>期末考试</title><link>https://raycoder.me/status/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/</link><guid isPermaLink="true">https://raycoder.me/status/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/</guid><pubDate>Mon, 06 Jul 2020 15:41:59 +0800</pubDate><description>&lt;p>哎我的天期末复习是真的难&lt;/p>
&lt;p>真不是我不更新啊&lt;/p></description></item><item><title>Hugo与Hexo的工作机制</title><link>https://raycoder.me/p/how-hugo-and-hexo-works/</link><guid isPermaLink="true">https://raycoder.me/p/how-hugo-and-hexo-works/</guid><pubDate>Sun, 07 Jun 2020 14:14:35 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<p>最近在群里看到一些小伙伴在问问题！主要是不知道怎么添加下载链接！这件事情本来就是一个简单的<code>markdown</code>超链接+<code>downloads</code>目录的事，但是咋在他们口里就这么难咧🍌</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200607141946.jpg" style="zoom:25%;" /></p>
<p>嗯，我先来给大家分析一下<code>hexo</code>和<code>hugo</code>的工作机制。上图~~，淦它就完了~~</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200607142035.svg" alt=""></p>
<p>就是这样。</p>
<p><code>hexo</code>可以在<code>/source</code>文件夹下新建一个<code>downloads</code>目录，<code>hugo</code>就在<code>/static</code>文件夹下新建。</p>
<p><code>hexo</code>需要在站点配置文件里修改：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">skip_render</span>:
  - downloads/<span style="color:#75715e">**</span>
</code></pre></div><p>然后....</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200607142409.jpg" alt=""></p>
<p>完事了</p>
<p>（又氵了一篇文章）</p>
]]></description><category domain="https://raycoder.me/categories/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://raycoder.me/tags/hugo/">Hugo</category><category domain="https://raycoder.me/tags/hexo/">Hexo</category><category domain="https://raycoder.me/tags/%E5%8D%9A%E5%AE%A2/">博客</category></item><item><title>Vercel真香</title><link>https://raycoder.me/status/vercel%E7%9C%9F%E9%A6%99/</link><guid isPermaLink="true">https://raycoder.me/status/vercel%E7%9C%9F%E9%A6%99/</guid><pubDate>Sun, 24 May 2020 14:04:10 +0800</pubDate><description>&lt;p>&lt;a href="https://vercel.com">Vercel&lt;/a>真香，嘿！&lt;/p></description></item><item><title>给Hugo博客加上baiduurls.txt</title><link>https://raycoder.me/p/hugo-baidu-urls/</link><guid isPermaLink="true">https://raycoder.me/p/hugo-baidu-urls/</guid><pubDate>Sun, 24 May 2020 13:40:52 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<p>百度的推送是真香啊嘿（迫真）</p>
<p>emmm 不废话如何自动推送？</p>
<p>新建<code>blog/layouts/_default/list.baiduurls.txt</code>，内容如下</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go">{{<span style="color:#75715e">/* 生成baidu_urls.txt搜索curl文件 */</span>}}
{{<span style="color:#f92672">-</span> <span style="color:#66d9ef">range</span> .<span style="color:#a6e22e">Site</span>.<span style="color:#a6e22e">Pages</span> <span style="color:#f92672">-</span>}}
  {{<span style="color:#f92672">-</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">not</span> .<span style="color:#a6e22e">Draft</span> <span style="color:#f92672">-</span>}}
    {{<span style="color:#f92672">-</span> .<span style="color:#a6e22e">Permalink</span> <span style="color:#f92672">-</span>}}
    {{<span style="color:#f92672">-</span> <span style="color:#e6db74">&#34;\n&#34;</span> <span style="color:#f92672">-</span>}}
  {{<span style="color:#f92672">-</span> <span style="color:#a6e22e">end</span> <span style="color:#f92672">-</span>}}
{{<span style="color:#f92672">-</span> <span style="color:#a6e22e">end</span> <span style="color:#f92672">-</span>}}
</code></pre></div><p>然后在Config.toml里添加</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-diff" data-lang="diff"># Hugo 的输出控制
[outputs]
    page = [&#34;HTML&#34;]
<span style="color:#f92672">-   home = [&#34;HTML&#34;, &#34;SectionsRSS&#34;, &#34;SectionsAtom&#34;]
</span><span style="color:#f92672"></span><span style="color:#a6e22e">+   home = [&#34;HTML&#34;, &#34;SectionsRSS&#34;, &#34;SectionsAtom&#34;, &#34;BaiduURLs&#34;]
</span><span style="color:#a6e22e"></span>    section = [&#34;HTML&#34;]
    # 类别
    taxonomyTerm = [&#34;HTML&#34;]
    # 类别项
    taxonomy = [&#34;HTML&#34;]
    # 说明：https://github.com/gohugoio/hugo/issues/4528#issuecomment-508488859

<span style="color:#a6e22e">+[outputFormats.BaiduURLs]
</span><span style="color:#a6e22e">+    baseName = &#34;baiduurls&#34;
</span><span style="color:#a6e22e">+    isPlainText = true
</span><span style="color:#a6e22e">+    mediaType = &#34;text/plain&#34;
</span><span style="color:#a6e22e">+    notAlternative = true
</span></code></pre></div><p>搞定辽</p>]]></description><category domain="https://raycoder.me/categories/seo/">SEO</category><category domain="https://raycoder.me/tags/%E7%99%BE%E5%BA%A6/">百度</category><category domain="https://raycoder.me/tags/seo/">SEO</category></item><item><title>白嫖GTA</title><link>https://raycoder.me/status/%E7%99%BD%E5%AB%96gta/</link><guid isPermaLink="true">https://raycoder.me/status/%E7%99%BD%E5%AB%96gta/</guid><pubDate>Thu, 21 May 2020 20:08:58 +0800</pubDate><description>&lt;p>白嫖个GTA它不香马？&lt;/p></description></item><item><title>博客缓慢更新</title><link>https://raycoder.me/status/%E5%8D%9A%E5%AE%A2%E7%BC%93%E6%85%A2%E6%9B%B4%E6%96%B0/</link><guid isPermaLink="true">https://raycoder.me/status/%E5%8D%9A%E5%AE%A2%E7%BC%93%E6%85%A2%E6%9B%B4%E6%96%B0/</guid><pubDate>Mon, 11 May 2020 19:47:32 +0800</pubDate><description>&lt;h3 id="嗯博主开学博客咕了">嗯，博主开学，博客咕了&lt;/h3></description></item><item><title>Hugo博客搭配Algolia实现站内搜索</title><link>https://raycoder.me/p/hugo-search-with-algolia/</link><guid isPermaLink="true">https://raycoder.me/p/hugo-search-with-algolia/</guid><pubDate>Tue, 28 Apr 2020 10:15:15 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<h3 id="一些闲话">一些闲话</h3>
<p>Hugo博客较Hexo博客有一点不好，就是无法生成<code>content.json</code>供JS实现站内搜索。一个博客怎么可以没有站内搜索呢，找文章很不方便。</p>
<p>之前也捣鼓了很久Algolia站内搜索，但总是觉得大材小用了，不过不得不说，Algolia的体验真的不错。</p>
<p>Algolia的站内搜索实现也很简单，一起看看罢！</p>
<h3 id="淦">淦</h3>
<h4 id="生成索引">生成索引</h4>
<h5 id="algolia创建空索引">Algolia创建空索引</h5>
<h6 id="打开algoliahttpswwwalgoliacom创建应用自取名字比如说blog注册这里便不再赘述">打开<a href="https://www.algolia.com">Algolia</a>创建应用，自取名字(比如说blog)，注册这里便不再赘述</h6>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200428105807.png" alt=""></p>
<h6 id="创建索引自取名字比如说blog">创建索引，自取名字(比如说blog)</h6>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200428105843.png" alt=""></p>
<h6 id="点击侧栏-api-keys记录信息application-id-search-only-api-key-admin-api-key">点击侧栏 <code>API Keys</code>，记录信息(Application ID, Search-Only API Key, Admin API Key)</h6>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200428105855.png" alt=""></p>
<h5 id="本地生成algolia索引文件">本地生成Algolia索引文件</h5>
<p>在<code>blog/layouts/_default</code>里新建<code>list.algolia.json</code>，内容如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go">{{<span style="color:#75715e">/* 生成Algolia搜索索引文件 */</span>}}
{{<span style="color:#f92672">-</span> <span style="color:#960050;background-color:#1e0010">$</span>.<span style="color:#a6e22e">Scratch</span>.<span style="color:#a6e22e">Add</span> <span style="color:#e6db74">&#34;index&#34;</span> <span style="color:#a6e22e">slice</span> <span style="color:#f92672">-</span>}}
{{<span style="color:#75715e">/* content/p目录下的博文才生成索引，这是我的博客 */</span>}}
{{<span style="color:#f92672">-</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">where</span> (<span style="color:#a6e22e">where</span> .<span style="color:#a6e22e">Site</span>.<span style="color:#a6e22e">Pages</span> <span style="color:#e6db74">&#34;Type&#34;</span> <span style="color:#e6db74">&#34;in&#34;</span> (<span style="color:#a6e22e">slice</span> <span style="color:#e6db74">&#34;p&#34;</span>)) <span style="color:#e6db74">&#34;IsPage&#34;</span> <span style="color:#66d9ef">true</span> <span style="color:#f92672">-</span>}}
  {{<span style="color:#f92672">-</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">not</span> .<span style="color:#a6e22e">Draft</span> <span style="color:#f92672">-</span>}}
    {{<span style="color:#f92672">-</span> <span style="color:#960050;background-color:#1e0010">$</span>.<span style="color:#a6e22e">Scratch</span>.<span style="color:#a6e22e">Add</span> <span style="color:#e6db74">&#34;index&#34;</span> (<span style="color:#a6e22e">dict</span> <span style="color:#e6db74">&#34;objectID&#34;</span> .<span style="color:#a6e22e">File</span>.<span style="color:#a6e22e">UniqueID</span> <span style="color:#e6db74">&#34;url&#34;</span> .<span style="color:#a6e22e">Permalink</span> <span style="color:#e6db74">&#34;content&#34;</span> (.<span style="color:#a6e22e">Summary</span> | <span style="color:#a6e22e">plainify</span>) <span style="color:#e6db74">&#34;tags&#34;</span> .<span style="color:#a6e22e">Params</span>.<span style="color:#a6e22e">Tags</span> <span style="color:#e6db74">&#34;lvl0&#34;</span> .<span style="color:#a6e22e">Title</span> <span style="color:#e6db74">&#34;lvl1&#34;</span> .<span style="color:#a6e22e">Params</span>.<span style="color:#a6e22e">Categories</span> <span style="color:#e6db74">&#34;lvl2&#34;</span> .<span style="color:#a6e22e">Description</span>) <span style="color:#f92672">-</span>}}
  {{<span style="color:#f92672">-</span> <span style="color:#a6e22e">end</span> <span style="color:#f92672">-</span>}}
{{<span style="color:#f92672">-</span> <span style="color:#a6e22e">end</span> <span style="color:#f92672">-</span>}}
{{<span style="color:#f92672">-</span> <span style="color:#960050;background-color:#1e0010">$</span>.<span style="color:#a6e22e">Scratch</span>.<span style="color:#a6e22e">Get</span> <span style="color:#e6db74">&#34;index&#34;</span> | <span style="color:#a6e22e">jsonify</span> <span style="color:#f92672">-</span>}}
</code></pre></div><p>里面的<code>&quot;p&quot;</code>需要自己修改，我的博客比较特殊，使用的Permalink为<code>p/&lt;slug&gt;/</code>，这个根据自己的情况自行修改，如<code>posts</code>等。多个的话只需要把<code>slice &quot;p&quot;</code>改为如<code>slice &quot;posts&quot; &quot;post&quot;</code>即可。</p>
<p>然后打开<code>config.toml</code>，进行如下修改：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-diff" data-lang="diff">[outputs]
<span style="color:#f92672">-    home = [&#34;HTML&#34;, &#34;SectionsAtom&#34;, &#34;SectionsRSS&#34;]
</span><span style="color:#f92672"></span><span style="color:#a6e22e">+    home = [&#34;HTML&#34;, &#34;SectionsAtom&#34;, &#34;SectionsRSS&#34;, &#34;Algolia&#34;]
</span><span style="color:#a6e22e"></span>
...

<span style="color:#a6e22e">+[outputFormats.Algolia]
</span><span style="color:#a6e22e">+  baseName = &#34;algolia&#34;
</span><span style="color:#a6e22e">+  isPlainText = true
</span><span style="color:#a6e22e">+  mediaType = &#34;application/json&#34;
</span><span style="color:#a6e22e">+  notAlternative = true
</span><span style="color:#a6e22e"></span>  
<span style="color:#a6e22e">+[params.algolia]
</span><span style="color:#a6e22e">+  appId = &#34;你的Application ID&#34;
</span><span style="color:#a6e22e">+  indexName = &#34;你的索引名字&#34;
</span><span style="color:#a6e22e">+  searchOnlyKey = &#34;你的Search-Only API Key&#34;
</span></code></pre></div><p>然后可以运行一下<code>hugo</code>命令，确认是否生成了<code>algolia.json</code>如果没有报错就行了。</p>
<h4 id="上传索引测试">上传索引测试</h4>
<p>这一步是可选的，不过还是建议跟着做一下。</p>
<p>点击侧栏 <code>Indices</code> ，点击 <code>Upload record(s)</code> 按钮上传上一步生成的 <code>algolia.json</code> 文件。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200428110248.png" alt=""></p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200428110433.png" alt=""></p>
<p>上传成功之后，我们就可以马上尝试搜索了：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200428110742.png" alt=""></p>
<h4 id="自动上传">自动上传</h4>
<p>每次写完博文都手动上传索引文件无疑是痛苦的、无意义的重复劳动。</p>
<p>因此我们需要把上传索引文件的操作自动化，在自动部署的时候顺便完成即可。</p>
<p>这里我们采用npm包 <a href="https://www.npmjs.com/package/atomic-algolia">atomic-algolia</a> 来完成上传操作。</p>
<h5 id="安装-atomic-algolia-包">安装 atomic-algolia 包</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">npm init  // 不懂的就回车好了
npm install atomic-algolia --save
</code></pre></div><p>修改目录下的 <code>package.json</code> 文件，在 <code>scripts</code> 下添加 <code>&quot;algolia&quot;: &quot;atomic-algolia&quot;</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#e6db74">&#34;scripts&#34;</span>: <span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;test&#34;</span>: <span style="color:#e6db74">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span>,
    <span style="color:#e6db74">&#34;algolia&#34;</span>: <span style="color:#e6db74">&#34;atomic-algolia&#34;</span>
<span style="color:#f92672">}</span>,
</code></pre></div><p>注意 <code>&quot;test&quot;</code> 那一行末尾有个英文逗号，不要漏了。</p>
<h5 id="根目录下新建-env-文件内容如下">根目录下新建 <code>.env</code> 文件，内容如下：</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">ALGOLIA_APP_ID=你的Application ID
ALGOLIA_INDEX_NAME=你的索引名字
ALGOLIA_INDEX_FILE=public/algolia.json
ALGOLIA_ADMIN_KEY=你的Admin API Key
</code></pre></div><p>注意替换你自己Algolia索引的信息。</p>
<p>另外特别注意 <code>ALGOLIA_ADMIN_KEY</code> 可以用来管理你的索引，所以尽量不要提交到公共仓库。</p>
<h5 id="travis-ci实现">Travis CI实现</h5>
<p>嗯，说过了尽量不要把这些推上去，所以我们可以在Travis CI里添加变量，如图。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200428120209.png" alt=""></p>
<p>然后把<code>.env</code>修改一下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">ALGOLIA_APP_ID=${ALGOLIA_APP_ID}
ALGOLIA_INDEX_NAME=${ALGOLIA_INDEX_NAME}
ALGOLIA_INDEX_FILE=${ALGOLIA_INDEX_FILE}
ALGOLIA_ADMIN_KEY=${ALGOLIA_ADMIN_KEY}
</code></pre></div><p>搞定了。</p>
<h5 id="上传索引">上传索引</h5>
<p>你可以本地执行 <code>npm run algolia</code> 查看运行效果：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200428111122.png" alt=""></p>
<p>可以看到我们成功添加了记录。</p>
<p>后续就是把下面的命令加到你的部署脚本即可：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">npm install
npm run algolia // 在hugo命令后面执行 
</code></pre></div><p>至此，如果你运行 <code>npm run algolia</code> 没有报错的话，就可以继续下一步了。</p>
<h4 id="添加搜索框">添加搜索框</h4>
<p>剩下的工作就是添加搜索框了，这一步是跟主题相关的，不过其他主题应该只需要小的调整就可以了。</p>
<h6 id="引入css文件">引入CSS文件</h6>
<p>在主题 <code>layouts/partials/custom</code> 目录下的 <code>head.html</code> 中引入<code>docsearch</code>的CSS文件：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go">{{<span style="color:#f92672">-</span> <span style="color:#66d9ef">if</span> .<span style="color:#a6e22e">Site</span>.<span style="color:#a6e22e">Params</span>.<span style="color:#a6e22e">algolia</span>.<span style="color:#a6e22e">appId</span> <span style="color:#f92672">-</span>}}
&lt;<span style="color:#a6e22e">link</span> <span style="color:#a6e22e">rel</span>=<span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span>=<span style="color:#e6db74">&#34;https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.css&#34;</span> <span style="color:#f92672">/</span>&gt;
{{<span style="color:#f92672">-</span> <span style="color:#a6e22e">end</span> <span style="color:#f92672">-</span>}}
</code></pre></div><h6 id="引入js文件并初始化">引入JS文件并初始化</h6>
<p>在主题 <code>layouts/partials/custom</code>目录下的 <code>scripts.html</code> 中引入<code>docsearch</code>的JS文件并初始化：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go">{{<span style="color:#f92672">-</span> <span style="color:#66d9ef">if</span> .<span style="color:#a6e22e">Site</span>.<span style="color:#a6e22e">Params</span>.<span style="color:#a6e22e">algolia</span>.<span style="color:#a6e22e">appId</span> <span style="color:#f92672">-</span>}}
&lt;<span style="color:#a6e22e">script</span> <span style="color:#a6e22e">src</span>=<span style="color:#e6db74">&#34;https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.js&#34;</span>&gt;&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">script</span>&gt;
&lt;<span style="color:#a6e22e">script</span>&gt;
    <span style="color:#a6e22e">docsearch</span>({
    <span style="color:#a6e22e">apiKey</span>: {{ .<span style="color:#a6e22e">Site</span>.<span style="color:#a6e22e">Params</span>.<span style="color:#a6e22e">algolia</span>.<span style="color:#a6e22e">searchOnlyKey</span> }},
    <span style="color:#a6e22e">indexName</span>: {{ .<span style="color:#a6e22e">Site</span>.<span style="color:#a6e22e">Params</span>.<span style="color:#a6e22e">algolia</span>.<span style="color:#a6e22e">indexName</span> }},
    <span style="color:#a6e22e">appId</span>: {{ .<span style="color:#a6e22e">Site</span>.<span style="color:#a6e22e">Params</span>.<span style="color:#a6e22e">algolia</span>.<span style="color:#a6e22e">appId</span> }},
    <span style="color:#a6e22e">inputSelector</span>: <span style="color:#960050;background-color:#1e0010">&#39;</span>.<span style="color:#a6e22e">docsearch</span><span style="color:#f92672">-</span><span style="color:#a6e22e">input</span><span style="color:#960050;background-color:#1e0010">&#39;</span>,
    <span style="color:#a6e22e">debug</span>: <span style="color:#66d9ef">false</span>,
    });
&lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">script</span>&gt;
{{<span style="color:#f92672">-</span> <span style="color:#a6e22e">end</span> <span style="color:#f92672">-</span>}}
</code></pre></div><h6 id="添加搜索框入口">添加搜索框入口</h6>
<p>在主题 <code>layouts/partials</code> 目录下的 <code>menu.html</code> 中导航栏合适的位置添加搜索框。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go">{{<span style="color:#f92672">-</span> <span style="color:#66d9ef">if</span> .<span style="color:#a6e22e">Site</span>.<span style="color:#a6e22e">Params</span>.<span style="color:#a6e22e">algolia</span>.<span style="color:#a6e22e">appId</span> <span style="color:#f92672">-</span>}}
  &lt;<span style="color:#a6e22e">li</span> <span style="color:#a6e22e">style</span>=<span style="color:#e6db74">&#34;display:inline-block;margin-right:10px;&#34;</span>&gt;
    &lt;<span style="color:#a6e22e">input</span> <span style="color:#66d9ef">type</span>=<span style="color:#e6db74">&#34;search&#34;</span> <span style="color:#a6e22e">class</span>=<span style="color:#e6db74">&#34;docsearch-input&#34;</span> <span style="color:#a6e22e">placeholder</span>=<span style="color:#e6db74">&#34;Search&#34;</span> <span style="color:#f92672">/</span>&gt;
  &lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">li</span>&gt;
{{<span style="color:#f92672">-</span> <span style="color:#a6e22e">end</span> <span style="color:#f92672">-</span>}}
</code></pre></div><p>主要是添加<code>&lt;input&gt;</code> 元素，<code>&lt;li&gt;</code> 元素根据各自主题的情况确定是否添加。
另外注意外层如果有 <code>overflow:hidden</code> 的CSS样式，可能会导致搜索结果框显示不了。😅</p>
<p>好辣，那么我们的站内搜索就完成了！撒花~🎉🎉🎉</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200428112156.gif" alt=""></p>
<hr>
<p>参考：</p>
<ul>
<li><a href="https://edward852.github.io/post/hugo%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2%E6%94%AF%E6%8C%81/">Hugo添加Algolia搜索支持</a></li>
</ul>
]]></description><category domain="https://raycoder.me/categories/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://raycoder.me/categories/%E5%8A%9F%E8%83%BD%E6%B7%BB%E5%8A%A0/">功能添加</category><category domain="https://raycoder.me/categories/%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/">站内搜索</category><category domain="https://raycoder.me/tags/hugo/">Hugo</category><category domain="https://raycoder.me/tags/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://raycoder.me/tags/%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/">站内搜索</category><category domain="https://raycoder.me/tags/algolia/">Algolia</category></item><item><title>使用CloudFlare Workers搭建网站状态监控</title><link>https://raycoder.me/p/cloudflare-workers-website-monitoring/</link><guid isPermaLink="true">https://raycoder.me/p/cloudflare-workers-website-monitoring/</guid><pubDate>Thu, 23 Apr 2020 09:32:16 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<p>没啥好说的，请参考之前的文章，<a href="/p/cf-worker-proxy">万能的CLOUDFLARE WORKERS+JSProxy代理？！</a>和<a href="/p/ghproxy-usage">使用GHProxy加速GitHub</a>进行基础配置。</p>
<h3 id="淦">淦</h3>
<h4 id="复制代码">复制代码</h4>
<p>把如下代码复制到一个新worker里，如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">/*
</span><span style="color:#75715e">* @Author: yumu
</span><span style="color:#75715e">* @Date:   2020-02-05
</span><span style="color:#75715e">* @Email:   yumusb@foxmail.com
</span><span style="color:#75715e">* @Last Modified by:   yumusb
</span><span style="color:#75715e">* @Last Modified time: 2020-02-05
</span><span style="color:#75715e">*/</span>
<span style="color:#75715e">//配置你要监控的域名
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">zone</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
<span style="color:#75715e">//组合域名到API接口访问地址
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">url</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://api.cloudflare.com/client/v4/zones/&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">zone</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/analytics/dashboard?since=-1440&amp;continuous=true&#34;</span>;
<span style="color:#75715e">//你的API验证token
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">token</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#75715e">//页面显示的地址
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">echourl</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://RayCoder.ME&#34;</span>;
<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">handleRequest</span>(<span style="color:#a6e22e">request</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">requestURL</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">url</span>)
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">requestURL</span>.<span style="color:#a6e22e">pathname</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;/&#39;</span>)[<span style="color:#ae81ff">1</span>]
    <span style="color:#75715e">//如果URL以API开头，我们就去API调取数据并返回
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">&#34;api&#34;</span>)) {
        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">referer</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">headers</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;Referer&#39;</span>);
        <span style="color:#75715e">//简单的防盗链和禁止直接访问
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">referer</span> <span style="color:#f92672">||</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">referer</span>).<span style="color:#a6e22e">hostname</span> <span style="color:#f92672">!==</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">url</span>).<span style="color:#a6e22e">hostname</span>) {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Response</span>.<span style="color:#a6e22e">redirect</span>(<span style="color:#e6db74">&#34;https://raycoder.me&#34;</span>, <span style="color:#ae81ff">302</span>)
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">new_request_headers</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Headers</span>(<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">headers</span>);
            <span style="color:#a6e22e">new_request_headers</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;Authorization&#39;</span>, <span style="color:#e6db74">&#39;Bearer &#39;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">token</span>);
            <span style="color:#a6e22e">new_request_headers</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;Content-Type&#39;</span>, <span style="color:#e6db74">&#34;application/json&#34;</span>);
            <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">original_response</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">url</span>, {
                <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">new_request_headers</span>
            })
            <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">response_headers</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">original_response</span>.<span style="color:#a6e22e">headers</span>;
            <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">new_response_headers</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Headers</span>(<span style="color:#a6e22e">response_headers</span>);
            <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">status</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">original_response</span>.<span style="color:#a6e22e">status</span>;
            <span style="color:#a6e22e">new_response_headers</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;access-control-allow-origin&#39;</span>, <span style="color:#e6db74">&#39;*&#39;</span>);
            <span style="color:#a6e22e">response</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Response</span>(<span style="color:#a6e22e">original_response</span>.<span style="color:#a6e22e">body</span>, {
                <span style="color:#a6e22e">status</span>,
                <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">new_response_headers</span>
            })
        }
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">response</span>;
    }
    <span style="color:#75715e">//如果没以API开头，那就返回静态页面
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">init</span> <span style="color:#f92672">=</span> {
        <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> {
            <span style="color:#e6db74">&#39;content-type&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;text/html;charset=UTF-8&#39;</span>,
            <span style="color:#e6db74">&#39;Powered&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;https://raycoder.me&#34;</span>,
        },
    }
    <span style="color:#75715e">//返回html
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">someHTML</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`&lt;!doctype html&gt;&lt;html lang=&#34;zh-cn&#34;&gt;&lt;head&gt;&lt;meta charset=&#34;utf-8&#34;&gt;&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width,initial-scale=1,shrink-to-fit=no&#34;&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.staticfile.org/twitter-bootstrap/4.0.0/css/bootstrap.min.css&#34;&gt;&lt;title&gt;网站流量状态&lt;/title&gt;&lt;style&gt;.breadcrumb{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:.75rem 1rem;margin-top:1em;margin-bottom:1rem;list-style:none;background-color:#e9ecef;border-radius:.25rem}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;nav class=&#34;navbar navbar-expand-lg navbar-dark bg-dark&#34;&gt;&lt;a class=&#34;navbar-brand&#34; href=&#34;#&#34;&gt;网站流量状态&lt;/a&gt;&lt;/nav&gt;&lt;div class=&#34;jumbotron jumbotron-fluid&#34;&gt;&lt;div class=&#34;container&#34;&gt;&lt;h1 class=&#34;display-4&#34;&gt;欢迎访问&lt;/h1&gt;&lt;p class=&#34;lead&#34;&gt;页面将显示 &lt;span class=&#34;badge badge-success&#34;&gt;`</span><span style="color:#f92672">+</span><span style="color:#a6e22e">echourl</span><span style="color:#f92672">+</span><span style="color:#e6db74">`&lt;/span&gt; 最近24小时的访问状态&lt;/p&gt;&lt;p id=&#34;upd&#34;&gt;数据将在 30 秒 后更新&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;container&#34;&gt;&lt;div class=&#34;row&#34;&gt;&lt;div class=&#34;col-lg-12&#34;&gt;&lt;div class=&#34;row&#34;&gt;&lt;div class=&#34;col&#34;&gt;&lt;div class=&#34;card&#34;&gt;&lt;div class=&#34;card-header&#34;&gt;总流量&lt;/div&gt;&lt;div class=&#34;card-body&#34;&gt;&lt;blockquote class=&#34;blockquote mb-0&#34;&gt;&lt;p id=&#34;tbu&#34;&gt;0 B&lt;/p&gt;&lt;footer class=&#34;blockquote-footer&#34;&gt;Total Data Served&lt;/footer&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;col&#34;&gt;&lt;div class=&#34;card&#34;&gt;&lt;div class=&#34;card-header&#34;&gt;请求数&lt;/div&gt;&lt;div class=&#34;card-body&#34;&gt;&lt;blockquote class=&#34;blockquote mb-0&#34;&gt;&lt;p id=&#34;trs&#34;&gt;0&lt;/p&gt;&lt;footer class=&#34;blockquote-footer&#34;&gt;Total Requests&lt;/footer&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;col&#34;&gt;&lt;div class=&#34;card&#34;&gt;&lt;div class=&#34;card-header&#34;&gt;访客数&lt;/div&gt;&lt;div class=&#34;card-body&#34;&gt;&lt;blockquote class=&#34;blockquote mb-0&#34;&gt;&lt;p id=&#34;chr&#34;&gt;0&lt;/p&gt;&lt;footer class=&#34;blockquote-footer&#34;&gt;Unique Visitors&lt;/footer&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;nav aria-label=&#34;breadcrumb&#34;&gt;&lt;ol class=&#34;breadcrumb&#34;&gt;&lt;li class=&#34;breadcrumb-item active&#34; aria-current=&#34;page&#34;&gt;各地区总流量&lt;/li&gt;&lt;/ol&gt;&lt;/nav&gt;&lt;div class=&#34;table-responsive&#34;&gt;&lt;table class=&#34;table table-hover&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th scope=&#34;col&#34;&gt;#&lt;/th&gt;&lt;th scope=&#34;col&#34;&gt;地区&lt;/th&gt;&lt;th scope=&#34;col&#34;&gt;流量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody id=&#34;statb&#34;&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;script src=&#34;https://cdn.staticfile.org/jquery/3.4.1/jquery.min.js&#34;&gt;&lt;/script&gt;&lt;script src=&#34;https://cdn.staticfile.org/twitter-bootstrap/4.0.0/js/bootstrap.min.js&#34;&gt;&lt;/script&gt;&lt;script&gt;function bytesToSize(t){if(0===t)return&#34;0 B&#34;;var a=Math.floor(Math.log(t)/Math.log(1e3));return(t/Math.pow(1e3,a)).toPrecision(3)+&#34; &#34;+[&#34;B&#34;,&#34;KB&#34;,&#34;MB&#34;,&#34;GB&#34;,&#34;TB&#34;,&#34;PB&#34;,&#34;EB&#34;,&#34;ZB&#34;,&#34;YB&#34;][a]}function updataData(){$.ajax({url:&#34;/api&#34;,type:&#34;GET&#34;,data:{RnD:Math.random()},dataType:&#34;json&#34;,success:function(t){$(&#34;#tbu&#34;).html(bytesToSize(t.result.totals.bandwidth.all)),$(&#34;#trs&#34;).html(t.result.totals.requests.all),$(&#34;#chr&#34;).html(t.result.totals.uniques.all),$(&#34;#statb&#34;).html(&#34;&#34;),traffic=t.result.totals.bandwidth.country,str1=&#34;&#34;,i=0,Object.keys(traffic).forEach(function(t){i++,str1=&#34;&lt;tr&gt;&lt;td&gt;&#34;+i+&#34;&lt;/td&gt;&lt;td&gt;&#34;+t+&#34;&lt;/td&gt;&lt;td&gt;&#34;+bytesToSize(traffic[t])+&#34;&lt;/td&gt;&lt;/tr&gt;&#34;,$(&#34;#statb&#34;).append(str1)})},error:function(){alert(&#34;获取失败!&#34;)}})}updataData();var count=30;setInterval(function(){count--,$(&#34;#upd&#34;).html(&#34;数据将在 &#34;+count+&#34; 秒 后更新&#34;),0===count&amp;&amp;(count=30,updataData())},1e3)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;`</span>
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Response</span>(<span style="color:#a6e22e">someHTML</span>, <span style="color:#a6e22e">init</span>)
}
<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;fetch&#39;</span>, <span style="color:#a6e22e">async</span> <span style="color:#a6e22e">event</span> =&gt; {
    <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">respondWith</span>(<span style="color:#a6e22e">handleRequest</span>(<span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">request</span>))
})
</code></pre></div><h4 id="配置项">配置项</h4>
<ul>
<li>
<p><code>zone</code></p>
<p>就是<code>ZoneID</code>，打开某域名页面，然后下滑看右下角。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200423094847.png" alt=""></p>
</li>
<li>
<p><code>token</code></p>
<p>去API页面（点击右上角头像选择my profile，再选择api tokens，最后点击create token）新建一个token</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200423094942.png" alt=""></p>
<p>我们仅需要给指定zone的analytics的Read权限，就足够了。</p>
<p>然后点击Continue,会返回创建的token，是一串含有字符的不规则字符串。</p>
</li>
<li>
<p>页面显示地址</p>
<p>这个就是对应显示的..页面将显示xxxx最近24小时的访问状态..</p>
</li>
</ul>
<p>之后访问即可。</p>
]]></description><category domain="https://raycoder.me/categories/%E7%BD%91%E7%AB%99/">网站</category><category domain="https://raycoder.me/tags/cloudflare/">Cloudflare</category><category domain="https://raycoder.me/tags/cf-workers/">CF Workers</category></item><item><title>使用GHProxy加速GitHub</title><link>https://raycoder.me/p/ghproxy-usage/</link><guid isPermaLink="true">https://raycoder.me/p/ghproxy-usage/</guid><pubDate>Thu, 23 Apr 2020 08:14:51 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<h3 id="先氵一点">先氵一点</h3>
<p>GitHub由于仓库部署在国外，天朝的强大阻断了数据传输<heimu>二</heimu>，GitHub上面的项目Clone速度是真的惨不忍睹</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200423084605.png" alt=""></p>
<p>当然也有人说，Gitee复制一下仓库，Clone下来再改配置不就行了吗？</p>
<p>emmm是可以，但是Gitee也无法复制项目的Releases。</p>
<p><heimu>艾玛真烦</heimu></p>
<p>最近康到一篇文章，感觉还不错，分享给大家<a href="https://hunsh.net/archives/23">https://hunsh.net/archives/23</a>，好像是基于JSProxy的一个GH代理，JSProxy之前已经搭过了，决定再氵一篇<code>GHProxy</code>的文章😏</p>
<hr>
<h3 id="正文开始">正文开始</h3>
<h4 id="基础配置">基础配置</h4>
<p>这个就不多说了，自己看<a href="/p/cf-worker-proxy/">万能的CLOUDFLARE WORKERS+JSProxy代理？！</a>，注册一个账号，修改域名NS。</p>
<h4 id="开淦">开淦</h4>
<p>这个比JSProxy的配置还要简单，新建一个worker，把代码复制到workers的代码里。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#e6db74">&#39;use strict&#39;</span>

<span style="color:#75715e">/**
</span><span style="color:#75715e"> * static files (404.html, sw.js, conf.js)
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ASSET_URL</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://hunshcn.github.io/gh-proxy&#39;</span>
<span style="color:#75715e">// 前缀，如果自定义路由为example.com/gh/*，将PREFIX改为 &#39;/gh/&#39;，注意，少一个杠都会错！
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">PREFIX</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/&#39;</span>
<span style="color:#75715e">// git使用cnpmjs镜像、分支文件使用jsDelivr镜像的开关，0为关闭，默认开启
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Config</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">jsdelivr</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
    <span style="color:#a6e22e">cnpmjs</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>
}

<span style="color:#75715e">/** @type {RequestInit} */</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">PREFLIGHT_INIT</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">status</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">204</span>,
    <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Headers</span>({
        <span style="color:#e6db74">&#39;access-control-allow-origin&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;*&#39;</span>,
        <span style="color:#e6db74">&#39;access-control-allow-methods&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#39;</span>,
        <span style="color:#e6db74">&#39;access-control-max-age&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;1728000&#39;</span>,
    }),
}

<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {any} body
</span><span style="color:#75715e"> * @param {number} status
</span><span style="color:#75715e"> * @param {Object&lt;string, string&gt;} headers
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#a6e22e">body</span>, <span style="color:#a6e22e">status</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>, <span style="color:#a6e22e">headers</span> <span style="color:#f92672">=</span> {}) {
    <span style="color:#a6e22e">headers</span>[<span style="color:#e6db74">&#39;access-control-allow-origin&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;*&#39;</span>
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Response</span>(<span style="color:#a6e22e">body</span>, {<span style="color:#a6e22e">status</span>, <span style="color:#a6e22e">headers</span>})
}


<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {string} urlStr
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">newUrl</span>(<span style="color:#a6e22e">urlStr</span>) {
    <span style="color:#66d9ef">try</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">urlStr</span>)
    } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">err</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>
    }
}


<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;fetch&#39;</span>, <span style="color:#a6e22e">e</span> =&gt; {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ret</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fetchHandler</span>(<span style="color:#a6e22e">e</span>)
        .<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">err</span> =&gt; <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;cfworker error:\n&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">stack</span>, <span style="color:#ae81ff">502</span>))
    <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">respondWith</span>(<span style="color:#a6e22e">ret</span>)
})


<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {FetchEvent} e
</span><span style="color:#75715e"> */</span>
<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">fetchHandler</span>(<span style="color:#a6e22e">e</span>) {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">req</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">request</span>
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">urlStr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">url</span>
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">urlObj</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">urlStr</span>)
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">searchParams</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;q&#39;</span>)
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">path</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Response</span>.<span style="color:#a6e22e">redirect</span>(<span style="color:#e6db74">&#39;https://&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">host</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">PREFIX</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">path</span>, <span style="color:#ae81ff">301</span>)
    }
    <span style="color:#75715e">// cfworker 会把路径中的 `//` 合并成 `/`
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">href</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">origin</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">PREFIX</span>.<span style="color:#a6e22e">length</span>).<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/^https?:\/+/</span>, <span style="color:#e6db74">&#39;https://&#39;</span>)
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">exp1</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:releases|archive)\/.*$/i</span>
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">exp2</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:blob)\/.*$/i</span>
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">exp3</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:info|git-upload-pack).*$/i</span>
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">exp4</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">/^(?:https?:\/\/)?raw\.githubusercontent\.com\/.+?\/.+?\/.+?\/.+$/i</span>
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">search</span>(<span style="color:#a6e22e">exp1</span>) <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">Config</span>.<span style="color:#a6e22e">jsdelivr</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">search</span>(<span style="color:#a6e22e">exp2</span>) <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">Config</span>.<span style="color:#a6e22e">cnpmjs</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">search</span>(<span style="color:#a6e22e">exp3</span>) <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">search</span>(<span style="color:#a6e22e">exp4</span>))) {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">httpHandler</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">path</span>)
    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">search</span>(<span style="color:#a6e22e">exp2</span>) <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>) {
        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newUrl</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;/blob/&#39;</span>, <span style="color:#e6db74">&#39;@&#39;</span>).<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/^(?:https?:\/\/)?github\.com/</span>, <span style="color:#e6db74">&#39;https://cdn.jsdelivr.net/gh&#39;</span>)
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Response</span>.<span style="color:#a6e22e">redirect</span>(<span style="color:#a6e22e">newUrl</span>, <span style="color:#ae81ff">302</span>)
    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">search</span>(<span style="color:#a6e22e">exp3</span>) <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>) {
        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newUrl</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/^(?:https?:\/\/)?github\.com/</span>, <span style="color:#e6db74">&#39;https://github.com.cnpmjs.org&#39;</span>)
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Response</span>.<span style="color:#a6e22e">redirect</span>(<span style="color:#a6e22e">newUrl</span>, <span style="color:#ae81ff">302</span>)
    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">search</span>(<span style="color:#a6e22e">exp4</span>) <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>) {
        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newUrl</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/(?&lt;=com\/.+?\/.+?)\/(.+?\/)/</span>, <span style="color:#e6db74">&#39;@$1&#39;</span>).<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/^(?:https?:\/\/)?raw\.githubusercontent\.com/</span>, <span style="color:#e6db74">&#39;https://cdn.jsdelivr.net/gh&#39;</span>)
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Response</span>.<span style="color:#a6e22e">redirect</span>(<span style="color:#a6e22e">newUrl</span>, <span style="color:#ae81ff">302</span>)
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">ASSET_URL</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">path</span>)
    }
}


<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {Request} req
</span><span style="color:#75715e"> * @param {string} pathname
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">httpHandler</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">pathname</span>) {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">reqHdrRaw</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">headers</span>

    <span style="color:#75715e">// preflight
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">method</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;OPTIONS&#39;</span> <span style="color:#f92672">&amp;&amp;</span>
        <span style="color:#a6e22e">reqHdrRaw</span>.<span style="color:#a6e22e">has</span>(<span style="color:#e6db74">&#39;access-control-request-headers&#39;</span>)
    ) {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Response</span>(<span style="color:#66d9ef">null</span>, <span style="color:#a6e22e">PREFLIGHT_INIT</span>)
    }

    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">rawLen</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>

    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">reqHdrNew</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Headers</span>(<span style="color:#a6e22e">reqHdrRaw</span>)

    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">urlStr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pathname</span>
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">urlStr</span>.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">&#39;github&#39;</span>)) {
        <span style="color:#a6e22e">urlStr</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">urlStr</span>
    }
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">urlObj</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">newUrl</span>(<span style="color:#a6e22e">urlStr</span>)

    <span style="color:#75715e">/** @type {RequestInit} */</span>
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">reqInit</span> <span style="color:#f92672">=</span> {
        <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">method</span>,
        <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">reqHdrNew</span>,
        <span style="color:#a6e22e">redirect</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;follow&#39;</span>,
        <span style="color:#a6e22e">body</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">proxy</span>(<span style="color:#a6e22e">urlObj</span>, <span style="color:#a6e22e">reqInit</span>, <span style="color:#a6e22e">rawLen</span>, <span style="color:#ae81ff">0</span>)
}


<span style="color:#75715e">/**
</span><span style="color:#75715e"> *
</span><span style="color:#75715e"> * @param {URL} urlObj
</span><span style="color:#75715e"> * @param {RequestInit} reqInit
</span><span style="color:#75715e"> */</span>
<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">proxy</span>(<span style="color:#a6e22e">urlObj</span>, <span style="color:#a6e22e">reqInit</span>, <span style="color:#a6e22e">rawLen</span>) {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">href</span>, <span style="color:#a6e22e">reqInit</span>)
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">resHdrOld</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">headers</span>
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">resHdrNew</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Headers</span>(<span style="color:#a6e22e">resHdrOld</span>)

    <span style="color:#75715e">// verify
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">rawLen</span>) {
        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newLen</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">resHdrOld</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;content-length&#39;</span>) <span style="color:#f92672">||</span> <span style="color:#e6db74">&#39;&#39;</span>
        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">badLen</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">rawLen</span> <span style="color:#f92672">!==</span> <span style="color:#a6e22e">newLen</span>)

        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">badLen</span>) {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">body</span>, <span style="color:#ae81ff">400</span>, {
                <span style="color:#e6db74">&#39;--error&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">`bad len: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">newLen</span><span style="color:#e6db74">}</span><span style="color:#e6db74">, except: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">rawLen</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>,
                <span style="color:#e6db74">&#39;access-control-expose-headers&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;--error&#39;</span>,
            })
        }
    }
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">status</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>
    <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;access-control-expose-headers&#39;</span>, <span style="color:#e6db74">&#39;*&#39;</span>)
    <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;access-control-allow-origin&#39;</span>, <span style="color:#e6db74">&#39;*&#39;</span>)

    <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#e6db74">&#39;content-security-policy&#39;</span>)
    <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#e6db74">&#39;content-security-policy-report-only&#39;</span>)
    <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#e6db74">&#39;clear-site-data&#39;</span>)

    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Response</span>(<span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">body</span>, {
        <span style="color:#a6e22e">status</span>,
        <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">resHdrNew</span>,
    })
}

</code></pre></div><p><code>index.js</code>默认配置下clone走<code>github.com.cnpmjs.org</code>，项目文件会走<code>jsDeliver</code>，如需走worker，修改<code>Config</code>变量即可</p>
<p><code>ASSET_URL</code>是静态资源的url（实际上就是现在显示出来的那个输入框单页面）</p>
<p><code>PREFIX</code>是前缀，默认（根路径情况为<code>&quot;/&quot;</code>），如果自定义路由为<code>example.com/gh/*</code>，请将PREFIX改为 <code>'/gh/'</code>，注意，少一个杠都会错！</p>
<p>好的，就这么没了 🐶（真的GHProxy的配置贼简单），想自定义域名的请看<a href="/p/cf-worker-proxy/">万能的CLOUDFLARE WORKERS+JSProxy代理？！</a>。</p>
]]></description><category domain="https://raycoder.me/categories/%E4%BB%A3%E7%90%86/">代理</category><category domain="https://raycoder.me/tags/workers/">Workers</category><category domain="https://raycoder.me/tags/github/">GitHub</category><category domain="https://raycoder.me/tags/%E4%BB%A3%E7%90%86/">代理</category></item><item><title>搭建史上最简单的博客——Mirror博客</title><link>https://raycoder.me/p/build-the-simplest-blog-mirror-blog/</link><guid isPermaLink="true">https://raycoder.me/p/build-the-simplest-blog-mirror-blog/</guid><pubDate>Wed, 22 Apr 2020 08:07:31 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<p>最近在GitHub上面发现了一个很有趣的项目，名叫<a href="https://github.com/LoeiFy/Mirror"><code>Mirror</code></a>，官方Demo在这里：<a href="https://mirror.am0200.com/">https://mirror.am0200.com/</a></p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200422081818.png" alt=""></p>
<p>哎哟我艹，貌似有那么一丢丢好康，但是这个release就有点过粪了吧？</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200422083906.png" alt=""></p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200422083923.jpg" alt=""></p>
<p>这个绝对是我见过最简单的博客了，使用动态路由分发视图，单页面应用。</p>
<p>I了I了~</p>
<p>搭建，也很简单，从<a href="https://github.com/LoeiFy/Mirror/raw/master/release/mirror.zip">这里</a>下载最新版Mirror，解压后在<code>index.html</code>里进行配置即可。</p>
<p>打开<code>index.html</code>，找到<code>window.config</code>开头，进行修改。</p>
<h4 id="获取token">获取Token</h4>
<p>获取Token很简单，去<a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a>获取即可，这个 token 只需要只读权限，只需要勾选以下：</p>
<ul>
<li>read: user Read all user profile data</li>
<li>user: email Access user email addresses (read-only)</li>
</ul>
<p>如果你的项目是属于一个组织的，还需要勾选一个权限：</p>
<ul>
<li>read: org Read org and team membership</li>
</ul>
<p>像这样。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200422084440.png" alt=""></p>
<p>添加 token 说明，然后点击 <code>Generate token</code>，就可以获得你的 token。要记得保存。</p>
<hr>
<h4 id="获取hash">获取Hash</h4>
<p>据作者说，Hash加密一层是为了防止GitHub看到Token删仓库。</p>
<p>下面是获取 <code>hash</code> 的步骤</p>
<ol>
<li>获取 <a href="https://github.com/LoeiFy/Mirror/wiki/Token-%E8%AE%BE%E7%BD%AE">token</a>（已经完成）</li>
<li>获取你的主域名 <code>hostname</code>，例如 <code>https://mirror.am0200.com</code> 的主域名为 <code>mirror.am0200.com</code></li>
<li>打开 <a href="https://mirror.am0200.com/">Mirror</a> 网站，并打开 <code>开发者工具</code> 界面</li>
<li>在开发者工具的 <code>console</code> tab 页面，输入 js 代码 <code>window.encrypt('你的token', '你的主域名')</code>，注意不要写协议头，<code>www</code>是敏感的。</li>
</ol>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200422084655.png" alt=""></p>
<p>得到的字符就是 <code>hash</code> 串。</p>
<p>接下来只需要修改<code>index.html</code>即可。</p>
<hr>
<h4 id="修改indexhtml">修改<code>index.html</code></h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">window.<span style="color:#a6e22e">config</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">organization</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#75715e">// 默认是 false，如果你的项目是属于 GitHub 组织 的，请设置为 true
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">order</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;UPDATED_AT&#39;</span>, <span style="color:#75715e">// 文章排序，以 创建时间 或者 更新时间，可选值 &#39;UPDATED_AT&#39;，&#39;CREATED_AT&#39;
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">title</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Ray的记事小栈&#39;</span>, <span style="color:#75715e">// 博客标题
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">user</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;FFRaycoder&#39;</span>, <span style="color:#75715e">// GitHub 用户名，必须
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">repository</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;mirrorBlog&#39;</span>, <span style="color:#75715e">// GitHub 项目名，指定文章内容来源 issues，必须
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">authors</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Ray&#39;</span>, <span style="color:#75715e">// 博客作者，以 &#39;,&#39; 分割，GitHub 用户名默认包含在内
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">ignores</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#75715e">// 文章忽略的 issues ID
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">host</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#75715e">// 博客的主域名，不填自动获取，请注意这个值会影响 hash 的值
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">hash</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#75715e">// 必须
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">perpage</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">5</span>, <span style="color:#75715e">// 分页
</span><span style="color:#75715e"></span>}
</code></pre></div><p>然后把它推送到GitHub上，即可。</p>
<p>接下来只需要在仓库的Issue里写作即可。</p>
]]></description><category domain="https://raycoder.me/categories/%E6%8A%98%E8%85%BE/">折腾</category><category domain="https://raycoder.me/tags/%E6%8A%98%E8%85%BE/">折腾</category><category domain="https://raycoder.me/tags/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://raycoder.me/tags/mirror/">Mirror</category></item><item><title>Valine新版本入坑</title><link>https://raycoder.me/p/valine-new-version/</link><guid isPermaLink="true">https://raycoder.me/p/valine-new-version/</guid><pubDate>Tue, 21 Apr 2020 16:10:23 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<p><code>Valine</code>近期进行了一批大更新，是时候把评论升级一下了。</p>
<p>目前最新版本是在..2020/04/21..更新的<a href="https://github.com/xCss/Valine/releases/tag/v1.4.5">v1.4.5</a>，在这里说一声，开源作者们，Orz，辛苦了。</p>
<ul>
<li><code>A</code> 新增QQ头像的支持 <a href="https://github.com/xCss/Valine/issues/192">#192</a>，</li>
<li><code>A</code> 新增自定义表情 <a href="https://github.com/xCss/Valine/issues/261">#261</a> <a href="https://github.com/xCss/Valine/issues/260">#260</a> <a href="https://github.com/xCss/Valine/issues/150">#150</a>，</li>
<li><code>F</code> 修复marked渲染错误的Bug <a href="https://github.com/xCss/Valine/issues/275">#275</a> <a href="https://github.com/xCss/Valine/issues/269">#269</a>，</li>
<li><code>F</code> 修复代码高亮样式被覆盖的Bug <a href="https://github.com/xCss/Valine/issues/270">#270</a>，</li>
<li><code>F</code> 修复阅读次数异常的Bug <a href="https://github.com/xCss/Valine/issues/272">#272</a>，</li>
<li><code>U</code> 一些样式优化，</li>
<li><code>U</code> 代码逻辑优化。</li>
</ul>
<p>新增的自定义表情也的确省心了不少，不用再去改代码了。</p>
<p>目前<a href="https://valine.js.org">官方文档</a>还没有更新，我先放一个新版指南。</p>
<h3 id="配置项">配置项</h3>
<h4 id="旧的配置项请去这里httpsvalinejsorgconfigurationhtml查看">...（旧的配置项请去<a href="https://valine.js.org/configuration.html">这里</a>）查看</h4>
<h4 id="emojicdn"><code>emojiCDN</code></h4>
<p><code>emoji</code>的自定义地址，..类型String..，格式类似<code>&quot;//cdn.jsdelivr.net/gh/FFRaycoder/cdn/imgs/emoji/&quot;</code></p>
<h4 id="emojimaps"><code>emojiMaps</code></h4>
<p><code>emoji</code>的自定义<code>map</code>，..类型Object..，格式如<code>{&quot;吐&quot;:&quot;吐.png&quot;,&quot;喷血&quot;:&quot;喷血.png&quot;,&quot;狂汗&quot;:&quot;狂汗.png&quot;,&quot;不说话&quot;:&quot;不说话.png&quot;,&quot;汗&quot;:&quot;汗.png&quot;,&quot;坐等&quot;:&quot;坐等.png&quot;,&quot;献花&quot;:&quot;献花.png&quot;,&quot;不高兴&quot;:&quot;不高兴.png&quot;,&quot;中刀&quot;:&quot;中刀.png&quot;,&quot;皱眉&quot;:&quot;皱眉.png&quot;}</code></p>
<h3 id="功能">功能</h3>
<h4 id="新增qq头像的支持">新增QQ头像的支持</h4>
<h3 id="修复bugs">修复Bugs</h3>
<h4 id="修复marked渲染错误的bug">修复marked渲染错误的Bug</h4>
<h4 id="修复代码高亮样式被覆盖的bug">修复代码高亮样式被覆盖的Bug</h4>
<h4 id="修复阅读次数异常的bug">修复阅读次数异常的Bug</h4>
<hr>
<p>好的就是这样没了😏（鄙人尚未发现其他更新）</p>
<hr>
<p>当然不可能，提醒一下：目前<code>jsdelivr cdn</code>需要写链接<code>https://cdn.jsdelivr.net/npm/valine@1.4.5/dist/Valine.min.js</code>，<code>https://cdn.jsdelivr.net/npm/valine@latest/dist/Valine.min.js</code>还是1.4.4的版本。</p>
<hr>
<p><strong>2020/04/22更新：</strong></p>
<p>目前官网已经更新文档，<code>https://cdn.jsdelivr.net/npm/valine@1.4.5/dist/Valine.min.js</code>也已经更新到<code>v1.4.5</code></p>
<p>又更新了，v1.4.6。</p>
<ul>
<li><code>A</code> 新增<code>必填项</code>设置 <a href="https://github.com/xCss/Valine/pull/281">#281</a> <a href="https://github.com/xCss/Valine/issues/59">#59</a></li>
<li><code>A</code> 新增<code>评论框</code>获取<code>QQ头像</code>和<code>QQ昵称</code>启用属性<code>enableQQ</code>，需主动启用 <a href="https://github.com/xCss/Valine/issues/277">#277</a></li>
<li><code>F</code> 修复样式被覆盖的Bug <a href="https://github.com/xCss/Valine/issues/284">#284</a> <a href="https://github.com/xCss/Valine/issues/270">#270</a></li>
<li><code>F</code> 修复使用了低版本的<code>av-min.js</code>造成的初始化错误</li>
<li><code>U</code> 一些样式优化</li>
<li><code>U</code> 代码逻辑优化</li>
</ul>
<p><code>https://cdn.jsdelivr.net/npm/valine@1.4.6/dist/Valine.min.js</code>。</p>
<p>woc又更新！！v1.4.7！</p>
<ul>
<li><code>F</code> 修复<code>v1.4.6</code>中自定义表情时未填<code>emojiCDN</code>引起的报错</li>
</ul>
<p><code>https://cdn.jsdelivr.net/npm/valine@1.4.7/dist/Valine.min.js</code></p>
<hr>
<p><strong>2020/4/26更新：</strong></p>
<p>不得不说作者是真的肝，目前更新到了<a href="https://github.com/xCss/Valine/releases/tag/v1.4.11"><code>v1.4.11</code></a>，更新了表情判断机制。</p>]]></description><category domain="https://raycoder.me/categories/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://raycoder.me/categories/%E8%AF%84%E8%AE%BA/">评论</category><category domain="https://raycoder.me/categories/valine/">Valine</category><category domain="https://raycoder.me/tags/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://raycoder.me/tags/%E8%AF%84%E8%AE%BA/">评论</category><category domain="https://raycoder.me/tags/valine/">Valine</category></item><item><title>营销号生成器源代码</title><link>https://raycoder.me/p/yingxiaohao-source-code/</link><guid isPermaLink="true">https://raycoder.me/p/yingxiaohao-source-code/</guid><pubDate>Fri, 17 Apr 2020 13:14:54 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<iframe src="/tools/yingxiaohao/index.html" width="100%" height="750px scrolling="0" frameborder="0""></iframe>
<p><code>index.html</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
&lt;<span style="color:#f92672">html</span>&gt;
    &lt;<span style="color:#f92672">head</span>&gt;
		&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdn.bootcss.com/Buttons/2.0.0/css/buttons.css&#34;</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span>&gt;
        &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;//cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css&#34;</span> <span style="color:#a6e22e">integrity</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh&#34;</span> <span style="color:#a6e22e">crossorigin</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;anonymous&#34;</span>&gt;
        &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;main.css&#34;</span>&gt;
        &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;viewport&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;width=device-width, initial-scale=1, shrink-to-fit=no&#34;</span>&gt;
		&lt;<span style="color:#f92672">title</span>&gt;营销号文案生成器 | MADE BY RAY&lt;/<span style="color:#f92672">title</span>&gt;
    &lt;/<span style="color:#f92672">head</span>&gt;
    &lt;<span style="color:#f92672">body</span>&gt;
        &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;container&#34;</span>&gt;
            &lt;<span style="color:#f92672">h1</span>&gt;营销号生成器&lt;/<span style="color:#f92672">h1</span>&gt;
            &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;radio&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
            &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;show&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
            &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;buttons&#34;</span>&gt;
                &lt;<span style="color:#f92672">button</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;generate&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;button button-glow button-border button-rounded button-primary&#34;</span>&gt;生成&lt;/<span style="color:#f92672">button</span>&gt;
                &lt;<span style="color:#f92672">button</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;audio&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;button button-glow button-border button-rounded btn-outline-primary &#34;</span>&gt;朗读&lt;/<span style="color:#f92672">button</span>&gt;
            &lt;/<span style="color:#f92672">div</span>&gt;
            &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;result-title&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;form-control&#34;</span> <span style="color:#a6e22e">placeholder</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;标题&#34;</span> <span style="color:#a6e22e">disabled</span>&gt;
            &lt;<span style="color:#f92672">textarea</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;form-control&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;result&#34;</span> <span style="color:#a6e22e">placeholder</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;内容&#34;</span> <span style="color:#a6e22e">disabled</span>&gt;&lt;/<span style="color:#f92672">textarea</span>&gt;
        &lt;/<span style="color:#f92672">div</span>&gt;
        &lt;<span style="color:#f92672">hr</span>&gt;
        &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;//cdn.jsdelivr.net/gh/FFRaycoder/cdn/static/js/jquery-3.5.0.min.js&#34;</span> <span style="color:#a6e22e">crossorigin</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
        &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;main.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
        &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;//cdn.jsdelivr.net/npm/jquery@3.4.1/dist/jquery.slim.min.js&#34;</span> <span style="color:#a6e22e">integrity</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n&#34;</span> <span style="color:#a6e22e">crossorigin</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;anonymous&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
        &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;//cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js&#34;</span> <span style="color:#a6e22e">integrity</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo&#34;</span> <span style="color:#a6e22e">crossorigin</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;anonymous&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
        &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;//cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js&#34;</span> <span style="color:#a6e22e">integrity</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6&#34;</span> <span style="color:#a6e22e">crossorigin</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;anonymous&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
    &lt;/<span style="color:#f92672">body</span>&gt;
    &lt;<span style="color:#f92672">footer</span>&gt;
        Made By &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://raycoder.me&#34;</span> <span style="color:#a6e22e">target</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;_blank&#34;</span>&gt;Ray&lt;/<span style="color:#f92672">a</span>&gt;
    &lt;/<span style="color:#f92672">footer</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p><code>main.css</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">#container {
    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">480</span><span style="color:#66d9ef">px</span>;
    <span style="color:#66d9ef">margin</span>: <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">auto</span>;
}
<span style="color:#f92672">h1</span> {
    <span style="color:#66d9ef">text-align</span>: <span style="color:#66d9ef">center</span>;
    <span style="color:#66d9ef">margin-top</span>: <span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span>;
}
<span style="color:#f92672">label</span> {
    <span style="color:#66d9ef">font-size</span>: <span style="color:#ae81ff">125</span><span style="color:#66d9ef">%</span>;
    <span style="color:#66d9ef">font-weight</span>: <span style="color:#66d9ef">bold</span>;
    <span style="color:#66d9ef">margin</span>: <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span>;
}
<span style="color:#f92672">input</span><span style="color:#f92672">,</span> <span style="color:#f92672">button</span><span style="color:#f92672">,</span> <span style="color:#f92672">textarea</span> {
    <span style="color:#66d9ef">margin</span>: <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span><span style="color:#75715e">!important</span>;
}
<span style="color:#f92672">textarea</span> {
    <span style="color:#66d9ef">min-height</span>: <span style="color:#ae81ff">250</span><span style="color:#66d9ef">px</span><span style="color:#75715e">!important</span>;
}
<span style="color:#f92672">footer</span> {
    <span style="color:#66d9ef">text-align</span>: <span style="color:#66d9ef">center</span>;
    <span style="color:#66d9ef">font-size</span>: <span style="color:#ae81ff">130</span><span style="color:#66d9ef">%</span>;
    <span style="color:#66d9ef">margin-bottom</span>: <span style="color:#ae81ff">1.5</span><span style="color:#66d9ef">em</span>;
}
<span style="color:#f92672">label</span>.<span style="color:#a6e22e">custom-control-label</span> {
    <span style="color:#66d9ef">font-size</span>: <span style="color:#66d9ef">medium</span>;
    <span style="color:#66d9ef">font-weight</span>: <span style="color:#66d9ef">normal</span>;
}
#audio {
    <span style="color:#66d9ef">float</span>: <span style="color:#66d9ef">right</span>;
}
</code></pre></div><p><code>main.js</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">msg</span>, <span style="color:#a6e22e">_index</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">config</span> <span style="color:#f92672">=</span> [
    {
        <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;基础文案&#34;</span>,
        <span style="color:#a6e22e">html</span><span style="color:#f92672">:</span> <span style="color:#e6db74">`&lt;label for=&#34;subject&#34;&gt;主体&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;subject&#34; class=&#34;form-control&#34; placeholder=&#34;楼主&#34; required&gt;&lt;label for=&#34;event&#34;&gt;事件&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;event&#34; class=&#34;form-control&#34; placeholder=&#34;氵帖&#34; required&gt;&lt;label for=&#34;subject-event&#34;&gt;另一种说法&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;subject-event&#34; class=&#34;form-control&#34; placeholder=&#34;获取经验&#34; required&gt;`</span>,
        <span style="color:#a6e22e">generate</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> () {
            <span style="color:#a6e22e">subject</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#subject&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#a6e22e">_event</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#event&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#a6e22e">subjectEvent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#subject-event&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">subject</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">_event</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">subjectEvent</span>.<span style="color:#a6e22e">length</span>) <span style="color:#66d9ef">return</span>;
            <span style="color:#a6e22e">resultTitle</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">是怎么回事呢？`</span>
            <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`　　</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">是怎么回事呢？</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}</span><span style="color:#e6db74">相信大家都很熟悉，但是</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">是怎么回事呢，下面就让小编带大家一起了解吧。</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">r</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n　　</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">，其实就是</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subjectEvent</span><span style="color:#e6db74">}</span><span style="color:#e6db74">，大家可能会很惊讶</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}</span><span style="color:#e6db74">怎么会</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">呢？但事实就是这样，小编也感到非常惊讶。</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">r</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n　　这就是关于</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！`</span>;
            <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#result-title&#34;</span>).<span style="color:#a6e22e">val</span>(<span style="color:#a6e22e">resultTitle</span>);
            <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#result&#34;</span>).<span style="color:#a6e22e">val</span>(<span style="color:#a6e22e">result</span>);
        }
    },
    {
        <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;升级文案&#34;</span>,
        <span style="color:#a6e22e">html</span><span style="color:#f92672">:</span> <span style="color:#e6db74">`&lt;label for=&#34;modal&#34;&gt;语气词&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;modal&#34; class=&#34;form-control&#34; placeholder=&#34;震惊&#34; required&gt;&lt;label for=&#34;subject&#34;&gt;主体物&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;subject&#34; class=&#34;form-control&#34; placeholder=&#34;香蕉&#34; required&gt;&lt;label for=&#34;attribute&#34;&gt;定语&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;attribute&#34; class=&#34;form-control&#34; placeholder=&#34;尽量避免&#34; required&gt;&lt;label for=&#34;secSubject&#34;&gt;与什么...（第二主体）&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;secSubject&#34; class=&#34;form-control&#34; placeholder=&#34;木瓜&#34; required&gt;&lt;label for=&#34;event&#34;&gt;事件&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;event&#34; class=&#34;form-control&#34; placeholder=&#34;频繁混合使用&#34; required&gt;`</span>,
        <span style="color:#a6e22e">generate</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> () {
            <span style="color:#a6e22e">modal</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#modal&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#a6e22e">subject</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#subject&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#a6e22e">attribute</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#attribute&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#a6e22e">secSubject</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#secSubject&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#a6e22e">_event</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#event&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">modal</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">subject</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">attribute</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">secSubject</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">_event</span>.<span style="color:#a6e22e">length</span>) <span style="color:#66d9ef">return</span>;
            <span style="color:#a6e22e">resultTitle</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">modal</span><span style="color:#e6db74">}</span><span style="color:#e6db74">！</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">attribute</span><span style="color:#e6db74">}</span><span style="color:#e6db74">和</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">secSubject</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">！原因竟然是...`</span>
            <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`    </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}</span><span style="color:#e6db74">为什么不能与</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">secSubject</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">，这究竟是怎么回事呢？</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}</span><span style="color:#e6db74">相信大家很熟悉吧，但是不能与</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">secSubject</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">是怎么回事呢？下面就让小编带着大家一起去了解吧。</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n    </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}</span><span style="color:#e6db74">不能与</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">secSubject</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">，其实就是</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}</span><span style="color:#e6db74">不能与</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">secSubject</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">。大家可能会感到很惊讶，</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}</span><span style="color:#e6db74">为什么</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">attribute</span><span style="color:#e6db74">}</span><span style="color:#e6db74">与</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">secSubject</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">。</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n    这些就是</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}</span><span style="color:#e6db74">为什么</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">attribute</span><span style="color:#e6db74">}</span><span style="color:#e6db74">与</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">secSubject</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">的全部内容了。大家有什么想法呢，欢迎在评论区里与小编留言互动哦~我们下期再见！`</span>;
            <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#result-title&#34;</span>).<span style="color:#a6e22e">val</span>(<span style="color:#a6e22e">resultTitle</span>);
            <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#result&#34;</span>).<span style="color:#a6e22e">val</span>(<span style="color:#a6e22e">result</span>);
        }
    },
    {
        <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;刘狺达文案&#34;</span>,
        <span style="color:#a6e22e">html</span><span style="color:#f92672">:</span> <span style="color:#e6db74">`&lt;label for=&#34;subject&#34;&gt;主体&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;subject&#34; class=&#34;form-control&#34; placeholder=&#34;刘信达&#34; required&gt;&lt;label for=&#34;event&#34;&gt;必须限期做什么&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;event&#34; class=&#34;form-control&#34; placeholder=&#34;离开人世&#34; required&gt;&lt;label for=&#34;subjectType&#34;&gt;主体类型&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;subjectType&#34; class=&#34;form-control&#34; placeholder=&#34;Dog&#34; required&gt;&lt;label for=&#34;whatDoesHeDo&#34;&gt;做了什么事&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;whatDoesHeDo&#34; class=&#34;form-control&#34; placeholder=&#34;带坏青少年&#34; required&gt;&lt;label for=&#34;cons1&#34;&gt;后果1&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;cons1&#34; class=&#34;form-control&#34; placeholder=&#34;污染大气层&#34; required&gt;&lt;label for=&#34;cons2&#34;&gt;后果2&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;cons2&#34; class=&#34;form-control&#34; placeholder=&#34;浪费水资源&#34; required&gt;&lt;label for=&#34;do&#34;&gt;做什么改正（不可能的）&lt;/label&gt;&lt;input type=&#34;text&#34; id=&#34;do&#34; class=&#34;form-control&#34; placeholder=&#34;离开地球&#34; required&gt;`</span>,
        <span style="color:#a6e22e">generate</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> () {
            <span style="color:#a6e22e">subject</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#subject&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#a6e22e">_event</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#event&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#a6e22e">subjectType</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#subjectType&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#a6e22e">whatDoesHeDo</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#whatDoesHeDo&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#a6e22e">cons1</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#cons1&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#a6e22e">cons2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#cons2&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#a6e22e">_do</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#do&#34;</span>).<span style="color:#a6e22e">val</span>();
            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">subject</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">_event</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">whatDoesHeDo</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">subjectType</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">cons1</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">cons2</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">_do</span>.<span style="color:#a6e22e">length</span>) <span style="color:#66d9ef">return</span>;
            <span style="color:#a6e22e">resultTitle</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`【</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}</span><span style="color:#e6db74">必须限期</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">_event</span><span style="color:#e6db74">}</span><span style="color:#e6db74">! 】`</span>
            <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subject</span><span style="color:#e6db74">}</span><span style="color:#e6db74">，</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subjectType</span><span style="color:#e6db74">}${</span><span style="color:#a6e22e">whatDoesHeDo</span><span style="color:#e6db74">}</span><span style="color:#e6db74">成何体统，你不怕</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">cons1</span><span style="color:#e6db74">}</span><span style="color:#e6db74">吗，你不怕</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">cons2</span><span style="color:#e6db74">}</span><span style="color:#e6db74">吗，你不怕带坏青少年吗，刘信达限你三个月，必须</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">_do</span><span style="color:#e6db74">}</span><span style="color:#e6db74">，否则逐出</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">subjectType</span><span style="color:#e6db74">}</span><span style="color:#e6db74">圈!`</span>;
            <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#result-title&#34;</span>).<span style="color:#a6e22e">val</span>(<span style="color:#a6e22e">resultTitle</span>);
            <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#result&#34;</span>).<span style="color:#a6e22e">val</span>(<span style="color:#a6e22e">result</span>);
        }
    }
];

<span style="color:#a6e22e">msg</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#a6e22e">msg</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">`&lt;div class=&#34;custom-control custom-radio custom-control-inline&#34;&gt;
</span><span style="color:#e6db74">    &lt;input type=&#34;radio&#34; id=&#34;type-`</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">`&#34; name=&#34;choose&#34; class=&#34;custom-control-input&#34; value=&#34;`</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">`&#34;&gt;
</span><span style="color:#e6db74">    &lt;label class=&#34;custom-control-label&#34; for=&#34;type-`</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">`&#34;&gt;`</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">config</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">name</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">`&lt;/label&gt;
</span><span style="color:#e6db74">&lt;/div&gt;`</span>; 
}

<span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#radio&#34;</span>).<span style="color:#a6e22e">html</span>(<span style="color:#a6e22e">msg</span>);

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">reset</span> () {
    <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#result&#34;</span>).<span style="color:#a6e22e">val</span>(<span style="color:#e6db74">&#34;&#34;</span>);
    <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#result-title&#34;</span>).<span style="color:#a6e22e">val</span>(<span style="color:#e6db74">&#34;&#34;</span>);
}

<span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;input[name=&#39;choose&#39;]&#34;</span>).<span style="color:#a6e22e">change</span>(<span style="color:#66d9ef">function</span> () {
    <span style="color:#a6e22e">reset</span>();
    <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;button&#39;</span>).<span style="color:#a6e22e">removeAttr</span>(<span style="color:#e6db74">&#34;disabled&#34;</span>);
    <span style="color:#a6e22e">_index</span> <span style="color:#f92672">=</span> Number(<span style="color:#a6e22e">$</span>(<span style="color:#66d9ef">this</span>).<span style="color:#a6e22e">val</span>());
    <span style="color:#a6e22e">msg</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
    <span style="color:#a6e22e">msg</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">config</span>[<span style="color:#a6e22e">_index</span>].<span style="color:#a6e22e">html</span>;
    <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#show&#34;</span>).<span style="color:#a6e22e">html</span>(<span style="color:#a6e22e">msg</span>);
});

<span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;#generate&#39;</span>).<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#39;click&#39;</span>, <span style="color:#66d9ef">function</span> () {
    <span style="color:#a6e22e">config</span>[<span style="color:#a6e22e">_index</span>].<span style="color:#a6e22e">generate</span>();
});

<span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;#audio&#39;</span>).<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#39;click&#39;</span>, <span style="color:#66d9ef">function</span> () {
    <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;#audio&#39;</span>).<span style="color:#a6e22e">attr</span>(<span style="color:#e6db74">&#39;disabled&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">url</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;//tts.baidu.com/text2audio?cuid=baiduid&amp;lan=zh&amp;ctp=1&amp;pdt=311&amp;tex=&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#result&#34;</span>).<span style="color:#a6e22e">val</span>();
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">player</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Audio</span>(<span style="color:#a6e22e">url</span>);
    <span style="color:#a6e22e">player</span>.<span style="color:#a6e22e">play</span>();
    <span style="color:#a6e22e">$</span>(<span style="color:#a6e22e">player</span>).<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#39;ended&#39;</span>, <span style="color:#66d9ef">function</span> () {
        <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;#audio&#39;</span>).<span style="color:#a6e22e">removeAttr</span>(<span style="color:#e6db74">&#39;disabled&#39;</span>);
    });
});

</code></pre></div><p>代码开源于<a href="https://github.com/FFRaycoder/yingxiaohao">GitHub</a></p>
<hr>
<p><strong>2020/4/20更新：</strong></p>
<p>增加了一个新模板。</p>
<p><strong>2020/4/21更新：</strong></p>
<p>增加了刘狺达模板。</p>]]></description><category domain="https://raycoder.me/categories/js/">JS</category><category domain="https://raycoder.me/tags/js/">JS</category><category domain="https://raycoder.me/tags/%E8%90%A5%E9%94%80%E5%8F%B7/">营销号</category></item><item><title>Python学习笔记之内存分配与id函数、is关键字</title><link>https://raycoder.me/p/python-memory-footprint-and-id-is/</link><guid isPermaLink="true">https://raycoder.me/p/python-memory-footprint-and-id-is/</guid><pubDate>Fri, 17 Apr 2020 08:04:33 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<h3 id="内存分配">内存分配</h3>
<p>在Python学习中，我们经常会写这样的代码。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> foo <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> bar <span style="color:#f92672">=</span> foo
</code></pre></div><p>这里，我们把<code>foo</code>的值赋给了<code>bar</code>——但是，这真的是一种赋值而不是..别名..吗？</p>
<p>我们看看我们修改<code>foo</code>的值后，<code>bar</code>的值是否会变动。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> foo<span style="color:#f92672">.</span>append(<span style="color:#ae81ff">4</span>) <span style="color:#75715e">#[1, 2, 3, 4]</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> bar
[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>]
</code></pre></div><p>哎呀！<code>bar</code>的值也修改了！</p>
<p>那么，如果我们真的只是想把<code>bar</code>创建为<code>foo</code>的一个副本呢？</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> foo <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> bar <span style="color:#f92672">=</span> foo[:]
<span style="color:#f92672">&gt;&gt;&gt;</span> foo<span style="color:#f92672">.</span>append(<span style="color:#ae81ff">4</span>) <span style="color:#75715e">#[1, 2, 3, 4]</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> bar
[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
</code></pre></div><p>我们这里使用分片（<code>[:]</code>）从<code>foo</code>创建了一个副本.</p>
<p>这个现象就牵扯到了Python中的..内存分配..。</p>
<p>在了解内存分配前，我们先要理解Python中变量工作的机制。</p>
<hr>
<h3 id="id函数"><code>id()</code>函数</h3>
<p>很多小白很小白的认为，Python是以变量名来分辨变量的。</p>
<p>怎么可能呢<heimu>Python那么牛逼</heimu></p>
<p>每一个编程语言都是用变量所在的内存分辨每个变量的。</p>
<p>我们回到开头：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> foo <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> bar <span style="color:#f92672">=</span> foo
<span style="color:#f92672">&gt;&gt;&gt;</span> id(foo)
<span style="color:#ae81ff">2415003666112</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> id(bar)
<span style="color:#ae81ff">2415003666112</span>
</code></pre></div><p>他们的ID是相同的，就说明他们使用了相同的内存地址，是同一个变量。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> foo <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> bar <span style="color:#f92672">=</span> foo
<span style="color:#f92672">&gt;&gt;&gt;</span> foo <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> id(foo)
<span style="color:#ae81ff">2415003666112</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> id(bar)
<span style="color:#ae81ff">2415003507456</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> foo
[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> bar
[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> object()
<span style="color:#f92672">&gt;&gt;&gt;</span> a
<span style="color:#f92672">&lt;</span>object object at <span style="color:#ae81ff">0x0000022F37707AE0</span><span style="color:#f92672">&gt;</span> <span style="color:#75715e">#十六进制转换</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> id(a)
<span style="color:#ae81ff">2401816836832</span>
</code></pre></div><p>这里我们会看到，给变量重新赋值后，ID不一样了。</p>
<p>所以，我们可以认为，变量其实是被赋予了一个内存地址。</p>
<hr>
<h3 id="is关键字"><code>is</code>关键字</h3>
<p>小白可能认为，两个变量的值相同，它们就是同一个变量。</p>
<p>怎么可能呢<heimu>Python那么帅气</heimu></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> foo <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> bar <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> id(foo)
<span style="color:#ae81ff">2415003665024</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> id(bar)
<span style="color:#ae81ff">2415003665600</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> foo <span style="color:#f92672">==</span> bar
True
<span style="color:#f92672">&gt;&gt;&gt;</span> foo <span style="color:#f92672">is</span> bar
False
</code></pre></div><p><code>==</code>操作符用于检测值的相等，<code>is</code>关键字用于检测<code>id</code>的相等。</p>
<hr>
<h3 id="内存重用1">内存重用<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></h3>
<p>为了提高内存利用效率对于一些简单的对象，如一些数值较小的int对象，字符串对象等，python采取重用对象内存的办法.</p>
<h4 id="小内存变量">小内存变量</h4>
<p>如指向a=2，b=2时，由于2作为简单的int类型且数值小，Python不会两次为其分配内存，而是只分配一次，然后将a与b同时指向已分配的对象。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> b <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(id(a), id(b), id(<span style="color:#ae81ff">2</span>))
<span style="color:#ae81ff">140705517236528</span> <span style="color:#ae81ff">140705517236528</span> <span style="color:#ae81ff">140705517236528</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;a == b:&#39;</span>, a <span style="color:#f92672">==</span> b)
a <span style="color:#f92672">==</span> b: True
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;a is b:&#39;</span>, a <span style="color:#f92672">is</span> b)
a <span style="color:#f92672">is</span> b: True
</code></pre></div><h4 id="大内存变量">大内存变量</h4>
<p>如对于数值较大的int对象，Python会为ho和mo分别申请一块内存，来存储114514。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> ho <span style="color:#f92672">=</span> <span style="color:#ae81ff">114514</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> mo <span style="color:#f92672">=</span> <span style="color:#ae81ff">114514</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(id(ho), id(mo), id(<span style="color:#ae81ff">114514</span>))
<span style="color:#ae81ff">2401819762384</span> <span style="color:#ae81ff">2401819762352</span> <span style="color:#ae81ff">2401820368464</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;ho == mo:&#39;</span>, ho <span style="color:#f92672">==</span> mo)
ho <span style="color:#f92672">==</span> mo: True
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;ho is mo:&#39;</span>, ho <span style="color:#f92672">is</span> mo)
ho <span style="color:#f92672">is</span> mo: False
</code></pre></div><hr>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://blog.csdn.net/zhuzuwei/article/details/80554776">Python编程学习5：python id()函数和内存分配理解</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>]]></description><category domain="https://raycoder.me/categories/python/">Python</category><category domain="https://raycoder.me/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Python学习笔记</category><category domain="https://raycoder.me/categories/python%E5%86%85%E5%BB%BA%E5%87%BD%E6%95%B0/">Python内建函数</category><category domain="https://raycoder.me/tags/python/">Python</category><category domain="https://raycoder.me/tags/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Python学习笔记</category><category domain="https://raycoder.me/tags/python%E5%86%85%E5%BB%BA%E5%87%BD%E6%95%B0/">Python内建函数</category><category domain="https://raycoder.me/tags/python%E5%85%B3%E9%94%AE%E5%AD%97/">Python关键字</category></item><item><title>记一次文章被爬</title><link>https://raycoder.me/p/article-crawled-by-spiders/</link><guid isPermaLink="true">https://raycoder.me/p/article-crawled-by-spiders/</guid><pubDate>Wed, 15 Apr 2020 18:15:24 +0800</pubDate><description><![CDATA[<p>这真的是气死我了。我一个小站都可以被爬。不说了，上图吧。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200415181823.png" alt="画圈的是恶意爬虫" title="画圈的是恶意爬虫"></p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200415181943.png" alt="画圈的是恶意爬虫" title="画圈的是恶意爬虫"></p>
<p>我的文章允许您转载，但你这个没有标明作者是什么意思？</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200415182224.png" alt="" title="还手动提交，厉害了"></p>
<p>不是你这个连<code>shortcode</code>都没有改也太那啥了吧？？（那时候我还不会markdown写加点）</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200415184009.png" alt=""></p>
<p>实在不想说话了。</p>
<p>爬虫在百度上收录都有好几页。</p>
<p>我只想说：转载请写明出处！</p>
<hr>
<p>2020/4/16更新：</p>
<p>目前<code>mamicode.com</code>已经删除文章，<code>e-learn.cn</code>已经标明出处。</p>
]]></description><category domain="https://raycoder.me/categories/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://raycoder.me/tags/%E5%8D%9A%E5%AE%A2/">博客</category></item><item><title>网站SEO优化：1</title><link>https://raycoder.me/p/seo-1/</link><guid isPermaLink="true">https://raycoder.me/p/seo-1/</guid><pubDate>Tue, 14 Apr 2020 11:26:48 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<h3 id="what-is-seo">What is SEO？</h3>
<p>SEO（Search Engine Optimization），即搜索引擎优化。</p>
<p>一句<del>废</del>话，就是为了让搜索引擎更了解你的网站，从而达到更多收录的效果。</p>
<h3 id="域名注册时长">域名注册时长</h3>
<p>域名注册时长是搜索引擎很重要的指标之一。本站（<a href="https://raycoder.me">https://raycoder.me</a>）注册了将近3个月，目前百度收录17条。以<a href="https://imaegoo.com">iMaegoo's Blog</a>为例，域名注册了两年的时长，收录量有61条。存活时间不长的域名在百度索引里不会占有太大的比重。</p>
<h3 id="善用站长平台">善用站长平台</h3>
<p>百度、搜狗、Google等搜索引擎都有自己的站长平台。</p>
<ul>
<li>百度：<a href="https://ziyuan.baidu.com">https://ziyuan.baidu.com</a></li>
<li>搜狗：<a href="https://zhanzhang.sogou.com">https://zhanzhang.sogou.com</a></li>
<li>谷歌：<a href="https://search.google.com/search-console/welcome?hl=zh-CN">https://search.google.com/search-console/welcome?hl=zh-CN</a></li>
</ul>
<p>先验证网站主域后（建议www），提交Sitemap，插入自动提交代码，一样的套路。</p>
<h3 id="html结构">HTML结构</h3>
<p>对于一个新站，搜索引擎不会使用过多资源来抓取。假如搜索引擎抓到了你的网页<heimu>有生之年</heimu>，也并不会去分析里面的内容。在<code>&lt;head&gt;</code>标签中添加一些<code>&lt;meta&gt;</code>标签有助于搜索引擎了解你的网站。</p>
<p>一些常用<code>&lt;meta&gt;</code>标签：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;keywords&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Ray, Git&#34;</span>&gt;<span style="color:#75715e">&lt;!--关键字，英文逗号分割--&gt;</span>
&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;description&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Git教程……&#34;</span>&gt;<span style="color:#75715e">&lt;!--描述--&gt;</span>
&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;author&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Ray, ray@raycoder.me&#34;</span>&gt;<span style="color:#75715e">&lt;!--作者--&gt;</span>
&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;generator&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Hugo 0.68.3&#34;</span>&gt;<span style="color:#75715e">&lt;!--网页生成器--&gt;</span>
&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;copyright&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Ray&#34;</span>&gt;<span style="color:#75715e">&lt;!--Copyright--&gt;</span>
&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;robots&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;index,follow&#34;</span>&gt;<span style="color:#75715e">&lt;!--Robots--&gt;</span>
</code></pre></div><h3 id="多加网站的友链">多加网站的友链</h3>
<p>只要对方没有设置友链<code>&lt;a&gt;</code>标签<code>nofollow</code>，那么搜索引擎就会从友链页面爬到你的网站去。多加一点收录多的网站友链总是没错的~</p>
<h3 id="主题明确">主题明确</h3>
<p>明确的网站类型有助于搜索引擎把你的网站分类，从而达到<code>SEO</code>的效果。</p>
<hr>
<p>OJBK，从网上抄了点东西，又氵了一篇文章🐢</p>
]]></description><category domain="https://raycoder.me/categories/seo/">SEO</category><category domain="https://raycoder.me/tags/seo/">SEO</category><category domain="https://raycoder.me/tags/%E5%8D%9A%E5%AE%A2/">博客</category></item><item><title>About Valine评论</title><link>https://raycoder.me/p/about-valine/</link><guid isPermaLink="true">https://raycoder.me/p/about-valine/</guid><pubDate>Sun, 12 Apr 2020 14:56:23 +0800</pubDate><description>&lt;p>噗，抱歉，目前我更换了原版Valine，评论都不见了QwQ，我会尽力把它们迁移过来的！！&lt;/p></description><category domain="https://raycoder.me/categories/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://raycoder.me/tags/%E5%8D%9A%E5%AE%A2/">博客</category></item><item><title>Travis CI自动部署Hugo博客</title><link>https://raycoder.me/p/travis-ci-automatically-deploys-hugo-blog/</link><guid isPermaLink="true">https://raycoder.me/p/travis-ci-automatically-deploys-hugo-blog/</guid><pubDate>Thu, 09 Apr 2020 13:16:30 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<p>近日发现GitHub Pages国内访问速度变快，准备换回去。奈何我又想保留GitHub上的源码，Hugo又没有<code>hexo d</code>这样的一键部署操作，只能使用Travis CI（<code>Continuous Integration</code>，持续集成）来实现。</p>
<hr>
<h3 id="什么是ci">什么是CI？</h3>
<p>CI，<code>Continuous Integration</code>，持续集成。CI就像是一个监视器，在你赋予它权限后，它就会一直盯着你仓库的动态。当你的仓库触发指定操作时，它就把相应的指令执行完。</p>
<hr>
<h3 id="部署hugo">部署Hugo</h3>
<p>（请先在你的仓库创建一个新分支，如<code>hugo</code>，再设置其为主分支）</p>
<p>我们得先获取一个<a href="https://github.com/settings/tokens"><code>Personal access token</code></a>，用于给Travis CI访问仓库的权限。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200409132636.png" alt=""></p>
<p>点击之后，只需要勾选<code>repo:status</code>、<code> repo_deployment</code>和<code>public_repo</code>三项即可，这样即使令牌被盗，也可以最大的减少损失。Note处是可选的，不需要填写，只是起分辨作用。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200409133232.png" alt=""></p>
<p>生成完之后一定要保存令牌，这个令牌只会出现一次。</p>
<p>随后让我们打开<a href="https://travis-ci.com">Travis CI官网</a>，使用GitHub登录。</p>
<p>选择你的博客仓库。</p>
<p>点击<code>Settings</code>，在<code>Environment Variables</code>中添加刚刚的令牌，<code>NAME</code>为<code>ACCESS_TOKEN</code>，<code>VALUE</code>为你的令牌。<code>Branch</code>选<code>All branches</code>。</p>
<hr>
<h3 id="travis钩子">Travis钩子</h3>
<p>Travis 有不同的阶段,他提供了7个钩子。</p>
<ul>
<li>before_install：install 阶段之前执行</li>
<li>before_script：script 阶段之前执行</li>
<li>after_failure：script 阶段失败时执行</li>
<li>after_success：script 阶段成功时执行</li>
<li>before_deploy：deploy 步骤之前执行</li>
<li>after_deploy：deploy 步骤之后执行</li>
<li>after_script：script 阶段之后执行</li>
</ul>
<h3 id="生命周期">生命周期</h3>
<ol>
<li>before_install</li>
<li>install</li>
<li>before_script</li>
<li>script</li>
<li>aftersuccess or afterfailure</li>
<li>[OPTIONAL] before_deploy</li>
<li>[OPTIONAL] deploy</li>
<li>[OPTIONAL] after_deploy</li>
<li>after_script</li>
</ol>
<p>在博客根目录下新建<code>.travis.yml</code>，内容如下。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">language</span>: node_js <span style="color:#75715e">#语言是NodeJS</span>
<span style="color:#66d9ef">node_js</span>: <span style="color:#ae81ff">13.12.0</span> <span style="color:#75715e">#Node版本，我是用了一些npm模块</span>
<span style="color:#66d9ef">install</span>:
    - wget https://github.com/gohugoio/hugo/releases/download/v0<span style="color:#ae81ff">.68.3</span>/hugo_extended_0<span style="color:#ae81ff">.68</span>.3_Linux-64bit.deb <span style="color:#75715e">#wgetHugo的安装包，可以修改</span>
    - sudo dpkg -i hugo<span style="color:#75715e">*.deb</span>
    - hugo version
    - rm -rf public
    - npm install <span style="color:#75715e">#安装依赖，要package.json，没需求的可以省略</span>
    
<span style="color:#66d9ef">script</span>:
    - npm run build <span style="color:#75715e">#我这里在package.json配置了一系列生成操作，可以自己替换</span>

<span style="color:#66d9ef">after_success</span>:
    - git config --global user.name <span style="color:#e6db74">&#34;FFRaycoder&#34;</span> <span style="color:#75715e">#用户名</span>
    - git config --global user.email <span style="color:#e6db74">&#34;ray@raycoder.me&#34;</span> <span style="color:#75715e">#用户邮箱</span>
    - git clone https://${ACCESS_TOKEN}@github.com/FFRaycoder/ffraycoder.github.io.git container <span style="color:#75715e">#换成你的仓库</span>
    - rm -rf container/*
    - cp -r public/* container 
    - cd container
    - git add .
    - git commit -m <span style="color:#e6db74">&#39;Travis update blog&#39;</span>
    - git push -u origin master -f
</code></pre></div><p><code>package.json</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;blog&#34;</span>,
  <span style="color:#f92672">&#34;version&#34;</span>: <span style="color:#e6db74">&#34;1.0.0&#34;</span>,
  <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Ray&#39;s Blog&#34;</span>,
  <span style="color:#f92672">&#34;main&#34;</span>: <span style="color:#e6db74">&#34;index.js&#34;</span>,
  <span style="color:#f92672">&#34;scripts&#34;</span>: {
    <span style="color:#f92672">&#34;test&#34;</span>: <span style="color:#e6db74">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span>,
    <span style="color:#f92672">&#34;build&#34;</span>: <span style="color:#e6db74">&#34;git config --global core.quotePath false &amp;&amp; hugo --gc --minify --cleanDestinationDir &amp;&amp; ./node_modules/gulp/bin/gulp.js build&#34;</span>,
    <span style="color:#f92672">&#34;index&#34;</span>: <span style="color:#e6db74">&#34;hugo-lunr&#34;</span>,
    <span style="color:#f92672">&#34;algolia&#34;</span>: <span style="color:#e6db74">&#34;atomic-algolia&#34;</span>
  },
  <span style="color:#f92672">&#34;engines&#34;</span>: {
    <span style="color:#f92672">&#34;node&#34;</span>: <span style="color:#e6db74">&#34;12.x&#34;</span>
  },
  <span style="color:#f92672">&#34;repository&#34;</span>: {
    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;git&#34;</span>,
    <span style="color:#f92672">&#34;url&#34;</span>: <span style="color:#e6db74">&#34;git+https://github.com/FFRaycoder/blog.git&#34;</span>
  },
  <span style="color:#f92672">&#34;keywords&#34;</span>: [
    <span style="color:#e6db74">&#34;blog&#34;</span>,
    <span style="color:#e6db74">&#34;hugo&#34;</span>,
    <span style="color:#e6db74">&#34;hugo-theme-meme&#34;</span>
  ],
  <span style="color:#f92672">&#34;author&#34;</span>: <span style="color:#e6db74">&#34;reuixiy&#34;</span>,
  <span style="color:#f92672">&#34;license&#34;</span>: <span style="color:#e6db74">&#34;CC-BY-NC-SA-4.0&#34;</span>,
  <span style="color:#f92672">&#34;bugs&#34;</span>: {
    <span style="color:#f92672">&#34;url&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/FFRaycoder/blog/issues&#34;</span>
  },
  <span style="color:#f92672">&#34;homepage&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/FFRaycoder/blog&#34;</span>,
  <span style="color:#f92672">&#34;devDependencies&#34;</span>: {
    <span style="color:#f92672">&#34;gulp&#34;</span>: <span style="color:#e6db74">&#34;^4.0.2&#34;</span>,
    <span style="color:#f92672">&#34;gulp-uglify&#34;</span>: <span style="color:#e6db74">&#34;^3.0.2&#34;</span>,
    <span style="color:#f92672">&#34;hugo-search-index&#34;</span>: <span style="color:#e6db74">&#34;^0.5.0&#34;</span>,
    <span style="color:#f92672">&#34;readable-stream&#34;</span>: <span style="color:#e6db74">&#34;^3.6.0&#34;</span>,
    <span style="color:#f92672">&#34;uglify-es&#34;</span>: <span style="color:#e6db74">&#34;^3.3.9&#34;</span>,
    <span style="color:#f92672">&#34;workbox-build&#34;</span>: <span style="color:#e6db74">&#34;^5.0.0&#34;</span>
  }
}
</code></pre></div><p>至此，我们的配置就结束了。每次把博客源码推送到仓库的<code>hugo</code>分支，Travis就会自动帮你部署好网页。</p>
]]></description><category domain="https://raycoder.me/categories/ci/">CI</category><category domain="https://raycoder.me/tags/travis-ci/">Travis CI</category><category domain="https://raycoder.me/tags/hugo/">Hugo</category><category domain="https://raycoder.me/tags/github/">GitHub</category><category domain="https://raycoder.me/tags/%E5%8D%9A%E5%AE%A2/">博客</category></item><item><title>GitHub Pages变快了！</title><link>https://raycoder.me/p/github-pages-becomes-faster/</link><guid isPermaLink="true">https://raycoder.me/p/github-pages-becomes-faster/</guid><pubDate>Thu, 09 Apr 2020 09:38:09 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！本文首发于个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<p>前天在逛大佬们的博客，有的大佬用的是<code>github.io</code>二级域名。然后网页挂了，交流群内一片喊声<heimu>淦</heimu>🙃</p>
<p>昨天上午又去看了看，Pages可以正常访问了。阿，怎么感觉变快了？</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200409094422.png" alt=""></p>
<p>众所周知GitHub采用的Fastly CDN，估计前天是增加国内节点去了。</p>
<p>真香，可以抛弃Netlify了QQ</p>
<hr>
<p>而且取消了对百度Robots.txt的限制。</p>
]]></description><category domain="https://raycoder.me/categories/github/">GitHub</category><category domain="https://raycoder.me/tags/github/">GitHub</category><category domain="https://raycoder.me/tags/pages/">Pages</category></item><item><title>HTML入门(二)：文本</title><link>https://raycoder.me/p/html-2/</link><guid isPermaLink="true">https://raycoder.me/p/html-2/</guid><pubDate>Wed, 08 Apr 2020 13:19:37 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
</blockquote>
<h2 id="普通文本">普通文本</h2>
<h3 id="标题">标题</h3>
<p>HTML中的标题有六个级别：</p>
<h4 id="h1">&lt;h1&gt;</h4>
<p>用在主标题上。</p>
<h4 id="h2">&lt;h2&gt;</h4>
<p>用于二级标题上。</p>
<h4 id="h3">&lt;h3&gt;</h4>
<p>以此类推……</p>
<h4 id="h4">&lt;h4&gt;</h4>
<h4 id="h5">&lt;h5&gt;</h4>
<h4 id="h6">&lt;h6&gt;</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">h1</span>&gt;一级标题&lt;/<span style="color:#f92672">h1</span>&gt;
&lt;<span style="color:#f92672">h2</span>&gt;二级标题&lt;/<span style="color:#f92672">h2</span>&gt;
&lt;<span style="color:#f92672">h3</span>&gt;三级标题&lt;/<span style="color:#f92672">h3</span>&gt;
&lt;<span style="color:#f92672">h4</span>&gt;四级标题&lt;/<span style="color:#f92672">h4</span>&gt;
&lt;<span style="color:#f92672">h5</span>&gt;五级标题&lt;/<span style="color:#f92672">h5</span>&gt;
&lt;<span style="color:#f92672">h6</span>&gt;六级标题&lt;/<span style="color:#f92672">h6</span>&gt;
</code></pre></div><p>结果：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200411132736.png" alt=""></p>
<h3 id="段落">段落</h3>
<h4 id="p">&lt;p&gt;</h4>
<p>在成段的文字两端添加<code>&lt;p&gt;</code>起始标签和<code>&lt;/p&gt;</code>结束标签就构成了HTML中的段落。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">p</span>&gt;这是一个段落！&lt;/<span style="color:#f92672">p</span>&gt;
&lt;<span style="color:#f92672">p</span>&gt;这是另一个段落！&lt;/<span style="color:#f92672">p</span>&gt;
</code></pre></div><p>结果：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200411133205.png" alt=""></p>
<p>（默认情况下，浏览器会把段落另起一行显示并保持一定距离。）</p>
<h3 id="粗体">粗体</h3>
<h4 id="b">&lt;b&gt;</h4>
<p>在<code>&lt;b&gt;</code>起始标签与<code>&lt;/b&gt;</code>结束标签中的文字显示为粗体。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">p</span>&gt;这是一个&lt;<span style="color:#f92672">b</span>&gt;段落&lt;/<span style="color:#f92672">b</span>&gt;！&lt;/<span style="color:#f92672">p</span>&gt;
&lt;<span style="color:#f92672">p</span>&gt;这是&lt;<span style="color:#f92672">b</span>&gt;另一个&lt;/<span style="color:#f92672">b</span>&gt;段落！&lt;/<span style="color:#f92672">p</span>&gt;
</code></pre></div><p>结果：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200411133919.png" alt=""></p>
<h3 id="斜体">斜体</h3>
<h4 id="i">&lt;i&gt;</h4>
<p>在<code>&lt;i&gt;</code>起始标签与<code>&lt;/i&gt;</code>结束标签中的文字显示为斜体。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">p</span>&gt;这是一个&lt;<span style="color:#f92672">i</span>&gt;段落&lt;/<span style="color:#f92672">i</span>&gt;！&lt;/<span style="color:#f92672">p</span>&gt;
&lt;<span style="color:#f92672">p</span>&gt;这是&lt;<span style="color:#f92672">i</span>&gt;另一个&lt;/<span style="color:#f92672">i</span>&gt;段落！&lt;/<span style="color:#f92672">p</span>&gt;
</code></pre></div><p>结果：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200411134209.png" alt=""></p>
<h3 id="上下标">上下标</h3>
<h4 id="上标sup">上标&lt;sup&gt;</h4>
<p>在<code>&lt;sup&gt;</code>起始标签与<code>&lt;/sup&gt;</code>结束标签中的文字显示为上标，如<code>2&lt;sup&gt;2&lt;/sup&gt;</code>=2<sup>2</sup>。</p>
<h4 id="下标sub">下标&lt;sub&gt;</h4>
<p>在<code>&lt;sub&gt;</code>起始标签与<code>&lt;/sub&gt;</code>结束标签中的文字显示为上标，如<code>H&lt;sub&gt;2&lt;/sub&gt;O</code>=H<sub>2</sub>O。</p>
<h3 id="换行符和水平线">换行符和水平线</h3>
<h4 id="换行符br-">换行符&lt;br /&gt;</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">地球&lt;<span style="color:#f92672">br</span> /&gt;每天绕着&lt;<span style="color:#f92672">br</span> /&gt;太阳转。
</code></pre></div><p>结果：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200411134916.png" alt=""></p>
<p>当然，这个<code> /</code>可以略去不写，写成<code>&lt;br&gt;</code>也是可以的。</p>
<h3 id="水平线hr-">水平线&lt;hr /&gt;</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">Ray是一个&lt;<span style="color:#f92672">hr</span> /&gt;大氵B
</code></pre></div><p>结果：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200411135247.png" alt=""></p>
<p>同理，这个<code> /</code>也可以略去不写，写成<code>&lt;hr&gt;</code>也是可以的。</p>
<h2 id="语义化标记">语义化标记</h2>
<p>和上面的文本标签不同的是，语义化标记基本上是展现给搜索引擎而不是用户的。</p>
<h3 id="strong">&lt;strong&gt;</h3>
<p><code>&lt;strong&gt;</code>标签表示其中内容很重要——一般显示为粗体。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">strong</span>&gt;注意:&lt;/<span style="color:#f92672">strong</span>&gt;不适合工作时观看!
</code></pre></div><p>结果：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200414115950.png" alt=""></p>
<h3 id="em">&lt;em&gt;</h3>
<p><code>&lt;em&gt;</code>标签起强调作用——一般显示为斜体。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">p</span>&gt;我 &lt;<span style="color:#f92672">em</span>&gt;觉得&lt;/<span style="color:#f92672">em</span>&gt; 我非常氵&lt;/<span style="color:#f92672">p</span>&gt;
&lt;<span style="color:#f92672">p</span>&gt;我觉得 &lt;<span style="color:#f92672">em</span>&gt;我&lt;/<span style="color:#f92672">em</span>&gt; 非常氵&lt;/<span style="color:#f92672">p</span>&gt;
</code></pre></div><p>效果：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200414120553.png" alt=""></p>
<h3 id="引用">引用</h3>
<h4 id="blockquote">&lt;blockquote&gt;</h4>
<p><code>&lt;blockquote&gt;</code>会自动缩进，但是最好使用CSS完成其他文本的缩进。<code>cite</code>特性可以表明这是从哪里引用的。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">blockquote</span> <span style="color:#a6e22e">cite</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://en.wikipedia.org/wiki/Winnie-the-Pooh&#34;</span>&gt;
	&lt;<span style="color:#f92672">p</span>&gt;您是否曾经停下来思考，而忘记重新开始？&lt;/<span style="color:#f92672">p</span>&gt;
&lt;/<span style="color:#f92672">blockquote</span>&gt;
</code></pre></div><p>效果：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200414121204.png" alt=""></p>
<h4 id="q">&lt;q&gt;</h4>
<p><code>&lt;q&gt;</code>用于表明在段落中的较短引用。它一般会在引用文本两边加上引号。这些引号是无法被选中的。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">p</span>&gt;Van曾说，&lt;<span style="color:#f92672">q</span>&gt;ASS♂WE♂CAN！&lt;/<span style="color:#f92672">q</span>&gt;&lt;/<span style="color:#f92672">p</span>&gt;
</code></pre></div><p>效果：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200414121134.png" alt=""></p>
<h3 id="内容的修改">内容的修改</h3>
<h4 id="ins与del">&lt;ins&gt;与&lt;del&gt;</h4>
<p><code>&lt;ins&gt;</code>标签为插入的内容，<code>&lt;del&gt;</code>标签为删去的内容。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">p</span>&gt;这真是一个 &lt;<span style="color:#f92672">del</span>&gt;最差&lt;/<span style="color:#f92672">del</span>&gt; &lt;<span style="color:#f92672">ins</span>&gt;最好&lt;/<span style="color:#f92672">ins</span>&gt; 的点子了！&lt;/<span style="color:#f92672">p</span>&gt;
</code></pre></div><p>效果：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200414121349.png" alt=""></p>
<h4 id="s">&lt;s&gt;</h4>
<p><code>&lt;s&gt;</code>标签表示不准确但不应删去的内容。</p>
<p>看着像是<code>&lt;del&gt;</code>标签，但它们是不同的。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">p</span>&gt;北京尻鸭：&lt;/<span style="color:#f92672">p</span>&gt;
&lt;<span style="color:#f92672">p</span>&gt;&lt;<span style="color:#f92672">s</span>&gt;过去￥100&lt;/<span style="color:#f92672">s</span>&gt;&lt;/<span style="color:#f92672">p</span>&gt;
&lt;<span style="color:#f92672">p</span>&gt;现在只要￥998！&lt;/<span style="color:#f92672">p</span>&gt;
</code></pre></div><p>效果：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200414121618.png" alt=""></p>
<hr>
<p>呼，终于又肝完一篇了，氵~</p>
]]></description><category domain="https://raycoder.me/categories/html/">HTML</category><category domain="https://raycoder.me/categories/html%E5%85%A5%E9%97%A8/">HTML入门</category><category domain="https://raycoder.me/tags/html/">HTML</category><category domain="https://raycoder.me/tags/html%E5%85%A5%E9%97%A8/">HTML入门</category></item><item><title>HTML入门(一)：结构</title><link>https://raycoder.me/p/html-1/</link><guid isPermaLink="true">https://raycoder.me/p/html-1/</guid><pubDate>Tue, 07 Apr 2020 08:51:02 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
<p><strong>本文首发于<a href="https://raycoder.me/p/html-1/">Ray's Blog</a></strong></p>
</blockquote>
<h3 id="word文档的结构">Word文档的结构</h3>
<p>任何文档中标题和子标题都反映出信息的层次性。标题后面可能跟着文档简介或是文档中最重要的信息。下面是一个Word文档示例。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200407085907.png" alt=""></p>
<p>从这里我们理解到了Word文档中结构的运用对理解文档的帮助，编写网页的时候，道理是一样的。</p>
<h3 id="html文档的结构">HTML文档的结构</h3>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200407090301.png" alt=""></p>
<h4 id="html使用元素描述结构">HTML使用元素描述结构</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">html</span>&gt;<span style="color:#75715e">&lt;!--HTML代码的开始--&gt;</span>
    &lt;<span style="color:#f92672">body</span>&gt;<span style="color:#75715e">&lt;!--与结束标签中的内容显示在浏览器主窗口中--&gt;</span>
		&lt;<span style="color:#f92672">h1</span>&gt;一级标题&lt;/<span style="color:#f92672">h1</span>&gt;<span style="color:#75715e">&lt;!--主标题--&gt;</span>
		&lt;<span style="color:#f92672">p</span>&gt;普通文本&lt;/<span style="color:#f92672">p</span>&gt;<span style="color:#75715e">&lt;!--成段的文字--&gt;</span>
        &lt;<span style="color:#f92672">h2</span>&gt;二级标题&lt;/<span style="color:#f92672">h2</span>&gt;
		&lt;<span style="color:#f92672">p</span>&gt;另一段普通文本&lt;/<span style="color:#f92672">p</span>&gt;
		&lt;<span style="color:#f92672">h2</span>&gt;又一个二级标题&lt;/<span style="color:#f92672">h2</span>&gt;
		&lt;<span style="color:#f92672">p</span>&gt;又一段普通文本&lt;/<span style="color:#f92672">p</span>&gt;
	&lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><h4 id="进一步分析标签">进一步分析标签</h4>
<p>HTML代码由包含在尖括号里的字符构成，这些代码称为<code>HTML元素</code>。元素通常由两个标签组成：一个其实标签和一个结束标签。</p>
<p>HTML标签的结构如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">     起始标签              结束标签
&lt;      <span style="color:#f92672">p</span>       &gt;      &lt; /    <span style="color:#f92672">p</span>     &gt;
左尖   用途     右尖     斜杠  字符
括号 这里是段落  括号
</code></pre></div><h4 id="标签的特性">标签的特性</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">p</span> <span style="color:#a6e22e">lang   </span><span style="color:#f92672">=</span>  <span style="color:#e6db74">&#34;zh-cn&#34;</span>&gt;一个中文段落&lt;/<span style="color:#f92672">p</span>&gt;
   特性名称    特性值
</code></pre></div><h4 id="bodyhead和title">&lt;body&gt;、&lt;head&gt;和&lt;title&gt;</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">html</span>&gt;
	&lt;<span style="color:#f92672">head</span>&gt;
		&lt;<span style="color:#f92672">title</span>&gt;页面的标题&lt;/<span style="color:#f92672">title</span>&gt;
	&lt;/<span style="color:#f92672">head</span>&gt;
	&lt;<span style="color:#f92672">body</span>&gt;
		&lt;<span style="color:#f92672">h1</span>&gt;这是页面的正文&lt;/<span style="color:#f92672">h1</span>&gt;
		&lt;<span style="color:#f92672">p</span>&gt;网页正文中的所有内容都会显示在主浏览器窗口中。&lt;/<span style="color:#f92672">p</span>&gt;
	&lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><h5 id="body">&lt;body&gt;</h5>
<p>在我们的第一个示例页面中，我们就看到了<code>&lt;body</code>&gt;元素。这个元素中的所有内容都会显示在浏览器的主窗口中。</p>
<h5 id="head">&lt;head&gt;</h5>
<p>在<code>&lt;body&gt;</code>元素的前面，我们经常会看到<code>&lt;head&gt;</code>标签——它包含了有关这个页面的一些信息。我们经常会在这里看到<code>&lt;title&gt;</code>元素。</p>
<h5 id="title">&lt;title&gt;</h5>
<p><code>&lt;title&gt;</code>元素设置这个页面的标题。</p>
]]></description><category domain="https://raycoder.me/categories/html/">HTML</category><category domain="https://raycoder.me/categories/html%E5%85%A5%E9%97%A8/">HTML入门</category><category domain="https://raycoder.me/tags/html/">HTML</category><category domain="https://raycoder.me/tags/html%E5%85%A5%E9%97%A8/">HTML入门</category><category domain="https://raycoder.me/tags/html%E7%BB%93%E6%9E%84/">HTML结构</category></item><item><title>万能的CLOUDFLARE WORKERS+JSProxy代理？！</title><link>https://raycoder.me/p/cf-worker-proxy/</link><guid isPermaLink="true">https://raycoder.me/p/cf-worker-proxy/</guid><pubDate>Thu, 02 Apr 2020 16:48:52 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
<p><strong>本文首发于<a href="https://raycoder.me/p/cf-worker-proxy/">Ray's Blog</a></strong></p>
</blockquote>
<p>不瞒你们说，我看到这个项目的时候都震（智）惊（障）了！贴上链接：<a href="https://github.com/EtherDream/jsproxy">EtherDream / jsproxy | Github</a>你猜这个项目是做什么的？使用<a href="https://workers.cloudflare.com"><code>Cloudflare workers</code></a>进行<em class="emphasis-point">反向代理</em>！！！</p>
<p><img src="https://cdngh.raycoder.me/imgs/20200403091318.jpg" alt=""></p>
<p>先附上一个网址。<a href="https://yt.raycoder.me">https://yt.raycoder.me</a>，这是我弄的一个YouTube代理网址。这个真的只使用了<code>Cloudflare Workers</code>进行代理，我是没有做任何其它配置的。你也可以把这当做一个cdn来用——cloudflare免费版不给你国内的节点，但是Workers有啊！一个月10万的请求数量完全够用了。（你们可能发现我的站变快了，因为我也用了）</p>
<p>首先我们需要一个Cloudflare账号，自己注册，再把你的域名<code>NS</code>服务器换成CF给你的。0然后点击上面贴出的workers地址，点击&quot;Start Building&quot;，按照流程配置好。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200402170525.png" alt=""></p>
<p>然后会跳转到你的控制台界面，点进去，选择<code>Workers</code>：</p>
<p><img src="https://cdngh.raycoder.me/imgs/20200402170620.png" alt=""></p>
<p>点击<code>Manage Workers</code>，你会见到一个类似于这样的页面。</p>
<p><img src="https://cdngh.raycoder.me/imgs/20200402170832.png" alt=""></p>
<p>然后把这串JS代码贴进去。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#e6db74">&#39;use strict&#39;</span>

<span style="color:#75715e">/**
</span><span style="color:#75715e"> * static files (404.html, sw.js, conf.js)
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ASSET_URL</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;YOUR_URL&gt;&#39;</span>

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">JS_VER</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">MAX_RETRY</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>

<span style="color:#75715e">/** @type {RequestInit} */</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">PREFLIGHT_INIT</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">status</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">204</span>,
  <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Headers</span>({
    <span style="color:#e6db74">&#39;access-control-allow-origin&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;*&#39;</span>,
    <span style="color:#e6db74">&#39;access-control-allow-methods&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#39;</span>,
    <span style="color:#e6db74">&#39;access-control-max-age&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;1728000&#39;</span>,
  }),
}

<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {any} body
</span><span style="color:#75715e"> * @param {number} status
</span><span style="color:#75715e"> * @param {Object&lt;string, string&gt;} headers
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#a6e22e">body</span>, <span style="color:#a6e22e">status</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>, <span style="color:#a6e22e">headers</span> <span style="color:#f92672">=</span> {}) {
  <span style="color:#a6e22e">headers</span>[<span style="color:#e6db74">&#39;--ver&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">JS_VER</span>
  <span style="color:#a6e22e">headers</span>[<span style="color:#e6db74">&#39;access-control-allow-origin&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;*&#39;</span>
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Response</span>(<span style="color:#a6e22e">body</span>, {<span style="color:#a6e22e">status</span>, <span style="color:#a6e22e">headers</span>})
}


<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {string} urlStr 
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">newUrl</span>(<span style="color:#a6e22e">urlStr</span>) {
  <span style="color:#66d9ef">try</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">urlStr</span>)
  } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">err</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>
  }
}


<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;fetch&#39;</span>, <span style="color:#a6e22e">e</span> =&gt; {
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ret</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fetchHandler</span>(<span style="color:#a6e22e">e</span>)
    .<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">err</span> =&gt; <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;cfworker error:\n&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">stack</span>, <span style="color:#ae81ff">502</span>))
  <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">respondWith</span>(<span style="color:#a6e22e">ret</span>)
})


<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {FetchEvent} e 
</span><span style="color:#75715e"> */</span>
<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">fetchHandler</span>(<span style="color:#a6e22e">e</span>) {
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">req</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">request</span>
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">urlStr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">url</span>
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">urlObj</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">urlStr</span>)
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">href</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">origin</span>.<span style="color:#a6e22e">length</span>)

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">protocol</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;http:&#39;</span>) {
    <span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">protocol</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https:&#39;</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#ae81ff">301</span>, {
      <span style="color:#e6db74">&#39;strict-transport-security&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;max-age=99999999; includeSubDomains; preload&#39;</span>,
      <span style="color:#e6db74">&#39;location&#39;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">href</span>,
    })
  }

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">&#39;/http/&#39;</span>)) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">httpHandler</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#ae81ff">6</span>))
  }

  <span style="color:#66d9ef">switch</span> (<span style="color:#a6e22e">path</span>) {
  <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;/http&#39;</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;请更新 cfworker 到最新版本!&#39;</span>)
  <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;/ws&#39;</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;not support&#39;</span>, <span style="color:#ae81ff">400</span>)
  <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;/works&#39;</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;it works&#39;</span>)
  <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
    <span style="color:#75715e">// static files
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">ASSET_URL</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">path</span>)
  }
}


<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {Request} req
</span><span style="color:#75715e"> * @param {string} pathname
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">httpHandler</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">pathname</span>) {
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">reqHdrRaw</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">headers</span>
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">reqHdrRaw</span>.<span style="color:#a6e22e">has</span>(<span style="color:#e6db74">&#39;x-jsproxy&#39;</span>)) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Response</span>.<span style="color:#a6e22e">error</span>()
  }

  <span style="color:#75715e">// preflight
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">method</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;OPTIONS&#39;</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">reqHdrRaw</span>.<span style="color:#a6e22e">has</span>(<span style="color:#e6db74">&#39;access-control-request-headers&#39;</span>)
  ) {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Response</span>(<span style="color:#66d9ef">null</span>, <span style="color:#a6e22e">PREFLIGHT_INIT</span>)
  }

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">acehOld</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">rawSvr</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">rawLen</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">rawEtag</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>

  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">reqHdrNew</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Headers</span>(<span style="color:#a6e22e">reqHdrRaw</span>)
  <span style="color:#a6e22e">reqHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;x-jsproxy&#39;</span>, <span style="color:#e6db74">&#39;1&#39;</span>)

  <span style="color:#75715e">// 此处逻辑和 http-dec-req-hdr.lua 大致相同
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// https://github.com/EtherDream/jsproxy/blob/master/lua/http-dec-req-hdr.lua
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">refer</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">reqHdrNew</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;referer&#39;</span>)
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">query</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">refer</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#a6e22e">refer</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;?&#39;</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">query</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;missing params&#39;</span>, <span style="color:#ae81ff">403</span>)
  }
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">param</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URLSearchParams</span>(<span style="color:#a6e22e">query</span>)

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">v</span>] <span style="color:#66d9ef">of</span> Object.<span style="color:#a6e22e">entries</span>(<span style="color:#a6e22e">param</span>)) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">k</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>) <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;--&#39;</span>) {
      <span style="color:#75715e">// 系统信息
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">switch</span> (<span style="color:#a6e22e">k</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#ae81ff">2</span>)) {
      <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;aceh&#39;</span><span style="color:#f92672">:</span>
        <span style="color:#a6e22e">acehOld</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
        <span style="color:#66d9ef">break</span>
      <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;raw-info&#39;</span><span style="color:#f92672">:</span>
        [<span style="color:#a6e22e">rawSvr</span>, <span style="color:#a6e22e">rawLen</span>, <span style="color:#a6e22e">rawEtag</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">v</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;|&#39;</span>)
        <span style="color:#66d9ef">break</span>
      }
    } <span style="color:#66d9ef">else</span> {
      <span style="color:#75715e">// 还原 HTTP 请求头
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">v</span>) {
        <span style="color:#a6e22e">reqHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">v</span>)
      } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">reqHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#a6e22e">k</span>)
      }
    }
  }
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">param</span>.<span style="color:#a6e22e">has</span>(<span style="color:#e6db74">&#39;referer&#39;</span>)) {
    <span style="color:#a6e22e">reqHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#e6db74">&#39;referer&#39;</span>)
  }

  <span style="color:#75715e">// cfworker 会把路径中的 `//` 合并成 `/`
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">urlStr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pathname</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/^(https?):\/+/</span>, <span style="color:#e6db74">&#39;$1://&#39;</span>)
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">urlObj</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">newUrl</span>(<span style="color:#a6e22e">urlStr</span>)
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">urlObj</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;invalid proxy url: &#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">urlStr</span>, <span style="color:#ae81ff">403</span>)
  }

  <span style="color:#75715e">/** @type {RequestInit} */</span>
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">reqInit</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">method</span>,
    <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">reqHdrNew</span>,
    <span style="color:#a6e22e">redirect</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;manual&#39;</span>,
  }
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">method</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;POST&#39;</span>) {
    <span style="color:#a6e22e">reqInit</span>.<span style="color:#a6e22e">body</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">proxy</span>(<span style="color:#a6e22e">urlObj</span>, <span style="color:#a6e22e">reqInit</span>, <span style="color:#a6e22e">acehOld</span>, <span style="color:#a6e22e">rawLen</span>, <span style="color:#ae81ff">0</span>)
}


<span style="color:#75715e">/**
</span><span style="color:#75715e"> * 
</span><span style="color:#75715e"> * @param {URL} urlObj 
</span><span style="color:#75715e"> * @param {RequestInit} reqInit 
</span><span style="color:#75715e"> * @param {number} retryTimes 
</span><span style="color:#75715e"> */</span>
<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">proxy</span>(<span style="color:#a6e22e">urlObj</span>, <span style="color:#a6e22e">reqInit</span>, <span style="color:#a6e22e">acehOld</span>, <span style="color:#a6e22e">rawLen</span>, <span style="color:#a6e22e">retryTimes</span>) {
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">href</span>, <span style="color:#a6e22e">reqInit</span>)
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">resHdrOld</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">headers</span>
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">resHdrNew</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Headers</span>(<span style="color:#a6e22e">resHdrOld</span>)

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">expose</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;*&#39;</span>
  
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">v</span>] <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">resHdrOld</span>.<span style="color:#a6e22e">entries</span>()) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;access-control-allow-origin&#39;</span> <span style="color:#f92672">||</span>
        <span style="color:#a6e22e">k</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;access-control-expose-headers&#39;</span> <span style="color:#f92672">||</span>
        <span style="color:#a6e22e">k</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;location&#39;</span> <span style="color:#f92672">||</span>
        <span style="color:#a6e22e">k</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;set-cookie&#39;</span>
    ) {
      <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;--&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">k</span>
      <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">v</span>)
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">acehOld</span>) {
        <span style="color:#a6e22e">expose</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">expose</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;,&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">x</span>
      }
      <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#a6e22e">k</span>)
    }
    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">acehOld</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">k</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;cache-control&#39;</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">k</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;content-language&#39;</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">k</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;content-type&#39;</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">k</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;expires&#39;</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">k</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;last-modified&#39;</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">k</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;pragma&#39;</span>
    ) {
      <span style="color:#a6e22e">expose</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">expose</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;,&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">k</span>
    }
  }

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">acehOld</span>) {
    <span style="color:#a6e22e">expose</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">expose</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;,--s&#39;</span>
    <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;--t&#39;</span>, <span style="color:#e6db74">&#39;1&#39;</span>)
  }

  <span style="color:#75715e">// verify
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">rawLen</span>) {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newLen</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">resHdrOld</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;content-length&#39;</span>) <span style="color:#f92672">||</span> <span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">badLen</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">rawLen</span> <span style="color:#f92672">!==</span> <span style="color:#a6e22e">newLen</span>)

    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">badLen</span>) {
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">retryTimes</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">MAX_RETRY</span>) {
        <span style="color:#a6e22e">urlObj</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">parseYtVideoRedir</span>(<span style="color:#a6e22e">urlObj</span>, <span style="color:#a6e22e">newLen</span>, <span style="color:#a6e22e">res</span>)
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">urlObj</span>) {
          <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">proxy</span>(<span style="color:#a6e22e">urlObj</span>, <span style="color:#a6e22e">reqInit</span>, <span style="color:#a6e22e">acehOld</span>, <span style="color:#a6e22e">rawLen</span>, <span style="color:#a6e22e">retryTimes</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
        }
      }
      <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">body</span>, <span style="color:#ae81ff">400</span>, {
        <span style="color:#e6db74">&#39;--error&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">`bad len: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">newLen</span><span style="color:#e6db74">}</span><span style="color:#e6db74">, except: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">rawLen</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>,
        <span style="color:#e6db74">&#39;access-control-expose-headers&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;--error&#39;</span>,
      })
    }

    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">retryTimes</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>) {
      <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;--retry&#39;</span>, <span style="color:#a6e22e">retryTimes</span>)
    }
  }

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">status</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>

  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;access-control-expose-headers&#39;</span>, <span style="color:#a6e22e">expose</span>)
  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;access-control-allow-origin&#39;</span>, <span style="color:#e6db74">&#39;*&#39;</span>)
  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;--s&#39;</span>, <span style="color:#a6e22e">status</span>)
  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;--ver&#39;</span>, <span style="color:#a6e22e">JS_VER</span>)

  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#e6db74">&#39;content-security-policy&#39;</span>)
  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#e6db74">&#39;content-security-policy-report-only&#39;</span>)
  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#e6db74">&#39;clear-site-data&#39;</span>)

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">301</span> <span style="color:#f92672">||</span>
      <span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">302</span> <span style="color:#f92672">||</span>
      <span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">303</span> <span style="color:#f92672">||</span>
      <span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">307</span> <span style="color:#f92672">||</span>
      <span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">308</span>
  ) {
    <span style="color:#a6e22e">status</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">status</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>
  }

  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Response</span>(<span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">body</span>, {
    <span style="color:#a6e22e">status</span>,
    <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">resHdrNew</span>,
  })
}


<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {URL} urlObj 
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">isYtUrl</span>(<span style="color:#a6e22e">urlObj</span>) {
  <span style="color:#66d9ef">return</span> (
    <span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">host</span>.<span style="color:#a6e22e">endsWith</span>(<span style="color:#e6db74">&#39;.googlevideo.com&#39;</span>) <span style="color:#f92672">&amp;&amp;</span>
    <span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">pathname</span>.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">&#39;/videoplayback&#39;</span>)
  )
}

<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {URL} urlObj 
</span><span style="color:#75715e"> * @param {number} newLen 
</span><span style="color:#75715e"> * @param {Response} res 
</span><span style="color:#75715e"> */</span>
<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">parseYtVideoRedir</span>(<span style="color:#a6e22e">urlObj</span>, <span style="color:#a6e22e">newLen</span>, <span style="color:#a6e22e">res</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">newLen</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">2000</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>
  }
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">isYtUrl</span>(<span style="color:#a6e22e">urlObj</span>)) {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>
  }
  <span style="color:#66d9ef">try</span> {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">data</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">text</span>()
    <span style="color:#a6e22e">urlObj</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">data</span>)
  } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">err</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>
  }
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">isYtUrl</span>(<span style="color:#a6e22e">urlObj</span>)) {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">urlObj</span>
}
</code></pre></div><p>其中的<code>ASSET_URL</code>要更换成你想要代理的域名——比如想代理YT，就写<code>https://youtube.com</code>。</p>
<p>然后选择<code>Save and Deploy</code>。</p>
<p>它会给你分配一个域名，你可以修改成你想要的域名。比如我的YT代理就是<code>https://youtube.&lt;马赛克&gt;.workers.dev</code>。</p>
<p>自定义域名，先把一个子域名CNAME到分配的域名，然后选择<code>Add ruote</code>。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200402172046.png" alt=""></p>
<p>这里我想要把我的域名解析到<code>rb</code>这个Worker，我就填写<code>https://raycoder.me/*</code>，选择<code>rb</code>这个Worker，保存。</p>
<p><img src="https://cdngh.raycoder.me/imgs/20200402172138.png" alt=""></p>
<p>这就引申出了一个用法——拿来当作网站CDN，或者是图床CDN（无需jsDelivr）。我现在的CDN就是这个搭建的。</p>
<p>结果：</p>
<p><img src="https://cdngh.raycoder.me/imgs/20200403091606.png" alt=""></p>
<p>当然人家拒绝了我们<code>cloudflare-nginx</code>的访问也没法子​🙃​</p>
<p>愉快的访问吧！</p>
<p><img src="https://cdngh.raycoder.me/imgs/20200403091351.jpg" alt=""></p>
<p><strong>注意！本教程仅供个人学习使用！</strong></p>
<hr>
<p>2020/04/03更新：</p>
<p>建议保持原始代码，高速访问外网。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#e6db74">&#39;use strict&#39;</span>

<span style="color:#75715e">/**
</span><span style="color:#75715e"> * static files (404.html, sw.js, conf.js)
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ASSET_URL</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://etherdream.github.io/jsproxy&#39;</span>

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">JS_VER</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">MAX_RETRY</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>

<span style="color:#75715e">/** @type {RequestInit} */</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">PREFLIGHT_INIT</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">status</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">204</span>,
  <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Headers</span>({
    <span style="color:#e6db74">&#39;access-control-allow-origin&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;*&#39;</span>,
    <span style="color:#e6db74">&#39;access-control-allow-methods&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#39;</span>,
    <span style="color:#e6db74">&#39;access-control-max-age&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;1728000&#39;</span>,
  }),
}

<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {any} body
</span><span style="color:#75715e"> * @param {number} status
</span><span style="color:#75715e"> * @param {Object&lt;string, string&gt;} headers
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#a6e22e">body</span>, <span style="color:#a6e22e">status</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>, <span style="color:#a6e22e">headers</span> <span style="color:#f92672">=</span> {}) {
  <span style="color:#a6e22e">headers</span>[<span style="color:#e6db74">&#39;--ver&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">JS_VER</span>
  <span style="color:#a6e22e">headers</span>[<span style="color:#e6db74">&#39;access-control-allow-origin&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;*&#39;</span>
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Response</span>(<span style="color:#a6e22e">body</span>, {<span style="color:#a6e22e">status</span>, <span style="color:#a6e22e">headers</span>})
}


<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {string} urlStr 
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">newUrl</span>(<span style="color:#a6e22e">urlStr</span>) {
  <span style="color:#66d9ef">try</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">urlStr</span>)
  } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">err</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>
  }
}


<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;fetch&#39;</span>, <span style="color:#a6e22e">e</span> =&gt; {
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ret</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fetchHandler</span>(<span style="color:#a6e22e">e</span>)
    .<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">err</span> =&gt; <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;cfworker error:\n&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">stack</span>, <span style="color:#ae81ff">502</span>))
  <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">respondWith</span>(<span style="color:#a6e22e">ret</span>)
})


<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {FetchEvent} e 
</span><span style="color:#75715e"> */</span>
<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">fetchHandler</span>(<span style="color:#a6e22e">e</span>) {
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">req</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">request</span>
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">urlStr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">url</span>
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">urlObj</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">urlStr</span>)
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">href</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">origin</span>.<span style="color:#a6e22e">length</span>)

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">protocol</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;http:&#39;</span>) {
    <span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">protocol</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https:&#39;</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#ae81ff">301</span>, {
      <span style="color:#e6db74">&#39;strict-transport-security&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;max-age=99999999; includeSubDomains; preload&#39;</span>,
      <span style="color:#e6db74">&#39;location&#39;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">href</span>,
    })
  }

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">&#39;/http/&#39;</span>)) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">httpHandler</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#ae81ff">6</span>))
  }

  <span style="color:#66d9ef">switch</span> (<span style="color:#a6e22e">path</span>) {
  <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;/http&#39;</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;请更新 cfworker 到最新版本!&#39;</span>)
  <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;/ws&#39;</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;not support&#39;</span>, <span style="color:#ae81ff">400</span>)
  <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;/works&#39;</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;it works&#39;</span>)
  <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
    <span style="color:#75715e">// static files
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">ASSET_URL</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">path</span>)
  }
}


<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {Request} req
</span><span style="color:#75715e"> * @param {string} pathname
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">httpHandler</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">pathname</span>) {
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">reqHdrRaw</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">headers</span>
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">reqHdrRaw</span>.<span style="color:#a6e22e">has</span>(<span style="color:#e6db74">&#39;x-jsproxy&#39;</span>)) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Response</span>.<span style="color:#a6e22e">error</span>()
  }

  <span style="color:#75715e">// preflight
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">method</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;OPTIONS&#39;</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">reqHdrRaw</span>.<span style="color:#a6e22e">has</span>(<span style="color:#e6db74">&#39;access-control-request-headers&#39;</span>)
  ) {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Response</span>(<span style="color:#66d9ef">null</span>, <span style="color:#a6e22e">PREFLIGHT_INIT</span>)
  }

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">acehOld</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">rawSvr</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">rawLen</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">rawEtag</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>

  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">reqHdrNew</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Headers</span>(<span style="color:#a6e22e">reqHdrRaw</span>)
  <span style="color:#a6e22e">reqHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;x-jsproxy&#39;</span>, <span style="color:#e6db74">&#39;1&#39;</span>)

  <span style="color:#75715e">// 此处逻辑和 http-dec-req-hdr.lua 大致相同
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// https://github.com/EtherDream/jsproxy/blob/master/lua/http-dec-req-hdr.lua
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">refer</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">reqHdrNew</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;referer&#39;</span>)
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">query</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">refer</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#a6e22e">refer</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;?&#39;</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">query</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;missing params&#39;</span>, <span style="color:#ae81ff">403</span>)
  }
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">param</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URLSearchParams</span>(<span style="color:#a6e22e">query</span>)

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">v</span>] <span style="color:#66d9ef">of</span> Object.<span style="color:#a6e22e">entries</span>(<span style="color:#a6e22e">param</span>)) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">k</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>) <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;--&#39;</span>) {
      <span style="color:#75715e">// 系统信息
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">switch</span> (<span style="color:#a6e22e">k</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#ae81ff">2</span>)) {
      <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;aceh&#39;</span><span style="color:#f92672">:</span>
        <span style="color:#a6e22e">acehOld</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
        <span style="color:#66d9ef">break</span>
      <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;raw-info&#39;</span><span style="color:#f92672">:</span>
        [<span style="color:#a6e22e">rawSvr</span>, <span style="color:#a6e22e">rawLen</span>, <span style="color:#a6e22e">rawEtag</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">v</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;|&#39;</span>)
        <span style="color:#66d9ef">break</span>
      }
    } <span style="color:#66d9ef">else</span> {
      <span style="color:#75715e">// 还原 HTTP 请求头
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">v</span>) {
        <span style="color:#a6e22e">reqHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">v</span>)
      } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">reqHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#a6e22e">k</span>)
      }
    }
  }
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">param</span>.<span style="color:#a6e22e">has</span>(<span style="color:#e6db74">&#39;referer&#39;</span>)) {
    <span style="color:#a6e22e">reqHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#e6db74">&#39;referer&#39;</span>)
  }

  <span style="color:#75715e">// cfworker 会把路径中的 `//` 合并成 `/`
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">urlStr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pathname</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/^(https?):\/+/</span>, <span style="color:#e6db74">&#39;$1://&#39;</span>)
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">urlObj</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">newUrl</span>(<span style="color:#a6e22e">urlStr</span>)
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">urlObj</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#e6db74">&#39;invalid proxy url: &#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">urlStr</span>, <span style="color:#ae81ff">403</span>)
  }

  <span style="color:#75715e">/** @type {RequestInit} */</span>
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">reqInit</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">method</span>,
    <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">reqHdrNew</span>,
    <span style="color:#a6e22e">redirect</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;manual&#39;</span>,
  }
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">method</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;POST&#39;</span>) {
    <span style="color:#a6e22e">reqInit</span>.<span style="color:#a6e22e">body</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">proxy</span>(<span style="color:#a6e22e">urlObj</span>, <span style="color:#a6e22e">reqInit</span>, <span style="color:#a6e22e">acehOld</span>, <span style="color:#a6e22e">rawLen</span>, <span style="color:#ae81ff">0</span>)
}


<span style="color:#75715e">/**
</span><span style="color:#75715e"> * 
</span><span style="color:#75715e"> * @param {URL} urlObj 
</span><span style="color:#75715e"> * @param {RequestInit} reqInit 
</span><span style="color:#75715e"> * @param {number} retryTimes 
</span><span style="color:#75715e"> */</span>
<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">proxy</span>(<span style="color:#a6e22e">urlObj</span>, <span style="color:#a6e22e">reqInit</span>, <span style="color:#a6e22e">acehOld</span>, <span style="color:#a6e22e">rawLen</span>, <span style="color:#a6e22e">retryTimes</span>) {
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">href</span>, <span style="color:#a6e22e">reqInit</span>)
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">resHdrOld</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">headers</span>
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">resHdrNew</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Headers</span>(<span style="color:#a6e22e">resHdrOld</span>)

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">expose</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;*&#39;</span>
  
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">v</span>] <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">resHdrOld</span>.<span style="color:#a6e22e">entries</span>()) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;access-control-allow-origin&#39;</span> <span style="color:#f92672">||</span>
        <span style="color:#a6e22e">k</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;access-control-expose-headers&#39;</span> <span style="color:#f92672">||</span>
        <span style="color:#a6e22e">k</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;location&#39;</span> <span style="color:#f92672">||</span>
        <span style="color:#a6e22e">k</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;set-cookie&#39;</span>
    ) {
      <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;--&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">k</span>
      <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">v</span>)
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">acehOld</span>) {
        <span style="color:#a6e22e">expose</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">expose</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;,&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">x</span>
      }
      <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#a6e22e">k</span>)
    }
    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">acehOld</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">k</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;cache-control&#39;</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">k</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;content-language&#39;</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">k</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;content-type&#39;</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">k</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;expires&#39;</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">k</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;last-modified&#39;</span> <span style="color:#f92672">&amp;&amp;</span>
      <span style="color:#a6e22e">k</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;pragma&#39;</span>
    ) {
      <span style="color:#a6e22e">expose</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">expose</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;,&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">k</span>
    }
  }

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">acehOld</span>) {
    <span style="color:#a6e22e">expose</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">expose</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;,--s&#39;</span>
    <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;--t&#39;</span>, <span style="color:#e6db74">&#39;1&#39;</span>)
  }

  <span style="color:#75715e">// verify
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">rawLen</span>) {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newLen</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">resHdrOld</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;content-length&#39;</span>) <span style="color:#f92672">||</span> <span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">badLen</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">rawLen</span> <span style="color:#f92672">!==</span> <span style="color:#a6e22e">newLen</span>)

    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">badLen</span>) {
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">retryTimes</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">MAX_RETRY</span>) {
        <span style="color:#a6e22e">urlObj</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">parseYtVideoRedir</span>(<span style="color:#a6e22e">urlObj</span>, <span style="color:#a6e22e">newLen</span>, <span style="color:#a6e22e">res</span>)
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">urlObj</span>) {
          <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">proxy</span>(<span style="color:#a6e22e">urlObj</span>, <span style="color:#a6e22e">reqInit</span>, <span style="color:#a6e22e">acehOld</span>, <span style="color:#a6e22e">rawLen</span>, <span style="color:#a6e22e">retryTimes</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
        }
      }
      <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">makeRes</span>(<span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">body</span>, <span style="color:#ae81ff">400</span>, {
        <span style="color:#e6db74">&#39;--error&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">`bad len: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">newLen</span><span style="color:#e6db74">}</span><span style="color:#e6db74">, except: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">rawLen</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>,
        <span style="color:#e6db74">&#39;access-control-expose-headers&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;--error&#39;</span>,
      })
    }

    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">retryTimes</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>) {
      <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;--retry&#39;</span>, <span style="color:#a6e22e">retryTimes</span>)
    }
  }

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">status</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>

  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;access-control-expose-headers&#39;</span>, <span style="color:#a6e22e">expose</span>)
  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;access-control-allow-origin&#39;</span>, <span style="color:#e6db74">&#39;*&#39;</span>)
  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;--s&#39;</span>, <span style="color:#a6e22e">status</span>)
  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;--ver&#39;</span>, <span style="color:#a6e22e">JS_VER</span>)

  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#e6db74">&#39;content-security-policy&#39;</span>)
  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#e6db74">&#39;content-security-policy-report-only&#39;</span>)
  <span style="color:#a6e22e">resHdrNew</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#e6db74">&#39;clear-site-data&#39;</span>)

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">301</span> <span style="color:#f92672">||</span>
      <span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">302</span> <span style="color:#f92672">||</span>
      <span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">303</span> <span style="color:#f92672">||</span>
      <span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">307</span> <span style="color:#f92672">||</span>
      <span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">308</span>
  ) {
    <span style="color:#a6e22e">status</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">status</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>
  }

  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Response</span>(<span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">body</span>, {
    <span style="color:#a6e22e">status</span>,
    <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">resHdrNew</span>,
  })
}


<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {URL} urlObj 
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">isYtUrl</span>(<span style="color:#a6e22e">urlObj</span>) {
  <span style="color:#66d9ef">return</span> (
    <span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">host</span>.<span style="color:#a6e22e">endsWith</span>(<span style="color:#e6db74">&#39;.googlevideo.com&#39;</span>) <span style="color:#f92672">&amp;&amp;</span>
    <span style="color:#a6e22e">urlObj</span>.<span style="color:#a6e22e">pathname</span>.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">&#39;/videoplayback&#39;</span>)
  )
}

<span style="color:#75715e">/**
</span><span style="color:#75715e"> * @param {URL} urlObj 
</span><span style="color:#75715e"> * @param {number} newLen 
</span><span style="color:#75715e"> * @param {Response} res 
</span><span style="color:#75715e"> */</span>
<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">parseYtVideoRedir</span>(<span style="color:#a6e22e">urlObj</span>, <span style="color:#a6e22e">newLen</span>, <span style="color:#a6e22e">res</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">newLen</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">2000</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>
  }
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">isYtUrl</span>(<span style="color:#a6e22e">urlObj</span>)) {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>
  }
  <span style="color:#66d9ef">try</span> {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">data</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">text</span>()
    <span style="color:#a6e22e">urlObj</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">data</span>)
  } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">err</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>
  }
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">isYtUrl</span>(<span style="color:#a6e22e">urlObj</span>)) {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">urlObj</span>
}
</code></pre></div><p>看这：<a href="https://proxy.raycoder.me/">Demo传送门</a></p>
<hr>
<p>2020/04/06更新：</p>
<p>更正，10万请求。</p>
]]></description><category domain="https://raycoder.me/categories/%E4%BB%A3%E7%90%86/">代理</category><category domain="https://raycoder.me/tags/%E4%BB%A3%E7%90%86/">代理</category><category domain="https://raycoder.me/tags/cloudflare/">Cloudflare</category><category domain="https://raycoder.me/tags/cdn/">CDN</category><category domain="https://raycoder.me/tags/workers/">Workers</category></item><item><title>Python中的with关键字使用方法？</title><link>https://raycoder.me/p/python-with/</link><guid isPermaLink="true">https://raycoder.me/p/python-with/</guid><pubDate>Wed, 01 Apr 2020 10:03:10 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
<p><strong>本文首发于<a href="https://raycoder.me/p/python-with/">Ray's Blog</a></strong></p>
</blockquote>
<p>Python中有一种操作叫做<code>打开文件</code>，代码如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> f <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#39;/foo/bar.txt&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
<span style="color:#f92672">&gt;&gt;&gt;</span> f<span style="color:#f92672">.</span>close()
<span style="color:#f92672">&gt;&gt;&gt;</span> data
<span style="color:#e6db74">&#39;Hello World!&#39;</span>
</code></pre></div><p>这样，你就从<code>/foo/bar.txt</code>这个文本文件中读取到了它的文本：<code>Hello World!</code></p>
<p>但是，这样处理有一些问题：</p>
<ol>
<li>可能在处理完文本后忘记关闭文件？</li>
<li>可能在读取时出现错误？</li>
</ol>
<p>这时，<code>try...except...finally...</code>语句就派上了用场：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">try</span>:
    f <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#39;/foo/bar.txt&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>)
<span style="color:#66d9ef">except</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Fail to open /foo/bar.txt&#39;</span>)
    exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
<span style="color:#66d9ef">finally</span>:
    f<span style="color:#f92672">.</span>close()
</code></pre></div><p>虽然这段代码运行良好，但是太冗长了。</p>
<p>这时，<code>with</code>语句（上下文管理器器，添加于Python2.5，在2.5时是试验性的，需要<code>from __future__ import with_statement</code>。在2.5之前的版本无法使用。）就可以大显身手：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;/foo/bar.txt&#39;</span>) <span style="color:#66d9ef">as</span> f:
    data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</code></pre></div><p>这里没有错误处理器，没有<code>f = open('/foo/bar.txt', 'r')</code>，也没有读取完文件后的<code>f.close()</code>。这段代码与<code>try...except...finally...</code>实现了相同的功能，但是代码却相应的短了许多。</p>
<p>除了读取文件，许多标准模块也含有上下文管理器，这意味着它们也可以使用<code>with</code>语句（以<code>threading</code>模块为例）：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>

<span style="color:#f92672">from</span> atexit <span style="color:#f92672">import</span> register
<span style="color:#f92672">from</span> random <span style="color:#f92672">import</span> randrange
<span style="color:#f92672">from</span> threading <span style="color:#f92672">import</span> Thread, Lock, currentThread
<span style="color:#f92672">from</span> time <span style="color:#f92672">import</span> sleep, ctime

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CleanOutputSet</span>(set):
    <span style="color:#66d9ef">def</span> __str__(self):
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;, &#39;</span><span style="color:#f92672">.</span>join(x <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> self)

lock <span style="color:#f92672">=</span> Lock()
loops <span style="color:#f92672">=</span> (randrange(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(randrange(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">7</span>)))
remaining <span style="color:#f92672">=</span> CleanOutputSet()

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">loop</span>(nsec):
    myname <span style="color:#f92672">=</span> currentThread()<span style="color:#f92672">.</span>name
    <span style="color:#66d9ef">with</span> lock:
    	remaining<span style="color:#f92672">.</span>add(myname)
    	<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;[{0}] Started {1}&#39;</span><span style="color:#f92672">.</span>format(ctime(), myname))
    sleep(nsec)
    <span style="color:#66d9ef">with</span> lock:
    	remaining<span style="color:#f92672">.</span>remove(myname)
    	<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;[{0}] Completed {1} ({2} secs)&#39;</span><span style="color:#f92672">.</span>format(ctime(), myname, nsec))
    	<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;    (remaining: {0})&#39;</span><span style="color:#f92672">.</span>format(remaining <span style="color:#f92672">or</span> <span style="color:#e6db74">&#39;NONE&#39;</span>))

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_main</span>():
    <span style="color:#66d9ef">for</span> pause <span style="color:#f92672">in</span> loops:
        Thread(target<span style="color:#f92672">=</span>loop, args<span style="color:#f92672">=</span>(pause,))<span style="color:#f92672">.</span>start()

<span style="color:#a6e22e">@register</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_atexit</span>():
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;all DONE at:&#39;</span>, ctime())

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    _main()
</code></pre></div><p>这个例子派生了随机个的线程，使用<code>with</code>语句实现锁的锁定与释放。</p>
<p>那么，上下文管理器是怎么实现的呢？它通过类里面的特殊方法——<code>__enter__</code>和<code>__exit__</code>。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyClass</span>():
    <span style="color:#66d9ef">def</span> __init__(self,name):
        self<span style="color:#f92672">.</span>name<span style="color:#f92672">=</span>name
    <span style="color:#66d9ef">def</span> __enter__(self):
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;到达__enter__&#34;</span>)
        <span style="color:#66d9ef">return</span> self
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">printName</span>(self):
        <span style="color:#66d9ef">print</span>(self<span style="color:#f92672">.</span>name)
    <span style="color:#66d9ef">def</span> __exit__(self, type, value, traceback):
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;到达__exit__&#34;</span>)
        <span style="color:#66d9ef">print</span>(type, value)
<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    <span style="color:#66d9ef">with</span> MyClass(<span style="color:#e6db74">&#39;foo-bar&#39;</span>) <span style="color:#66d9ef">as</span> test:
        test<span style="color:#f92672">.</span>printName()

<span style="color:#f92672">======================</span> RESTART: test<span style="color:#f92672">.</span>py <span style="color:#f92672">======================</span>
<span style="color:#960050;background-color:#1e0010">到达</span>__enter__
The name <span style="color:#f92672">is</span>:  foo<span style="color:#f92672">-</span>bar
<span style="color:#960050;background-color:#1e0010">到达</span>__exit__
<span style="color:#f92672">&gt;&gt;&gt;</span> 
</code></pre></div>]]></description><category domain="https://raycoder.me/categories/python/">Python</category><category domain="https://raycoder.me/categories/python%E5%85%B3%E9%94%AE%E5%AD%97/">Python关键字</category><category domain="https://raycoder.me/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Python学习笔记</category><category domain="https://raycoder.me/tags/python/">Python</category><category domain="https://raycoder.me/tags/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Python学习笔记</category><category domain="https://raycoder.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/">多线程</category></item><item><title>【刻在基因里的序列号变了？】Bilibili采用新的稿件编号！AV与BV互相转化的方法！</title><link>https://raycoder.me/p/av-and-bv/</link><guid isPermaLink="true">https://raycoder.me/p/av-and-bv/</guid><pubDate>Tue, 31 Mar 2020 15:57:37 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
<p><strong>本文首发于<a href="https://raycoder.me/p/av-and-bv/">Ray's Blog</a></strong></p>
</blockquote>
<p>最近B站把AV号改成了BV号！<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>以后B站没有AV了！[手动狗头]</p>
<p>更改以前的AV号简单好记，都是<code>AV170001</code>一类——根据发布顺序依次往下计数。</p>
<p>更改以后的BV号完全颠覆，形如<code>BV17x411w7KC</code>，区分大小写——转换成的AV号是完全随机的。</p>
<p>说实话，个人认为这个改变是为了防止一些恶意爬虫。</p>
<p>虽然B站官方也有提到，以后仍然可以使用AV号来观看视频<heimu>，不过，刻在基因里的AV号变了，老青结工了</heimu>，但是这两个序列号如何互相转化呢？</p>
<p>当然，AV/BV同时工作就说明：B站有一个接口！</p>
<p>BVID接口：<code>https://api.bilibili.com/x/web-interface/view?bvid=&lt;BVID&gt;</code></p>
<p>AID接口：<code>https://api.bilibili.com/x/web-interface/view?Aid=&lt;AID&gt;</code></p>
<p>知乎上<a href="https://www.zhihu.com/people/-._.-">@mcfx</a>大佬已经给出了回答：<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>他写了一些代码，我们来分析一下。（一些修改）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">table <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&#39;</span> <span style="color:#75715e"># base58的字符对应表——从0~57，没有大写O，数字0，小写的L和大写的i，非标准。</span>
tr <span style="color:#f92672">=</span> dict(zip(table, range(<span style="color:#ae81ff">58</span>))) <span style="color:#75715e"># 建立对应字典，形如{&#39;f&#39;: 0, &#39;Z&#39;: 1...}</span>
s <span style="color:#f92672">=</span> [<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">6</span>]
xor <span style="color:#f92672">=</span> <span style="color:#ae81ff">177451812</span>
add <span style="color:#f92672">=</span> <span style="color:#ae81ff">8728348608</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">bv2av</span>(x):
	r<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
	<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">6</span>):
		r<span style="color:#f92672">+=</span>tr[x[s[i]]]<span style="color:#f92672">*</span><span style="color:#ae81ff">58</span><span style="color:#f92672">**</span>i
	<span style="color:#66d9ef">return</span> (r<span style="color:#f92672">-</span>add)<span style="color:#f92672">^</span>xor

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">av2bv</span>(x):
	x<span style="color:#f92672">=</span>(x<span style="color:#f92672">^</span>xor)<span style="color:#f92672">+</span>add
	r<span style="color:#f92672">=</span>list(<span style="color:#e6db74">&#39;BV1  4 1 7  &#39;</span>)
	<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">6</span>):
		r[s[i]]<span style="color:#f92672">=</span>table[x<span style="color:#f92672">//</span><span style="color:#ae81ff">58</span><span style="color:#f92672">**</span>i<span style="color:#f92672">%</span><span style="color:#ae81ff">58</span>]
	<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(r)
</code></pre></div><p><strong>主要修改：</strong></p>
<p><strong>1.使用zip()函数，优化了运行效率；</strong></p>
<p>等待补充</p>
<hr>
<p>如果算法没猜错，可以保证在 av 号 $&lt; 2^{27}$ 时正确，同时应该在 $&lt; 2^{30}$ 时也是正确的。此代码以 WTFPL 开源。</p>
<p>UPD：之前的代码中，所有数位都被用到是乱凑的，实际上并不需要，目前只要低 6 位就足够了。（更大的 av 号需要 64 位整数存储，但是 b 站现在使用的应该还是 32 位整数，所以应该还要很久）</p>
<p>发现的方法：</p>
<p>首先从各种渠道的信息来看，应该是 base58 编码的。设 x 是一个钦定的 av 号，查询 $\ 58k+x,58^2k+x,58^3k+x,58^4k+x\left(k \in Z\right)$ 这些 av 号对应的 bv 号，发现 bv 号的第 12、11、4、9、5 位分别会变化。所以猜测这些是 58 进制下的相应位。</p>
<p>但是直接 base58 是不行的，所以猜测异或了一个大数，并且 base58 的字符表可能打乱了。经过实验，bv 号最低位相同的数，av 号的奇偶性相同，这一定程度上印证了之前的猜想。</p>
<p>接下来找了一些 av 号 x，满足 x 和 x+1 对应 bv 号的第 11 位不同。设异或的数为 X，那么 $\ \left\lfloor\frac{X\oplus x}{58}\right\rfloor\neq \left\lfloor\frac{X\oplus (x+1)}{58}\right\rfloor$ （ $\ \oplus$  表示异或）。</p>
<p>由于 av 号（除了最新的少量视频）最多只有 27 bits，所以可以设 $\ X=2^{27}a+b(0\le b&lt;2^{27})$ 。然后可以发现 $\ X$ 只和 $\ 2^{27}a\bmod 58$ 和 $\ b$ 有关，那么可以枚举这两个值（一共 $\ 2^{27}\cdot 58=7784628224$ 种情况）然后使用上面的式子检查，就能得到若干可能的 $\ 2^{27}a\bmod 58$ 和 $\ b$ 。</p>
<p>这里我得到的可能值如下：（左边是 $\ 2^{27}a\bmod 58$ ，右边是 $\ b$ ）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">22 90983642
22 90983643
50 43234084
50 43234085
</code></pre></div><p>有奇有偶是因为异或 1 之后也能找到轮换表。而 $\ 90983642+43234085=2^{27}-1$ 则使得模 58 的余数刚好变成$\ 2^{27}-1$减它。</p>
<p>我取了 b=43234084，然后处理最低位，可以得到一个字符表，即 <code>fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF</code>。</p>
<p>对于更高位，实际上还需要知道 $\ 2^{27}a\bmod 58^2,2^{27}a\bmod 58^3,\dots$ ，这些值也可以 枚举 58 次得到，最后我得到的值是 $\ 2^{27}a\bmod 58^4=1749968$ 。</p>
<p>这时我发现，每一位的字符表是相同的（实际上只对 b=43234084 是这样的），然后再微调一下参数（上面代码中的两个 magic number 就相当于这里的 $\ a,b$ ），最后处理了一下 $\ \ge 2^{27}$ 的情况就得到了这份代码。</p>
<p>（转自知乎<a href="https://www.zhihu.com/people/-._.-">@mcfx</a>大佬给出的回答）</p>
<p>根据倍步长跳的实验显示：其变动的优先级为：</p>
<p>后两位＞第4位（每4096一变，但是由于58×58＜4096，肯定又要借用其他位的变化）＞第9位（每131072一变，相当于第4位每变32次第9位才会变）＞第5位（每2097152一变）。</p>
<p>这也能解释为什么第5位排布不均匀——没排完啊！</p>
<p>修改版Base58表：</p>
<table>
<thead>
<tr>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
<th align="center">6</th>
<th align="center">7</th>
<th align="center">8</th>
<th align="center">9</th>
<th align="center">10</th>
<th align="center">11</th>
<th align="center">12</th>
<th align="center">13</th>
<th align="center">14</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">f</td>
<td align="center">Z</td>
<td align="center">o</td>
<td align="center">d</td>
<td align="center">R</td>
<td align="center">9</td>
<td align="center">X</td>
<td align="center">Q</td>
<td align="center">D</td>
<td align="center">S</td>
<td align="center">U</td>
<td align="center">m</td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center">y</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">16</td>
<td align="center">17</td>
<td align="center">18</td>
<td align="center">19</td>
<td align="center">20</td>
<td align="center">21</td>
<td align="center">22</td>
<td align="center">23</td>
<td align="center">24</td>
<td align="center">25</td>
<td align="center">26</td>
<td align="center">27</td>
<td align="center">28</td>
<td align="center">29</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">k</td>
<td align="center">r</td>
<td align="center">6</td>
<td align="center">z</td>
<td align="center">B</td>
<td align="center">q</td>
<td align="center">i</td>
<td align="center">v</td>
<td align="center">e</td>
<td align="center">Y</td>
<td align="center">a</td>
<td align="center">h</td>
<td align="center">8</td>
<td align="center">b</td>
</tr>
<tr>
<td align="center">30</td>
<td align="center">31</td>
<td align="center">32</td>
<td align="center">33</td>
<td align="center">34</td>
<td align="center">35</td>
<td align="center">36</td>
<td align="center">37</td>
<td align="center">38</td>
<td align="center">39</td>
<td align="center">40</td>
<td align="center">41</td>
<td align="center">42</td>
<td align="center">43</td>
<td align="center">44</td>
</tr>
<tr>
<td align="center">t</td>
<td align="center">4</td>
<td align="center">x</td>
<td align="center">s</td>
<td align="center">W</td>
<td align="center">p</td>
<td align="center">H</td>
<td align="center">n</td>
<td align="center">J</td>
<td align="center">E</td>
<td align="center">7</td>
<td align="center">j</td>
<td align="center">L</td>
<td align="center">5</td>
<td align="center">V</td>
</tr>
<tr>
<td align="center">45</td>
<td align="center">46</td>
<td align="center">47</td>
<td align="center">48</td>
<td align="center">49</td>
<td align="center">50</td>
<td align="center">51</td>
<td align="center">52</td>
<td align="center">53</td>
<td align="center">54</td>
<td align="center">55</td>
<td align="center">56</td>
<td align="center">57</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">G</td>
<td align="center">3</td>
<td align="center">g</td>
<td align="center">u</td>
<td align="center">M</td>
<td align="center">T</td>
<td align="center">K</td>
<td align="center">N</td>
<td align="center">P</td>
<td align="center">A</td>
<td align="center">w</td>
<td align="center">c</td>
<td align="center">F</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody>
</table>
<p>事实上，如果不采用后端，直接浏览器控制台输入<code>aid</code>，<code>bvid</code>也是可以的：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200331165001.png" alt=""></p>
<p>附转换器：</p>
<iframe src="/tools/bv2av/index.html" width="100%" height="400" scrolling="0" frameborder="0"><br></iframe>
<p>顺便放上视频。</p>
<div id="player1"></div>
<br>
<div id="player2"></div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/FFRaycoder/cdn@latest/static/css/DPlayer.min.css" />
<script type="text/javascript" src="https://cdn.jsdelivr.net/gh/FFRaycoder/cdn@latest/static/js/flv.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/gh/FFRaycoder/cdn@latest/static/js/DPlayer.min.js"></script>
<script type="text/javascript">
const dp = new DPlayer({
    container: document.getElementById('player1'),
    video: {
        url: 'https://cdn.jsdelivr.net/gh/FFRaycoder/cdn@latest/video/av-bv/AV2BV.flv',
        type: 'flv'
    },
});
</script>
<script type="text/javascript">
const dp2 = new DPlayer({
    container: document.getElementById('player2'),
    video: {
        url: 'https://cdn.jsdelivr.net/gh/FFRaycoder/cdn@latest/video/av-bv/BV2AV.flv',
        type: 'flv'
    },
});
</script>
<hr>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://www.bilibili.com/read/cv5167957">【升级公告】AV号全面升级至BV号 | Bilibili</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://www.zhihu.com/question/381784377/answer/1099438784">如何看待 2020 年 3 月 23 日哔哩哔哩将稿件的「av 号」变更为「BV 号」？ | 知乎</a> <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>]]></description><category domain="https://raycoder.me/categories/%E7%AE%97%E6%B3%95/">算法</category><category domain="https://raycoder.me/tags/%E7%AE%97%E6%B3%95/">算法</category><category domain="https://raycoder.me/tags/bilibili/">Bilibili</category></item><item><title>旁门左道之使用Leancloud搭建网站！</title><link>https://raycoder.me/p/build-website-with-leancloud/</link><guid isPermaLink="true">https://raycoder.me/p/build-website-with-leancloud/</guid><pubDate>Tue, 31 Mar 2020 13:10:36 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
<p><strong>本文首发于<a href="https://raycoder.me/p/build-website-with-leancloud/">Ray's Blog</a></strong></p>
</blockquote>
<p>Leancloud也可以搭建网站？</p>
<p>是的！<a href="https://leancloud.app">Leancloud</a>，就是那个我们熟知的<code>Valine</code>数据存储，可以搭建网站！有使用<code>Valine Admin</code>的同学可能也会发现，部署的Admin实际上也是一个<em class="emphasis-point">使用JS生成的页面</em>。那么很多人可能就会想要使用Leancloud去搭建网站——怎么实现呢？（我刚刚放的链接是国际版的Leancloud，国内版的<a href="https://leancloud.cn">戳这</a>，需要实名认证。推荐国际版。）</p>
<p>事实上，你只需要推送一个网页到一个Git仓库（GitHub、Gitee、Coding等皆可），然后使用<code>Leancloud云引擎</code>功能部署网页。<red>注意！我没有说是静态网页！Leancloud支持<code>PHP</code>！</red>也就是说，你可以把Leancloud当作一个免费的空间来搭建你的博客——当然，稳定性不敢保证，Leancloud开发版每天会强制休眠6小时。</p>
<p>首先先创建一个应用，选择开发版~自己整罢！</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200331135141.png" alt=""></p>
<p>然后选择<code>&lt;你创建的应用&gt;--&gt;云引擎--&gt;设置</code>，在<code>源码部署--&gt;代码库</code>里填写你的Git仓库。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200331134820.png" alt=""></p>
<p>当然，不要忘记填写Web主机域名——这个是我们之后预览网页用的！</p>
<p>然后选择<code>部署</code>，再点击<code>Git源码部署</code>！（假如你有能力，也可以选择命令行部署，使用Webhook自动部署）</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200331135315.png" alt=""></p>
<p>然后，打开你填写的Web主机域名，享用吧！</p>]]></description><category domain="https://raycoder.me/categories/%E5%85%8D%E8%B4%B9%E7%A9%BA%E9%97%B4/">免费空间</category><category domain="https://raycoder.me/tags/%E5%85%8D%E8%B4%B9%E7%A9%BA%E9%97%B4/">免费空间</category><category domain="https://raycoder.me/tags/%E7%BD%91%E7%AB%99/">网站</category></item><item><title>Python中的yield关键字分析：一个Generator</title><link>https://raycoder.me/p/python-yield/</link><guid isPermaLink="true">https://raycoder.me/p/python-yield/</guid><pubDate>Fri, 27 Mar 2020 13:18:41 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>写作不易，资瓷一下呗！个人博客：<a href="https://raycoder.me">https://raycoder.me</a></strong></p>
<p><strong>本文首发于<a href="https://raycoder.me/p/python-yield/">Ray's Blog</a></strong></p>
</blockquote>
<p>我们先来康一段代码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count</span>(n):
		<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, n<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
			<span style="color:#66d9ef">print</span>(i)

<span style="color:#f92672">&gt;&gt;&gt;</span> count(<span style="color:#ae81ff">5</span>)
<span style="color:#ae81ff">1</span>
<span style="color:#ae81ff">2</span>
<span style="color:#ae81ff">3</span>
<span style="color:#ae81ff">4</span>
<span style="color:#ae81ff">5</span>
</code></pre></div><p>这一小段代码执行了计数，输出了1-5。</p>
<p>不过，有时我们会有一些想♂FA，想要每次获取下一个数，如第一次执行时给你返回1，第二次返回2，第三次返回3……如此如此。</p>
<p>你可能会这么做：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">addone</span>():
		<span style="color:#66d9ef">global</span> n
		n<span style="color:#f92672">+=</span><span style="color:#ae81ff">1</span>
		<span style="color:#66d9ef">print</span>(n)

<span style="color:#f92672">&gt;&gt;&gt;</span> addone()
<span style="color:#ae81ff">1</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> n
<span style="color:#ae81ff">1</span>
</code></pre></div><p>但这样又暴露了一个缺点：<em class="emphasis-point">我们使用了一个全局变量</em>。想要避免这种缺点又要实现计数的功能，<code>yield</code>就派上用场了。</p>
<p>想要实现<code>Generator</code>的功能，只需要对代码进行一处改动：把<code>print()</code>改成<code>yield</code>即可。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count</span>(n):
		<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, n<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
			<span style="color:#66d9ef">yield</span> i

<span style="color:#f92672">&gt;&gt;&gt;</span> c <span style="color:#f92672">=</span> count(<span style="color:#ae81ff">5</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> c
<span style="color:#f92672">&lt;</span>generator object addone at <span style="color:#ae81ff">0x000002329F851048</span><span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> 
</code></pre></div><p>你会发现，这个<code>c</code>的类型像是一个对象了。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> c <span style="color:#f92672">=</span> count(<span style="color:#ae81ff">5</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> next(c)
<span style="color:#ae81ff">1</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> next(c)
<span style="color:#ae81ff">2</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> next(c)
<span style="color:#ae81ff">3</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> next(c)
<span style="color:#ae81ff">4</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> next(c)
<span style="color:#ae81ff">5</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> next(c)
Traceback (most recent call last):
  File <span style="color:#e6db74">&#34;&lt;pyshell#18&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
    next(c)
<span style="color:#a6e22e">StopIteration</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> 
</code></pre></div><p>我们使用了<code>next()</code>内置函数让<code>Generator</code>进行下一次迭代。由此可见，<em class="emphasis-point">yield像是一个类似于return的迭代器</em>。</p>
<p>再来一个示例，生成斐波那契数列：</p>
<h5 id="1-简单输出斐波那契數列前-n-个数">1. 简单输出斐波那契數列前 N 个数</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fab</span>(max): 
   n, a, b <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span> 
   <span style="color:#66d9ef">while</span> n <span style="color:#f92672">&lt;</span> max: 
       <span style="color:#66d9ef">print</span>(b)
       a, b <span style="color:#f92672">=</span> b, a <span style="color:#f92672">+</span> b 
       n <span style="color:#f92672">=</span> n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</code></pre></div><p>执行 fab(5)，我们可以得到如下输出：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> fab(<span style="color:#ae81ff">5</span>)
<span style="color:#ae81ff">1</span>
<span style="color:#ae81ff">1</span>
<span style="color:#ae81ff">2</span>
<span style="color:#ae81ff">3</span>
<span style="color:#ae81ff">5</span>
</code></pre></div><p>结果没有问题，但有经验的开发者会指出，直接在 fab 函数中用 print 打印数字会导致该函数可复用性较差，因为 fab 函数返回 None，其他函数无法获得该函数生成的数列。</p>
<p>要提高 fab 函数的可复用性，最好不要直接打印出数列，而是返回一个 List。以下是 fab 函数改写后的第二个版本：</p>
<h5 id="2-输出斐波那契數列前-n-个数第二版">2. 输出斐波那契數列前 N 个数第二版</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fab</span>(max): 
   n, a, b <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span> 
   L <span style="color:#f92672">=</span> [] 
   <span style="color:#66d9ef">while</span> n <span style="color:#f92672">&lt;</span> max: 
       L<span style="color:#f92672">.</span>append(b) 
       a, b <span style="color:#f92672">=</span> b, a <span style="color:#f92672">+</span> b 
       n <span style="color:#f92672">=</span> n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> 
   <span style="color:#66d9ef">return</span> L
</code></pre></div><p>可以使用如下方式打印出 fab 函数返回的 List：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> fab(<span style="color:#ae81ff">5</span>): 
<span style="color:#f92672">...</span>     <span style="color:#66d9ef">print</span>(n)
<span style="color:#f92672">...</span> 
<span style="color:#ae81ff">1</span> 
<span style="color:#ae81ff">1</span> 
<span style="color:#ae81ff">2</span> 
<span style="color:#ae81ff">3</span> 
<span style="color:#ae81ff">5</span>
</code></pre></div><p>改写后的 fab 函数通过返回 List 能满足复用性的要求，但是更有经验的开发者会指出，该函数在运行中占用的内存会随着参数 max 的增大而增大，如果要控制内存占用，最好不要用 List</p>
<p>来保存中间结果，而是通过 iterable 对象来迭代。例如，在 Python2.x 中，代码：</p>
<h5 id="清单-3-通过-iterable-对象来迭代">清单 3. 通过 iterable 对象来迭代</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1000</span>): <span style="color:#66d9ef">pass</span>
</code></pre></div><p>会导致生成一个 1000 个元素的 List，而代码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> xrange(<span style="color:#ae81ff">1000</span>): <span style="color:#66d9ef">pass</span>
</code></pre></div><p>则不会生成一个 1000 个元素的 List，而是在每次迭代中返回下一个数值，内存空间占用很小。因为 xrange 不返回 List，而是返回一个 iterable 对象。</p>
<p>利用 iterable 我们可以把 fab 函数改写为一个支持 iterable 的 class，以下是第三个版本的 Fab：</p>
<h5 id="清单-4-第三个版本">清单 4. 第三个版本</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Fab</span>(object): 
 
   <span style="color:#66d9ef">def</span> __init__(self, max): 
       self<span style="color:#f92672">.</span>max <span style="color:#f92672">=</span> max 
       self<span style="color:#f92672">.</span>n, self<span style="color:#f92672">.</span>a, self<span style="color:#f92672">.</span>b <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span> 
 
   <span style="color:#66d9ef">def</span> __iter__(self): 
       <span style="color:#66d9ef">return</span> self 
 
   <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">next</span>(self): 
       <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>n <span style="color:#f92672">&lt;</span> self<span style="color:#f92672">.</span>max: 
           r <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>b 
           self<span style="color:#f92672">.</span>a, self<span style="color:#f92672">.</span>b <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>b, self<span style="color:#f92672">.</span>a <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>b 
           self<span style="color:#f92672">.</span>n <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> 
           <span style="color:#66d9ef">return</span> r 
       <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">StopIteration</span>()
</code></pre></div><p>Fab 类通过 next() 不断返回数列的下一个数，内存占用始终为常数：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> Fab(<span style="color:#ae81ff">5</span>): 
<span style="color:#f92672">...</span>     <span style="color:#66d9ef">print</span>(n)
<span style="color:#f92672">...</span> 
<span style="color:#ae81ff">1</span> 
<span style="color:#ae81ff">1</span> 
<span style="color:#ae81ff">2</span> 
<span style="color:#ae81ff">3</span> 
<span style="color:#ae81ff">5</span>
</code></pre></div><p>然而，使用 class 改写的这个版本，代码远远没有第一版的 fab 函数来得简洁。如果我们想要保持第一版 fab 函数的简洁性，同时又要获得 iterable 的效果，yield 就派上用场了：</p>
<h5 id="清单-5-使用-yield-的第四版">清单 5. 使用 yield 的第四版</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fab</span>(max): 
    n, a, b <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span> 
    <span style="color:#66d9ef">while</span> n <span style="color:#f92672">&lt;</span> max: 
        <span style="color:#66d9ef">yield</span> b 
        <span style="color:#75715e"># print(b)</span>
        a, b <span style="color:#f92672">=</span> b, a <span style="color:#f92672">+</span> b 
        n <span style="color:#f92672">=</span> n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> 
</code></pre></div><p>第四个版本的 fab 和第一版相比，仅仅把 print b 改为了 yield b，就在保持简洁性的同时获得了 iterable 的效果。</p>
<p>调用第四版的 fab 和第二版的 fab 完全一致：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> fab(<span style="color:#ae81ff">5</span>): 
<span style="color:#f92672">...</span>     <span style="color:#66d9ef">print</span>(n)
<span style="color:#f92672">...</span> 
<span style="color:#ae81ff">1</span> 
<span style="color:#ae81ff">1</span> 
<span style="color:#ae81ff">2</span> 
<span style="color:#ae81ff">3</span> 
<span style="color:#ae81ff">5</span>
</code></pre></div><p>简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。</p>
<p>也可以手动调用 fab(5) 的 next() 方法（因为 fab(5) 是一个 generator 对象，该对象具有 next() 方法），这样我们就可以更清楚地看到 fab 的执行流程：</p>
<h5 id="清单-6-执行流程">清单 6. 执行流程</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> f <span style="color:#f92672">=</span> fab(<span style="color:#ae81ff">5</span>) 
<span style="color:#f92672">&gt;&gt;&gt;</span> f<span style="color:#f92672">.</span>next() 
<span style="color:#ae81ff">1</span> 
<span style="color:#f92672">&gt;&gt;&gt;</span> f<span style="color:#f92672">.</span>next() 
<span style="color:#ae81ff">1</span> 
<span style="color:#f92672">&gt;&gt;&gt;</span> f<span style="color:#f92672">.</span>next() 
<span style="color:#ae81ff">2</span> 
<span style="color:#f92672">&gt;&gt;&gt;</span> f<span style="color:#f92672">.</span>next() 
<span style="color:#ae81ff">3</span> 
<span style="color:#f92672">&gt;&gt;&gt;</span> f<span style="color:#f92672">.</span>next() 
<span style="color:#ae81ff">5</span> 
<span style="color:#f92672">&gt;&gt;&gt;</span> f<span style="color:#f92672">.</span>next() 
Traceback (most recent call last): 
 File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span> 
<span style="color:#a6e22e">StopIteration</span>
</code></pre></div><p>当函数执行结束时，generator 自动抛出 StopIteration 异常，表示迭代完成。在 for 循环里，无需处理 StopIteration 异常，循环会正常结束。</p>
<p>我们可以得出以下结论：</p>
<p>一个带有 yield 的函数就是一个 generator，它和普通函数不同，生成一个 generator 看起来像函数调用，但不会执行任何函数代码，直到对其调用 next()（在 for 循环中会自动调用 next()）才开始执行。虽然执行流程仍按函数的流程执行，但每执行到一个 yield 语句就会中断，并返回一个迭代值，下次执行时从 yield 的下一个语句继续执行。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。</p>
<p>yield 的好处是显而易见的，把一个函数改写为一个 generator 就获得了迭代能力，比起用类的实例保存状态来计算下一个 next() 的值，不仅代码简洁，而且执行流程异常清晰。</p>
<p>如何判断一个函数是否是一个特殊的 generator 函数？可以利用 isgeneratorfunction 判断：</p>
<h5 id="清单-7-使用-isgeneratorfunction-判断">清单 7. 使用 isgeneratorfunction 判断</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> inspect <span style="color:#f92672">import</span> isgeneratorfunction 
<span style="color:#f92672">&gt;&gt;&gt;</span> isgeneratorfunction(fab) 
True
</code></pre></div><p>要注意区分 fab 和 fab(5)，fab 是一个 generator function，而 fab(5) 是调用 fab 返回的一个 generator，好比类的定义和类的实例的区别：</p>
<h5 id="清单-8-类的定义和类的实例">清单 8. 类的定义和类的实例</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> types 
<span style="color:#f92672">&gt;&gt;&gt;</span> isinstance(fab, types<span style="color:#f92672">.</span>GeneratorType) 
False 
<span style="color:#f92672">&gt;&gt;&gt;</span> isinstance(fab(<span style="color:#ae81ff">5</span>), types<span style="color:#f92672">.</span>GeneratorType) 
True
</code></pre></div><p>fab 是无法迭代的，而 fab(5) 是可迭代的：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> Iterable 
<span style="color:#f92672">&gt;&gt;&gt;</span> isinstance(fab, Iterable) 
False 
<span style="color:#f92672">&gt;&gt;&gt;</span> isinstance(fab(<span style="color:#ae81ff">5</span>), Iterable) 
True
</code></pre></div><p>每次调用 fab 函数都会生成一个新的 generator 实例，各实例互不影响：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> f1 <span style="color:#f92672">=</span> fab(<span style="color:#ae81ff">3</span>) 
<span style="color:#f92672">&gt;&gt;&gt;</span> f2 <span style="color:#f92672">=</span> fab(<span style="color:#ae81ff">5</span>) 
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;f1:&#39;</span>, f1<span style="color:#f92672">.</span>next())
f1: <span style="color:#ae81ff">1</span> 
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;f2:&#39;</span>, f2<span style="color:#f92672">.</span>next())
f2: <span style="color:#ae81ff">1</span> 
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;f1:&#39;</span>, f1<span style="color:#f92672">.</span>next())
f1: <span style="color:#ae81ff">1</span> 
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;f2:&#39;</span>, f2<span style="color:#f92672">.</span>next())
f2: <span style="color:#ae81ff">1</span> 
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;f1:&#39;</span>, f1<span style="color:#f92672">.</span>next())
f1: <span style="color:#ae81ff">2</span> 
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;f2:&#39;</span>, f2<span style="color:#f92672">.</span>next())
f2: <span style="color:#ae81ff">2</span> 
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;f2:&#39;</span>, f2<span style="color:#f92672">.</span>next())
f2: <span style="color:#ae81ff">3</span> 
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;f2:&#39;</span>, f2<span style="color:#f92672">.</span>next())
f2: <span style="color:#ae81ff">5</span>
</code></pre></div><h2 id="return-的作用">return 的作用</h2>
<p>在一个 generator function 中，如果没有 return，则默认执行至函数完毕，如果在执行过程中 return，则直接抛出 StopIteration 终止迭代。</p>
<h2 id="另一个例子">另一个例子</h2>
<p>另一个 yield 的例子来源于文件读取。如果直接对文件对象调用 read() 方法，会导致不可预测的内存占用。好的方法是利用固定长度的缓冲区来不断读取文件内容。通过 yield，我们不再需要编写读文件的迭代类，就可以轻松实现文件读取：</p>
<h5 id="清单-9-另一个-yield-的例子">清单 9. 另一个 yield 的例子</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_file</span>(fpath): 
   BLOCK_SIZE <span style="color:#f92672">=</span> <span style="color:#ae81ff">1024</span> 
   <span style="color:#66d9ef">with</span> open(fpath, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> f: 
       <span style="color:#66d9ef">while</span> True: 
           block <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read(BLOCK_SIZE) 
           <span style="color:#66d9ef">if</span> block: 
               <span style="color:#66d9ef">yield</span> block 
           <span style="color:#66d9ef">else</span>: 
               <span style="color:#66d9ef">return</span>
</code></pre></div><p>以上仅仅简单介绍了 yield 的基本概念和用法，我们会在后续文章中讨论。</p>
<p>转载了一部分内容：<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield">Python yield 使用浅析 | IBM</a></p>
]]></description><category domain="https://raycoder.me/categories/python/">Python</category><category domain="https://raycoder.me/categories/python%E5%85%B3%E9%94%AE%E5%AD%97/">Python关键字</category><category domain="https://raycoder.me/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Python学习笔记</category><category domain="https://raycoder.me/tags/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Python学习笔记</category><category domain="https://raycoder.me/tags/python/">Python</category><category domain="https://raycoder.me/tags/python%E5%85%B3%E9%94%AE%E5%AD%97/">Python关键字</category></item><item><title>建立个人博客配置推荐</title><link>https://raycoder.me/p/build-a-blog-recommendation/</link><guid isPermaLink="true">https://raycoder.me/p/build-a-blog-recommendation/</guid><pubDate>Thu, 26 Mar 2020 15:48:50 +0800</pubDate><description><![CDATA[<p>建立个人博客白嫖推荐：</p>
<ul>
<li>框架/主题：<a href="https://gohugo.io">Hugo</a>&amp;<a href="https://github.com/reuixiy/hugo-theme-meme">MemE</a></li>
<li>源码托管：<a href="https://github.com">GitHub</a></li>
<li>网站持续集成部署：<a href="https://netlify.com">Netlify</a></li>
<li>网站DNS解析服务/免费CDN：<a href="https://cloudflare.com">Cloudflare</a></li>
<li>（可选）免费CDN：<a href="https://nodecache.com">NodeCache</a>&amp;<a href="https://ddos-guard.net">DDOS Guard</a></li>
<li>统计：<a href="https://tongji.baidu.com">百度统计</a>/<a href="https://analytics.google.com">Google Analytics</a></li>
</ul>
<p>白嫖成功，废话不说开始建站！本文采用操作系统：<code>Windows 10 2004 19587.1000</code>，其他系统请举一反三，采用<code>Git BASH</code>。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200326164618.jpg" alt=""></p>
<hr>
<h3 id="hugomeme">Hugo&amp;MemE</h3>
<p>首先，先去下载<a href="https://github.com/gohugoio/hugo"><code>Hugo</code></a>。在你看到这篇文章之前，你可能已经阅读了许多建博客教程，也许是推荐使用<a href="https://hexo.io"><code>Hexo</code></a>，或是<a href="https://typecho.org"><code>Typecho</code></a>，也有可能是<a href="https://wordpress.org"><code>WordPress</code></a>，<a href="https://gridea.dev"><code>Gridea</code></a>，<a href="https://ghost.org"><code>Ghost</code></a>……但是！但是！为什么我要推荐一个知名度在国内都不如<a href="https://hexo.io"><code>Hexo</code></a>的网站框架呢？原因有3：</p>
<ol>
<li><a href="https://github.com/gohugoio/hugo"><code>Hugo</code></a>采用<a href="https://golang.google.cn"><code>Go Lang</code></a>网站生成速度快，文章多了完爆<a href="https://hexo.io"><code>Hexo</code></a>；</li>
<li>支持持续集成部署；</li>
<li>最最重要的一点：<em class="emphasis-point">内置短代码语言</em>，可定制性极高！你可以看看本文的<a href="https://github.com/FFRaycoder/blog/blob/master/content/p/build-a-blog-recommendation.md">纯文本版本</a>，前面的<em class="emphasis-point">加点字</em>，便是自定义的短代码。</li>
</ol>
<p>注意：如果你跟随本文教程搭建博客，那么请在<a href=""><code>Releases</code></a>界面下载拓展版Hugo，文件名如<code>hugo_extended_X.Y.Z_SYS-64bit.zip</code>，免安装的。</p>
<p>下载后需要将它保存到一个固定的目录，随意。我不建议放到<code>C:/Windows/System32</code>下，因为<code>Hugo</code>更新的<em class="emphasis-point">很勤</em>。</p>
<p>下载保存解压后在一个<em class="emphasis-point">博客专用目录</em>（个人建议）下运行命令（<code>CMD</code>,<a href="https://git-scm.com"><code>Git BASH</code></a>都可，推荐<code>Git BASH</code>，可执行命令比CMD多。）：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ hugo new site blog
</code></pre></div><p>其中，<code>hugo</code>代表这是一个HUGO指令（前提是要先将保存<code>hugo.exe</code>的文件夹添加到环境变量，否则会报错：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bash: hugo: command not found
</code></pre></div><p>教程：<a href="https://baijiahao.baidu.com/s?id=1652502091402613426">环境变量添加教程</a></p>
<p>当然，<code>blog</code>也可以自己修改名称。</p>
<p>创建完一个博客文件夹后，里面非常空旷：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">├─config.toml
│
├─archetypes
│      default.md
│
├─content
├─data
├─layouts
├─static
└─themes
</code></pre></div><p>这时候，我们就要下载一个主题了：我这里以<a href="https://github.com/reuixiy/hugo-theme-meme">MemE</a>做示例。</p>
<p>把主题<code>clone</code>到本地：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git clone https://github.com/reuixiy/hugo-theme-meme.git themes/meme
</code></pre></div><p>其实我推荐这个主题是有原因的：</p>
<ol>
<li>界面简洁（如本站）</li>
<li>自带许多配置功能</li>
<li>自带<code>Service Worker</code>&amp;<code>PWA</code></li>
<li>......</li>
</ol>
<p>配置/写作本文便不再赘述，请参阅：</p>
<ul>
<li>
<p><a href="https://baijiahao.baidu.com/s?id=1630800288039248525">hugo+github博客搭建教程！ | 百家号</a></p>
</li>
<li>
<p><a href="https://www.jianshu.com/p/8c3d7dfb09a0">使用Hugo搭建自己的博客 | 简书</a></p>
</li>
<li>
<p><a href="https://github.com/reuixiy/hugo-theme-meme/blob/master/README.zh-cn.md">README | GitHub</a></p>
</li>
<li>
<p><a href="https://io-oi.me/tech/documentation-of-hugo-theme-meme/">Hugo 主题 MemE 文档 | reuixiy</a></p>
</li>
</ul>
<hr>
<h3 id="源码托管至github">源码托管至GitHub</h3>
<p>这个很简单，在GitHub上面新建一个仓库，名字随便取，然后将你的整个博客文件夹Push上去即可。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200326220659.png" alt=""></p>
<p>看到那个大绿按钮了吧？！自己根据提示新建一个仓库！</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git init
$ git remote add origin &lt;YOUR_REPO&gt;
$ git add -A
$ git commit -m <span style="color:#e6db74">&#34;init&#34;</span>
$ git push -u origin master
</code></pre></div><p>请在<code>&lt;YOUR_REPO&gt;</code>中填入你仓库的<code>.git</code>地址！</p>
<p>看不懂的请参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的Git教程</a>！</p>
<hr>
<h3 id="网站持续集成部署">网站持续集成部署</h3>
<p>请参考<a href="/p/deploy-your-hugo-and-hexo-blog-to-netlify">Hugo-MemE/Hexo(真)自动推送部署至Netlify</a></p>
<hr>
<p><strong>注意：以下两个操作仅适用于有独立域名的博主！</strong></p>
<h3 id="网站dns解析服务免费cdn">网站DNS解析服务/免费CDN</h3>
<p>这个很简单，只需要你在<a href="https://cloudflare.com">Cloudflare</a>中创建一个账号，然后点击这个<strong>大大的按钮</strong>即可：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200327131457.png" alt=""></p>
<p>按照提示将你域名的<code>NS</code>设置为它给你提供的<code>NS</code>地址。</p>
<p>免费CDN只需要你在添加解析时选中<code>Proxied</code>那坨云形图案就可以了。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200327132301.png" alt=""></p>
<hr>
<h3 id="可选免费cdn">（可选）免费CDN</h3>
<p><a href="https://nodecache.com">NodeCache</a>有中文界面，自己搞😏</p>
<p><a href="https://ddos-guard.net">DDOS Guard</a>的配置可以参考我的这篇文章：<a href="/p/ddos-guard-free-cdn/">DDOS-Guard免费CDN</a></p>
<hr>
<h3 id="统计">统计</h3>
<h4 id="百度统计">百度统计</h4>
<p>打开<a href="https://tongji.baidu.com/">百度统计官网</a>，登录后添加一个站点：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200329114926.png" alt=""></p>
<p>然后获取代码，把它插入到<code>&lt;/head&gt;</code>标签前即可。</p>
<p>官方提♂示：</p>
<ol>
<li>请将代码添加到网站全部页面的</head>标签前。</li>
<li>建议在header.htm类似的页头模板页面中安装，以达到一处安装，全站皆有的效果。</li>
<li>如需在JS文件中调用统计分析代码，请直接去掉以下代码首尾的，<code>&lt;script type=&quot;text/javascript&quot;&gt;</code>与<code>&lt;/script&gt;</code>后，放入JS文件中即可。</li>
</ol>
<p>如果代码安装正确，一般20分钟后，可以查看网站分析数据。</p>
<h4 id="谷歌统计">谷歌统计</h4>
<p>谷歌统计官网：<a href="https://analytics.google.com">https://analytics.google.com</a></p>
<p>还是一样的新增网站插入代码😑即可</p>
]]></description><category domain="https://raycoder.me/categories/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://raycoder.me/categories/%E6%8A%98%E8%85%BE/">折腾</category><category domain="https://raycoder.me/tags/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://raycoder.me/tags/%E6%8A%98%E8%85%BE/">折腾</category><category domain="https://raycoder.me/tags/github-pages/">GitHub Pages</category><category domain="https://raycoder.me/tags/hugo/">Hugo</category><category domain="https://raycoder.me/tags/netlify/">Netlify</category><category domain="https://raycoder.me/tags/cloudflare/">Cloudflare</category></item><item><title>Python中的字符串转义字符</title><link>https://raycoder.me/p/python-special-characters/</link><guid isPermaLink="true">https://raycoder.me/p/python-special-characters/</guid><pubDate>Tue, 24 Mar 2020 12:02:40 +0800</pubDate><description><![CDATA[<p>今天不知道吃啥，就<del>吃老八秘制小汉堡</del>康Ray的Python字符串特殊字符解析~~</p>
<table>
<thead>
<tr>
<th align="center">转义字符</th>
<th align="center">意义</th>
<th align="center">ASCII码值（十进制）</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">\a</td>
<td align="center">响铃(BEL)</td>
<td align="center">007</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">退格(BS)，将当前位置移到前一列</td>
<td align="center">008</td>
</tr>
<tr>
<td align="center">\f</td>
<td align="center">换页(FF)，将当前位置移到下页开头</td>
<td align="center">012</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">换行(LF)，将当前位置移到下一行开头<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></td>
<td align="center">010</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">回车(CR)，将当前位置移到本行开头<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></td>
<td align="center">013</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">水平制表(HT) (跳到下一个TAB位置)</td>
<td align="center">009</td>
</tr>
<tr>
<td align="center">\v</td>
<td align="center">垂直制表(VT)</td>
<td align="center">011</td>
</tr>
<tr>
<td align="center">\\</td>
<td align="center">代表一个反斜线字符&quot;\&quot;</td>
<td align="center">092</td>
</tr>
<tr>
<td align="center">\'</td>
<td align="center">代表一个单引号(撇号)字符</td>
<td align="center">039</td>
</tr>
<tr>
<td align="center">\&quot;</td>
<td align="center">代表一个双引号字符</td>
<td align="center">034</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">代表一个问号</td>
<td align="center">063</td>
</tr>
<tr>
<td align="center">\0</td>
<td align="center">空字符(NUL)</td>
<td align="center">000</td>
</tr>
<tr>
<td align="center">\ddd</td>
<td align="center">1到3位八进制数所代表的任意字符</td>
<td align="center">三位八进制</td>
</tr>
<tr>
<td align="center">\xhh</td>
<td align="center">十六进制所代表的任意字符</td>
<td align="center">十六进制</td>
</tr>
</tbody>
</table>
<p>总之，凡是字符前带<code>\</code>的，一律转义。</p>
<hr>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;1</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">2&#39;</span>)
<span style="color:#ae81ff">1</span>
<span style="color:#ae81ff">2</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;1</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">2&#39;</span>)
<span style="color:#ae81ff">1</span>
<span style="color:#ae81ff">2</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;1</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">2&#39;</span>)
<span style="color:#ae81ff">1</span>

<span style="color:#ae81ff">2</span>
</code></pre></div><p>注意看截图：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200324143731.png" alt=""></p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><code>\n</code>是在下一行输入输出，运行后换到当前位置的下一行，而不会回到行首。<code>\r</code>是擦除本行前面的所有内容，光标回到本行第一字符开始输出，运行后回到当前行的行首，而不会换到下一行，如果接着输出的话，本行以前的内容会被逐一覆盖。 <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description><category domain="https://raycoder.me/categories/python/">Python</category><category domain="https://raycoder.me/tags/python/">Python</category></item><item><title>Hugo-MemE/Hexo(真)自动推送部署至Netlify</title><link>https://raycoder.me/p/deploy-your-hugo-and-hexo-blog-to-netlify/</link><guid isPermaLink="true">https://raycoder.me/p/deploy-your-hugo-and-hexo-blog-to-netlify/</guid><pubDate>Tue, 24 Mar 2020 08:52:21 +0800</pubDate><description><![CDATA[<h3 id="hugo">Hugo</h3>
<hr>
<p>我之前写了一个蠢蠢的脚本，用于自动推送生成完的静态网站：</p>
<p><a href="https://raycoder.me/p/hugo-auto-deploy/">Hugo-Python(伪)自动部署</a></p>
<p>自以为很好……</p>
<p>不过在看了<a href="https://io-oi.me/">reuixiy大佬的博客</a>后，才发现他有一个<code>Edit Me</code>：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200324085718.png" alt=""></p>
<p>点击后发现可以<code>Fork</code>这个<code>Markdown</code>文件来修改。</p>
<p>不过俺们这个静态网页好像就不太行……这个脚本<heimu>有毛用！！！！</heimu></p>
<p>果然是我太嫩了</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200324085950.gif" alt=""></p>
<p>研究了下人家的<a href="https://github.com/reuixiy/io-oi.me">博客Repo</a></p>
<p>没错他是直接推送一个源代码的！</p>
<p>咱们打开<a href="https://github.com/reuixiy/io-oi.me/blob/master/netlify.toml">netlify.toml</a></p>
<p>自己也新建一个<code>netlify.toml</code>(<code>~blog/netlify.toml</code>)</p>
<p>填入如下内容：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">[<span style="color:#a6e22e">build</span>]
  <span style="color:#a6e22e">publish</span> = <span style="color:#e6db74">&#34;public&#34;</span>
  <span style="color:#a6e22e">command</span> = <span style="color:#e6db74">&#34;npm run build&#34;</span>

[<span style="color:#a6e22e">build</span>.<span style="color:#a6e22e">environment</span>]
  <span style="color:#a6e22e">HUGO_VERSION</span> = <span style="color:#e6db74">&#34;YOUR_HUGO_VERSION&#34;</span>
  <span style="color:#a6e22e">HUGO_ENV</span> = <span style="color:#e6db74">&#34;production&#34;</span>
  <span style="color:#a6e22e">HUGO_ENABLEGITINFO</span> = <span style="color:#e6db74">&#34;true&#34;</span>
</code></pre></div><p>很愉快的<code>push</code>~</p>
<p><code>push</code>成功啦！</p>
<p><code>Netlify</code>失败了...</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">Executing user command: npm run build
npm
 ERR! code ENOENT
npm
 ERR! syscall open
npm ERR!
 path /opt/build/repo/package.json
npm ERR! errno -2
npm
 ERR! enoent ENOENT: no such file or directory, open &#39;/opt/build/repo/package.json&#39;
npm
ERR! enoent This is related to npm not being able to find a file.
npm ERR! enoent
npm ERR!
 A complete log of this run can be found in:
npm ERR!     /opt/buildhome/.npm/_logs/2020-03-23T23_50_59_667Z-debug.log
</code></pre></div><p>是<code>build</code>出了问题。于是我们似乎需要<code>npm init</code>，再对<code>package.json</code>进行修改：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;blog&#34;</span>,
  <span style="color:#f92672">&#34;version&#34;</span>: <span style="color:#e6db74">&#34;1.0.0&#34;</span>,
  <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Ray&#39;s Blog&#34;</span>,
  <span style="color:#f92672">&#34;main&#34;</span>: <span style="color:#e6db74">&#34;index.js&#34;</span>,
  <span style="color:#f92672">&#34;scripts&#34;</span>: {
    <span style="color:#f92672">&#34;test&#34;</span>: <span style="color:#e6db74">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span>,
    <span style="color:#f92672">&#34;build&#34;</span>: <span style="color:#e6db74">&#34;git config --global core.quotePath false &amp;&amp; hugo --gc --minify --cleanDestinationDir &amp;&amp; ./node_modules/gulp/bin/gulp.js build&#34;</span>,
  },
  <span style="color:#f92672">&#34;repository&#34;</span>: {
    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;git&#34;</span>,
    <span style="color:#f92672">&#34;url&#34;</span>: <span style="color:#e6db74">&#34;git+https://github.com/FFRaycoder/blog.git&#34;</span>
  },
  <span style="color:#f92672">&#34;keywords&#34;</span>: [
    <span style="color:#e6db74">&#34;blog&#34;</span>,
    <span style="color:#e6db74">&#34;hugo&#34;</span>,
    <span style="color:#e6db74">&#34;hugo-theme-meme&#34;</span>
  ],
  <span style="color:#f92672">&#34;author&#34;</span>: <span style="color:#e6db74">&#34;FFRaycoder&#34;</span>,
  <span style="color:#f92672">&#34;license&#34;</span>: <span style="color:#e6db74">&#34;CC-BY-NC-SA-4.0&#34;</span>,
  <span style="color:#f92672">&#34;bugs&#34;</span>: {
    <span style="color:#f92672">&#34;url&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/FFRaycoder/blog/issues&#34;</span>
  },
  <span style="color:#f92672">&#34;homepage&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/FFRaycoder/blog&#34;</span>,
  <span style="color:#f92672">&#34;devDependencies&#34;</span>: {
    <span style="color:#f92672">&#34;gulp&#34;</span>: <span style="color:#e6db74">&#34;^4.0.2&#34;</span>,
    <span style="color:#f92672">&#34;gulp-uglify&#34;</span>: <span style="color:#e6db74">&#34;^3.0.2&#34;</span>,
    <span style="color:#f92672">&#34;readable-stream&#34;</span>: <span style="color:#e6db74">&#34;^3.6.0&#34;</span>,
    <span style="color:#f92672">&#34;uglify-es&#34;</span>: <span style="color:#e6db74">&#34;^3.3.9&#34;</span>,
    <span style="color:#f92672">&#34;workbox-build&#34;</span>: <span style="color:#e6db74">&#34;^5.0.0&#34;</span>
  }
}
</code></pre></div><p>当然，<code>./node_modules/gulp/bin/gulp.js build</code>是可选的：因为我使用了<code>gulp</code>来创建<code>sw.js</code>。</p>
<p>其中的配置请自己修改。</p>
<p>每次推送时Netlify会<em class="emphasis-point">自动运行</em><code>hugo</code>指令，并且部署至他们的<code>CDN</code>~</p>
<p>好哒我们这就成功了~想修改的人可以直接点击下面的<code>Edit Me</code>，提个PR给我！</p>
<h3 id="hexo">Hexo</h3>
<hr>
<p>Hexo倒要比Hugo简单：Hexo的<code>node_moudles</code>会在执行Hexo命令时自动运行。实现Hexo甚至不需要修改<code>~blog/packages.json</code>。</p>
<p>修改你的<code>Deploy Settings</code>，更改成如图：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200325075659.png" alt=""></p>
<p>只需你推送博客源码，Netlify就会<em class="emphasis-point">自动帮你部署博客</em>！！！太贴心了吧~</p>
<p>这样的好处是什么呢？我们都知道<code>hexo g</code>生成文件很慢，<code>hexo d</code>比你自己推送都慢🙃貌似是因为hexo要推送全部的静态文件。使用Netlify自动部署后，你只需要推送一篇新的博文，你的网站就自动帮你部署好啦~~~</p>
<style type="text/css">.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:#444;background:#e7f2fa}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:#fff;background:#6ab0de}.notice-title:before{margin-right:8px;font-family:"Font Awesome 5 Free",FontAwesome;font-weight:400}.notice.warning .notice-title{background:rgba(217,83,79,.9)}.notice.warning .notice-title:before{content:'\f071'}.notice.warning{background:#fae2e2}.notice.info .notice-title{background:#f0b37e}.notice.info .notice-title:before{content:'\f05a'}.notice.info{background:#fff2db}.notice.note .notice-title{background:#6ab0de}.notice.note .notice-title:before{content:'\f06a'}.notice.note{background:#e7f2fA}.notice.tip .notice-title{background:rgba(92,184,92,.8)}.notice.tip .notice-title:before{content:'\f058'}.notice.tip{background:#e6f9e6}</style><div class="notice success" >
<p class="first notice-title"></p><p>还有一点：如果你的网站<code>hexo g</code>出现了错误，Netlify会自动回滚到前一个版本，保持你网站的正常访问！</p></div>

<p>赶快入坑~</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200325081213.gif" alt=""></p>
<hr>
<p>2020/4/8更新：</p>
<p>有兴趣的同学可以使用<a href="https://forestry.io/">Forestry CMS</a>，可以给静态博客加上个后台。自己捣鼓。</p>
]]></description><category domain="https://raycoder.me/categories/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://raycoder.me/tags/hugo/">Hugo</category><category domain="https://raycoder.me/tags/git/">Git</category><category domain="https://raycoder.me/tags/netlify/">Netlify</category></item><item><title>本站UV达到1000人啦！</title><link>https://raycoder.me/p/1000-uv/</link><guid isPermaLink="true">https://raycoder.me/p/1000-uv/</guid><pubDate>Sun, 22 Mar 2020 14:26:44 +0800</pubDate><description>&lt;center>&lt;font size=7>好的开端！庆祝🤤🤤🤤~撒花🎉🎉🎉~&lt;/font>&lt;/center></description><category domain="https://raycoder.me/categories/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://raycoder.me/tags/%E5%8D%9A%E5%AE%A2/">博客</category></item><item><title>Hugo-HTML版GOTO链接中转页</title><link>https://raycoder.me/p/goto-transfer-page/</link><guid isPermaLink="true">https://raycoder.me/p/goto-transfer-page/</guid><pubDate>Thu, 19 Mar 2020 15:13:31 +0800</pubDate><description><![CDATA[<p><a href="http://www.aeink.com/791.html">原作者</a>是PHP版本，我把它移植到了HTML上。代码很丑，勿喷！（适用于Hugo）</p>
<p>自己在<code>./blog/static/</code>下新建<code>goto/index.html</code>，代码如下。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">html</span>&gt;
&lt;<span style="color:#f92672">head</span>&gt;
&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">http-equiv</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Content-Type&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/html; charset=UTF-8&#34;</span>&gt;
&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;viewport&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;width=device-width&#34;</span>&gt;
&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;robots&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;noindex, nofollow&#34;</span> /&gt;
&lt;<span style="color:#f92672">noscript</span>&gt;&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">http-equiv</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;refresh&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1;url=&#39;&#39;;&#34;</span>&gt;&lt;/<span style="color:#f92672">noscript</span>&gt;
&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;UTF-8&#34;</span>&gt;
<span style="color:#75715e">&lt;!--[if IE 8]&gt;
</span><span style="color:#75715e">&lt;style&gt;
</span><span style="color:#75715e">.ie8 .alert-circle,.ie8 .alert-footer{display:none}.ie8 .alert-box{padding-top:75px}.ie8 .alert-sec-text{top:45px}
</span><span style="color:#75715e">&lt;/style&gt;
</span><span style="color:#75715e">&lt;![endif]--&gt;</span>

&lt;<span style="color:#f92672">script</span>&gt;
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">getQueryVariable</span>(<span style="color:#a6e22e">variable</span>){
       <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">query</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">search</span>.<span style="color:#a6e22e">substring</span>(<span style="color:#ae81ff">1</span>);
       <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">vars</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">query</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#34;&amp;&#34;</span>);
       <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">vars</span>.<span style="color:#a6e22e">length</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
           <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pair</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">vars</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#34;=&#34;</span>);
           <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">pair</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">variable</span>){<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pair</span>[<span style="color:#ae81ff">1</span>];}
       }
       <span style="color:#66d9ef">return</span>(<span style="color:#66d9ef">null</span>);
}
&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">title</span>&gt;&lt;/<span style="color:#f92672">title</span>&gt;
&lt;<span style="color:#f92672">script</span>&gt;
	<span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementsByTagName</span>(<span style="color:#e6db74">&#34;title&#34;</span>)[<span style="color:#ae81ff">0</span>];
	<span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">innerHTML</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;外链跳转 - &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">getQueryVariable</span>(<span style="color:#e6db74">&#34;url&#34;</span>);
&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">style</span>&gt;
<span style="color:#f92672">body</span>{<span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">0</span>;<span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">0</span>;<span style="color:#66d9ef">background</span>:<span style="color:#ae81ff">#E6EAEB</span>;<span style="color:#66d9ef">font-family</span>:Arial,<span style="color:#e6db74">&#39;微软雅黑&#39;</span>,<span style="color:#e6db74">&#39;宋体&#39;</span>,<span style="color:#66d9ef">sans-serif</span>}.<span style="color:#a6e22e">main</span>{<span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">absolute</span>;<span style="color:#66d9ef">left</span>:calc(<span style="color:#ae81ff">50</span><span style="color:#66d9ef">%</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">200</span><span style="color:#66d9ef">px</span>);<span style="color:#66d9ef">top</span>:calc(<span style="color:#ae81ff">50</span><span style="color:#66d9ef">%</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">13</span><span style="color:#66d9ef">em</span>)}.<span style="color:#a6e22e">alert-box</span>{<span style="color:#66d9ef">display</span>:<span style="color:#66d9ef">none</span>;<span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">relative</span>;<span style="color:#66d9ef">margin</span>:<span style="color:#66d9ef">auto</span>;<span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">180</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">85</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">22</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span>;<span style="color:#66d9ef">background</span>:<span style="color:#ae81ff">#FFF</span>;<span style="color:#66d9ef">box-shadow</span>:<span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">9</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">17</span><span style="color:#66d9ef">px</span> rgba(<span style="color:#ae81ff">102</span>,<span style="color:#ae81ff">102</span>,<span style="color:#ae81ff">102</span>,<span style="color:#ae81ff">.75</span>);<span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">286</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#FFF</span>;<span style="color:#66d9ef">text-align</span>:<span style="color:#66d9ef">center</span>}.<span style="color:#a6e22e">alert-box</span> <span style="color:#f92672">p</span>{<span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">0</span>}.<span style="color:#a6e22e">alert-circle</span>{<span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">absolute</span>;<span style="color:#66d9ef">top</span>:<span style="color:#ae81ff">-50</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">left</span>:<span style="color:#ae81ff">111</span><span style="color:#66d9ef">px</span>}.<span style="color:#a6e22e">alert-sec-circle</span>{stroke-dashoffset:<span style="color:#ae81ff">0</span>;stroke-dasharray:<span style="color:#ae81ff">735</span>;<span style="color:#66d9ef">transition</span>:stroke-dashoffset <span style="color:#ae81ff">1</span><span style="color:#66d9ef">s</span> <span style="color:#66d9ef">linear</span>}.<span style="color:#a6e22e">alert-sec-text</span>{<span style="color:#66d9ef">position</span>:<span style="color:#66d9ef">absolute</span>;<span style="color:#66d9ef">top</span>:<span style="color:#ae81ff">11</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">left</span>:<span style="color:#ae81ff">190</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">76</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#000</span>;<span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">68</span><span style="color:#66d9ef">px</span>}.<span style="color:#a6e22e">alert-sec-unit</span>{<span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">34</span><span style="color:#66d9ef">px</span>}.<span style="color:#a6e22e">alert-body</span>{<span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">35</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span>}.<span style="color:#a6e22e">alert-head</span>{<span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#242424</span>;<span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">28</span><span style="color:#66d9ef">px</span>}.<span style="color:#a6e22e">alert-concent</span>{<span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">25</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">14</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#7B7B7B</span>;<span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">18</span><span style="color:#66d9ef">px</span>}.<span style="color:#a6e22e">alert-concent</span> <span style="color:#f92672">p</span>{<span style="color:#66d9ef">line-height</span>:<span style="color:#ae81ff">27</span><span style="color:#66d9ef">px</span>}.<span style="color:#a6e22e">alert-btn</span>{<span style="color:#66d9ef">display</span>:<span style="color:#66d9ef">block</span>;<span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#4AB0F7</span>;<span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">55</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">line-height</span>:<span style="color:#ae81ff">55</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">286</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#FFF</span>;<span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">text-decoration</span>:<span style="color:#66d9ef">none</span>;<span style="color:#66d9ef">letter-spacing</span>:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span>}.<span style="color:#a6e22e">alert-btn</span>:<span style="color:#a6e22e">hover</span>{<span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#6BC2FF</span>}.<span style="color:#a6e22e">alert-footer</span>{<span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">0</span> <span style="color:#66d9ef">auto</span>;<span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">42</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">120</span><span style="color:#66d9ef">px</span>}.<span style="color:#a6e22e">alert-footer-icon</span>{<span style="color:#66d9ef">float</span>:<span style="color:#66d9ef">left</span>}.<span style="color:#a6e22e">alert-footer-text</span>{<span style="color:#66d9ef">float</span>:<span style="color:#66d9ef">left</span>;<span style="color:#66d9ef">border-left</span>:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#EEE</span>;<span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">3</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">40</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#0B85CC</span>;<span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">12</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">text-align</span>:<span style="color:#66d9ef">left</span>}.<span style="color:#a6e22e">alert-footer-text</span> <span style="color:#f92672">p</span>{<span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#7A7A7A</span>;<span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">22</span><span style="color:#66d9ef">px</span>;<span style="color:#66d9ef">line-height</span>:<span style="color:#ae81ff">18</span><span style="color:#66d9ef">px</span>}
&lt;/<span style="color:#f92672">style</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;
&lt;<span style="color:#f92672">body</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ie8&#34;</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>&gt;
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;main&#34;</span>&gt;
	&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;js-alert-box&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alert-box&#34;</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;display:block&#34;</span>&gt;
		&lt;<span style="color:#f92672">svg</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alert-circle&#34;</span> <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;234&#34;</span> <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;234&#34;</span>&gt;&lt;<span style="color:#f92672">circle</span> <span style="color:#a6e22e">cx</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;117&#34;</span> <span style="color:#a6e22e">cy</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;117&#34;</span> <span style="color:#a6e22e">r</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;108&#34;</span> <span style="color:#a6e22e">fill</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#FFF&#34;</span> <span style="color:#a6e22e">stroke</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#43AEFA&#34;</span> <span style="color:#a6e22e">stroke-width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;17&#34;</span>&gt;&lt;/<span style="color:#f92672">circle</span>&gt;&lt;<span style="color:#f92672">circle</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;js-sec-circle&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alert-sec-circle&#34;</span> <span style="color:#a6e22e">cx</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;117&#34;</span> <span style="color:#a6e22e">cy</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;117&#34;</span> <span style="color:#a6e22e">r</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;108&#34;</span> <span style="color:#a6e22e">fill</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;transparent&#34;</span> <span style="color:#a6e22e">stroke</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#F4F1F1&#34;</span> <span style="color:#a6e22e">stroke-width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;18&#34;</span> <span style="color:#a6e22e">transform</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rotate(-90 117 117)&#34;</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stroke-dashoffset:-514px&#34;</span>&gt;&lt;/<span style="color:#f92672">circle</span>&gt;&lt;<span style="color:#f92672">text</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alert-sec-unit&#34;</span> <span style="color:#a6e22e">x</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;100&#34;</span> <span style="color:#a6e22e">y</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;172&#34;</span> <span style="color:#a6e22e">fill</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#BDBDBD&#34;</span>&gt;秒&lt;/<span style="color:#f92672">text</span>&gt;&lt;/<span style="color:#f92672">svg</span>&gt;
		&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;js-sec-text&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alert-sec-text&#34;</span>&gt;
			3
		&lt;/<span style="color:#f92672">div</span>&gt;
		&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alert-body&#34;</span>&gt;
			&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;js-alert-head&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alert-head&#34;</span>&gt;
				&lt;<span style="color:#f92672">script</span>&gt;<span style="color:#a6e22e">getQueryVariable</span>(<span style="color:#e6db74">&#34;url&#34;</span>);&lt;/<span style="color:#f92672">script</span>&gt;
			&lt;/<span style="color:#f92672">div</span>&gt;
			&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alert-concent&#34;</span>&gt;
				&lt;<span style="color:#f92672">p</span>&gt;
					Loading...
				&lt;/<span style="color:#f92672">p</span>&gt;
			&lt;/<span style="color:#f92672">div</span>&gt;
			&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;js-alert-btn&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alert-btn&#34;</span>&gt;立即前往&lt;/<span style="color:#f92672">a</span>&gt;
			&lt;<span style="color:#f92672">script</span>&gt;
				<span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;js-alert-btn&#34;</span>);
				<span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">innerHTML</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&lt;a id=\&#34;js-alert-btn\&#34; class=\&#34;alert-btn\&#34; href=\&#34;&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">getQueryVariable</span>(<span style="color:#e6db74">&#34;url&#34;</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;\&#34;&gt;立即前往&lt;/a&gt;&#34;</span>;
			&lt;/<span style="color:#f92672">script</span>&gt;
		&lt;/<span style="color:#f92672">div</span>&gt;
		&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alert-footer clearfix&#34;</span>&gt;
			&lt;<span style="color:#f92672">svg</span> <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;46px&#34;</span> <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;42px&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alert-footer-icon&#34;</span>&gt;&lt;<span style="color:#f92672">circle</span> <span style="color:#a6e22e">fill-rule</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;evenodd&#34;</span> <span style="color:#a6e22e">clip-rule</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;evenodd&#34;</span> <span style="color:#a6e22e">fill</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#7B7B7B&#34;</span> <span style="color:#a6e22e">stroke</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#DEDFE0&#34;</span> <span style="color:#a6e22e">stroke-width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2&#34;</span> <span style="color:#a6e22e">stroke-miterlimit</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;10&#34;</span> <span style="color:#a6e22e">cx</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;21.917&#34;</span> <span style="color:#a6e22e">cy</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;21.25&#34;</span> <span style="color:#a6e22e">r</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;17&#34;</span>&gt;&lt;/<span style="color:#f92672">circle</span>&gt;&lt;<span style="color:#f92672">path</span> <span style="color:#a6e22e">fill</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#FFF&#34;</span> <span style="color:#a6e22e">d</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;M22.907,27.83h-1.98l0.3-2.92c-0.37-0.22-0.61-0.63-0.61-1.1c0-0.71,0.58-1.29,1.3-1.29s1.3,0.58,1.3,1.29 c0,0.47-0.24,0.88-0.61,1.1L22.907,27.83z M18.327,17.51c0-1.98,1.61-3.59,3.59-3.59s3.59,1.61,3.59,3.59v2.59h-7.18V17.51z M27.687,20.1v-2.59c0-3.18-2.59-5.76-5.77-5.76s-5.76,2.58-5.76,5.76v2.59h-1.24v10.65h14V20.1H27.687z&#34;</span>&gt;&lt;/<span style="color:#f92672">path</span>&gt;&lt;<span style="color:#f92672">circle</span> <span style="color:#a6e22e">fill-rule</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;evenodd&#34;</span> <span style="color:#a6e22e">clip-rule</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;evenodd&#34;</span> <span style="color:#a6e22e">fill</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#FEFEFE&#34;</span> <span style="color:#a6e22e">cx</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;35.417&#34;</span> <span style="color:#a6e22e">cy</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;10.75&#34;</span> <span style="color:#a6e22e">r</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;6.5&#34;</span>&gt;&lt;/<span style="color:#f92672">circle</span>&gt;&lt;<span style="color:#f92672">polygon</span> <span style="color:#a6e22e">fill</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#7B7B7B&#34;</span> <span style="color:#a6e22e">stroke</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#7B7B7B&#34;</span> <span style="color:#a6e22e">stroke-linecap</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;round&#34;</span> <span style="color:#a6e22e">stroke-linejoin</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;round&#34;</span> <span style="color:#a6e22e">stroke-miterlimit</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;10&#34;</span> <span style="color:#a6e22e">points</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;35.417,12.16 32.797,9.03 31.917,10.07 35.417,14.25 42.917,5.29 42.037,4.25 &#34;</span>&gt;&lt;/<span style="color:#f92672">polygon</span>&gt;&lt;/<span style="color:#f92672">svg</span>&gt;
			&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alert-footer-text&#34;</span>&gt;
				&lt;<span style="color:#f92672">p</span>&gt;secure&lt;/<span style="color:#f92672">p</span>&gt;安全加密
			&lt;/<span style="color:#f92672">div</span>&gt;
		&lt;/<span style="color:#f92672">div</span>&gt;
	&lt;/<span style="color:#f92672">div</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span>&gt;
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">alertSet</span>(<span style="color:#a6e22e">e</span>) {
	
	document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;js-alert-box&#34;</span>).<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">display</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;block&#34;</span>, document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;js-alert-head&#34;</span>).<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">e</span>;
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">t</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>,
		<span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;js-sec-circle&#34;</span>);
	document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;js-sec-text&#34;</span>).<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span>() {
		<span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">0</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">t</span>) <span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">href</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">getQueryVariable</span>(<span style="color:#e6db74">&#34;url&#34;</span>);
		<span style="color:#66d9ef">else</span> {
			<span style="color:#a6e22e">t</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>, document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;js-sec-text&#34;</span>).<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">t</span>;
			<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">round</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">735</span>);
			<span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">strokeDashoffset</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">735</span>
		}
	}, <span style="color:#ae81ff">970</span>)
} &lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span>&gt;<span style="color:#a6e22e">alertSet</span>(<span style="color:#a6e22e">getQueryVariable</span>(<span style="color:#e6db74">&#34;url&#34;</span>));&lt;/<span style="color:#f92672">script</span>&gt;
&lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>使用的时候链接如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">https://raycoder.me/goto/?url=https://raycoder.me
</code></pre></div><p>这里以<code>MemE</code>主题为例，批量替换网页中非本站<code>a标签</code>。打开<code>./blog/themes/meme/layouts/partials/custom/content.html</code>，写入如下内容：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{- $host := &#34;&#34; -}}
{{- $redirect := &#34;/goto/&#34; -}}

{{- $Content := .Scratch.Get &#34;Content&#34; -}}
{{- $regex := printf `&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;(https?://%s[^&#34;</span><span style="color:#960050;background-color:#1e0010">]+)&#34;`</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">host</span> <span style="color:#a6e22e">-</span><span style="color:#960050;background-color:#1e0010">}}</span>
<span style="color:#960050;background-color:#1e0010">{{</span><span style="color:#a6e22e">-</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">replacement</span> <span style="color:#a6e22e">:</span><span style="color:#f92672">=</span> <span style="color:#e6db74">printf</span> <span style="color:#960050;background-color:#1e0010">`&lt;</span><span style="color:#a6e22e">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;%s?url=$1&#34;</span><span style="color:#960050;background-color:#1e0010">`</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">redirect</span> <span style="color:#a6e22e">-</span><span style="color:#960050;background-color:#1e0010">}}</span>
<span style="color:#960050;background-color:#1e0010">{{</span><span style="color:#a6e22e">-</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">Content</span> <span style="color:#a6e22e">:</span><span style="color:#f92672">=</span> <span style="color:#e6db74">$Content</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#a6e22e">replaceRE</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">regex</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">replacement</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#a6e22e">safeHTML</span> <span style="color:#a6e22e">-</span><span style="color:#960050;background-color:#1e0010">}}</span>
<span style="color:#960050;background-color:#1e0010">{{</span><span style="color:#a6e22e">-</span> <span style="color:#960050;background-color:#1e0010">.</span><span style="color:#a6e22e">Scratch</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#a6e22e">Set</span> <span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#a6e22e">Content</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">Content</span> <span style="color:#a6e22e">-</span><span style="color:#960050;background-color:#1e0010">}}</span>
</code></pre></div><p>这个代码是让所有外链在跳转页中打开，假如你只想让特定网址在跳转页中打开，那么可以在<code>{{- $host := &quot;&quot; -}}</code>中填入内容，如<code>{{- $host := &quot;example.com&quot; -}}</code>。</p>
<hr>
<p>参考资料：</p>
<ul>
<li>
<p><a href="https://github.com/reuixiy/hugo-theme-meme/issues/81">如何让所有外链全部在一个中转页打开？ | Github Issue</a></p>
</li>
<li>
<p><a href="http://www.aeink.com/791.html">本站自用跳转页面go.php源码 | AE博客</a></p>
</li>
</ul>
]]></description><category domain="https://raycoder.me/categories/html/">HTML</category><category domain="https://raycoder.me/tags/html/">HTML</category><category domain="https://raycoder.me/tags/%E4%B8%AD%E8%BD%AC/">中转</category><category domain="https://raycoder.me/tags/js/">JS</category></item><item><title>DDOS-Guard免费CDN</title><link>https://raycoder.me/p/ddos-guard-free-cdn/</link><guid isPermaLink="true">https://raycoder.me/p/ddos-guard-free-cdn/</guid><pubDate>Thu, 19 Mar 2020 08:29:36 +0800</pubDate><description><![CDATA[<p>白嫖传送门：<a href="https://ddos-guard.net/en/store/web">https://ddos-guard.net/en/store/web</a></p>
<p>俺们作为白嫖党选什么岂不是很清楚~</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200319083802.png" alt=""></p>
<p>然后填入你的域名和回源IP地址！</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200319084702.png" alt=""></p>
<p>然后按照流程注册！</p>
<p>过一会儿就可以在<a href="https://my.ddos-guard.net/cabinet">控制面板</a>看到啦！</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200319084942.png" alt=""></p>
<p>点击进去，就可以看到它给我们分配的IP地址。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200319085045.png" alt=""></p>
<p>不过速度真的不敢恭维！（可能是我个人原因）</p>
<p>参考资料：</p>
<ul>
<li><a href="https://cangshui.net/3346.html">【免费CDN】俄罗斯DDOS-Guard支持ssl防御1.5T | 沧水博客</a></li>
</ul>
]]></description><category domain="https://raycoder.me/categories/cdn/">CDN</category><category domain="https://raycoder.me/categories/%E7%BD%91%E7%AB%99/">网站</category><category domain="https://raycoder.me/tags/cdn/">CDN</category><category domain="https://raycoder.me/tags/%E7%99%BD%E5%AB%96/">白嫖</category><category domain="https://raycoder.me/tags/%E7%A6%8F%E5%88%A9/">福利</category></item><item><title>Backblaze免费免备案对象存储</title><link>https://raycoder.me/p/backblaze-free-object-storage/</link><guid isPermaLink="true">https://raycoder.me/p/backblaze-free-object-storage/</guid><pubDate>Thu, 19 Mar 2020 08:08:54 +0800</pubDate><description><![CDATA[<h3 id="backblaze-b2对象存储传送门httpssecurebackblazecomb2_bucketshtm">backblaze B2对象存储传送门：<a href="https://secure.backblaze.com/b2_buckets.htm">https://secure.backblaze.com/b2_buckets.htm</a></h3>
<p>注册个账号，登录！</p>
<p>Backblaze前10 GB的存储空间是免费的，每天能下载1G以内文件免费，上传免费，并与cloudflare合作，只要套个cloudflareCDN即可无限免费下载。</p>
<p>因此我们得到如下产品：</p>
<blockquote>
<p>10G存储空间免费</p>
<p>上行免费</p>
<p>下行免费</p>
<p>全球最可靠的云存储服务之一</p>
<p>全球最强的CDN云分发服务之一</p>
</blockquote>
<p>新建一个桶，随便取个名。注意要选<code>Public（公众）</code>！<del>这LAG机器翻译</del></p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200319081732.png" alt=""></p>
<p>创建完之后，随便上传一个文件。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200319082134.png" alt=""></p>
<p>俺们就发现它给我们分配了一个<code>https://f000.backblazeb2.com</code>的域名。</p>
<p>我们自己在<code>Cloudflare</code>挂一个域名，一定要开启CDN：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200319082633.png" alt=""></p>
<p>如果你觉得域名太长，可以设置一个<code>Page Rule</code>：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200319082751.png" alt=""></p>
<p>不过只能<code>http</code>跳<code>https</code>，可惜了。</p>
<p>我目前仍然使用<code>Gayhub</code>图床，放大文件使用<code>B2</code>。</p>
<hr>
<p>2020/04/04更新：</p>
<p>建议参考<a href="/p/cf-worker-proxy/">万能的CLOUDFLARE WORKERS+JSProxy代理？！</a></p>
<p>参考资料：</p>
<ul>
<li><a href="https://cangshui.net/4221.html">免费对象云存储Backblaze | 沧水博客</a></li>
</ul>
]]></description><category domain="https://raycoder.me/categories/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/">对象存储</category><category domain="https://raycoder.me/categories/%E7%BD%91%E7%AB%99/">网站</category><category domain="https://raycoder.me/tags/backblaze/">Backblaze</category><category domain="https://raycoder.me/tags/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/">对象存储</category><category domain="https://raycoder.me/tags/%E7%99%BD%E5%AB%96/">白嫖</category><category domain="https://raycoder.me/tags/%E7%A6%8F%E5%88%A9/">福利</category></item><item><title>Chrome崩溃的一些解决办法</title><link>https://raycoder.me/p/chrome-crashed/</link><guid isPermaLink="true">https://raycoder.me/p/chrome-crashed/</guid><pubDate>Wed, 18 Mar 2020 09:05:37 +0800</pubDate><description><![CDATA[<p>最近升级了电脑系统，打开Chrome崩溃了。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200318090837.png" alt="喔唷，崩溃啦" title="喔唷，崩溃啦"></p>
<p>网络上的一些解决方法：在打开的快捷方式后添加<code> --test-type --no-sandbox</code>，禁用沙盒。</p>
<p>这样在你双击快捷方式时浏览器可以正常打开，但是如果你在开始菜单打开，还是一样会崩溃🙃。</p>
<p>在我自己的研究中发现，正解如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">操作系统名称	: Microsoft Windows 10 家庭 Insider Preview中文版
版本			: 10.0.19582 版本 19582
Chrome版本	: 版本 83.0.4087.0（正式版本）canary （64 位）
</code></pre></div><p>没错，我们应该更新到<code>Canary 金丝雀</code>版Chrome😎！</p>
<p>下载地址：<a href="https://www.google.cn/intl/zh-CN/chrome/canary/">https://www.google.cn/intl/zh-CN/chrome/canary/</a> | <a href="https://www.google.com/intl/zh-CN/chrome/canary/">https://www.google.com/intl/zh-CN/chrome/canary/</a></p>
<p>也就是预览版，经常会更新，不过终于不会崩溃了，也可以正常访问<code>Ray's Blog</code>了🐷</p>
]]></description><category domain="https://raycoder.me/categories/chrome/">Chrome</category><category domain="https://raycoder.me/tags/chrome/">Chrome</category></item><item><title>Python学习笔记之assert关键字简析</title><link>https://raycoder.me/p/python-assert/</link><guid isPermaLink="true">https://raycoder.me/p/python-assert/</guid><pubDate>Wed, 18 Mar 2020 08:22:33 +0800</pubDate><description><![CDATA[<p>什么是<code>assert</code>？它的中文名叫做<code>断言</code>。我们先来看一个简单的例子：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">age <span style="color:#f92672">=</span> int(input())
<span style="color:#66d9ef">if</span> age<span style="color:#f92672">&gt;=</span><span style="color:#ae81ff">18</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;You can watch it!&#39;</span>)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;You are too young!&#39;</span>)
</code></pre></div><p>这个例子进行了一下<yellow><del>18G</del></yellow>操作，没有达到18岁的人会被<del>拒之门外</del>友善的提示。</p>
<p>不过，我们可以通过<code>assert</code>关键字来实现同等的操作。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> age <span style="color:#f92672">=</span> int(input())
<span style="color:#ae81ff">17</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">assert</span> age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">18</span>
Traceback (most recent call last):
  File <span style="color:#e6db74">&#34;&lt;pyshell#3&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
    <span style="color:#66d9ef">assert</span> age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">18</span>
<span style="color:#a6e22e">AssertionError</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">age <span style="color:#f92672">=</span> int(input())
<span style="color:#66d9ef">try</span>:
    <span style="color:#66d9ef">assert</span> age <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">18</span>
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;You can watch it!&#39;</span>)
<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">AssertionError</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;You are too young!&#39;</span>)
</code></pre></div><p>这只是一个简单的例子，<code>assert</code>还可以进行更复杂的操作。</p>
<p>引用一段<a href="https://www.runoob.com/python3/python3-assert.html">菜鸟教程</a>。</p>
<p><code>assert</code>的语法格式如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">assert</span> expression
</code></pre></div><p>等价于：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> expression:
    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">AssertionError</span>
</code></pre></div><p><code>assert</code>后面也可以紧跟参数:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">assert</span> expression [, arguments]
</code></pre></div><p>等价于：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> expression:
    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">AssertionError</span>(arguments)
</code></pre></div><p>如：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">assert</span> True     <span style="color:#75715e"># 条件为 true 正常执行</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">assert</span> False    <span style="color:#75715e"># 条件为 false 触发异常</span>
Traceback (most recent call last):
  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
<span style="color:#a6e22e">AssertionError</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">assert</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">==</span><span style="color:#ae81ff">1</span>    <span style="color:#75715e"># 条件为 true 正常执行</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">assert</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">==</span><span style="color:#ae81ff">2</span>    <span style="color:#75715e"># 条件为 false 触发异常</span>
Traceback (most recent call last):
  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
<span style="color:#a6e22e">AssertionError</span>

<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">assert</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">==</span><span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;1 不等于 2&#39;</span>
Traceback (most recent call last):
  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
<span style="color:#a6e22e">AssertionError</span>: <span style="color:#ae81ff">1</span> <span style="color:#960050;background-color:#1e0010">不等于</span> <span style="color:#ae81ff">2</span>
<span style="color:#f92672">&gt;&gt;&gt;</span>
</code></pre></div><p>以下实例判断当前系统是否为 Linux，如果不满足条件则直接触发异常，不必执行接下来的代码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> sys
<span style="color:#66d9ef">assert</span> (<span style="color:#e6db74">&#39;linux&#39;</span> <span style="color:#f92672">in</span> sys<span style="color:#f92672">.</span>platform), <span style="color:#e6db74">&#34;该代码只能在 Linux 下执行&#34;</span>

<span style="color:#75715e"># 接下来要执行的代码</span>
</code></pre></div><p>可以大大优化我们的代码，也可以减少<code>if</code>、<code>elif</code>、<code>else</code>的使用。</p>
<p>这个关键字也可以作校验用，比如我们从网页上下载了一个代码，可以用<code>assert</code>来断言本地代码与网页代码相同，否则报错。</p>
]]></description><category domain="https://raycoder.me/categories/python/">Python</category><category domain="https://raycoder.me/categories/python%E5%85%B3%E9%94%AE%E5%AD%97/">Python关键字</category><category domain="https://raycoder.me/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Python学习笔记</category><category domain="https://raycoder.me/tags/python/">Python</category><category domain="https://raycoder.me/tags/%E5%85%B3%E9%94%AE%E5%AD%97/">关键字</category><category domain="https://raycoder.me/tags/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Python学习笔记</category></item><item><title>我们国产语言木兰</title><link>https://raycoder.me/p/ulang/</link><guid isPermaLink="true">https://raycoder.me/p/ulang/</guid><pubDate>Mon, 16 Mar 2020 16:24:19 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>……出门看火伴，火伴皆惊忙：同行十二年，不知木兰是素贞。</strong></p>
</blockquote>
<p>没错，我们国产语言木兰<del>上线</del>发布了，真好！</p>
<p>你看这完美的图标！</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316162738.png" alt=""></p>
<p>再看这美妙的手感！</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316163330.png" /></p>
<p>我准备为之惊呼！</p>
<p>等下，这个图标……</p>
<p>这不是<code>Pyinstaller</code>打包完的图标吗？！</p>
<img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316163651.jpeg" style="width: 35%;height: 35%;"/>
<p>我们掏出<code>PyInstaller Extractor</code>（<a href="https://github.com/NeoTim/PyInstallerExtractor">https://github.com/NeoTim/PyInstallerExtractor</a>，<a href="https://sourceforge.net/projects/pyinstallerextractor/">https://sourceforge.net/projects/pyinstallerextractor/</a>）。</p>
<p>进行解包……</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ python pyinstxtractor.py ulang-0.2.2.exe
</code></pre></div><p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316164435.png" alt=""></p>
<p>不愧是敢用<code>Pyinstaller</code>的语言</p>
<p>你好歹也加个图标啊！</p>
<p>让我们看看<code>ulang.runtime.env</code>节选</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">return</span> {
    <span style="color:#e6db74">&#34;print&#34;</span>             : local_print,
    <span style="color:#e6db74">&#34;println&#34;</span>           : <span style="color:#66d9ef">lambda</span> <span style="color:#f92672">*</span>objs: local_print(<span style="color:#f92672">*</span>objs, <span style="color:#f92672">**</span>{<span style="color:#e6db74">&#34;end&#34;</span>:<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>}),
    <span style="color:#e6db74">&#34;assert&#34;</span>            : local_assert,
    <span style="color:#e6db74">&#34;len&#34;</span>               : len,
    <span style="color:#e6db74">&#34;enumerate&#34;</span>         : enumerate,
    <span style="color:#e6db74">&#34;all&#34;</span>               : all,
    <span style="color:#e6db74">&#34;any&#34;</span>               : any,
    <span style="color:#e6db74">&#34;range&#34;</span>             : range,
    <span style="color:#e6db74">&#34;round&#34;</span>             : round,
    <span style="color:#e6db74">&#34;input&#34;</span>             : input,
    <span style="color:#e6db74">&#34;reverse&#34;</span>           : reversed,
    <span style="color:#e6db74">&#34;super&#34;</span>             : super,
    <span style="color:#e6db74">&#34;locals&#34;</span>            : <span style="color:#66d9ef">lambda</span>: locals(),
    <span style="color:#e6db74">&#34;bool&#34;</span>              : bool,
    <span style="color:#e6db74">&#34;float&#34;</span>             : float,
    <span style="color:#e6db74">&#34;int&#34;</span>               : int,
    <span style="color:#e6db74">&#34;str&#34;</span>               : str,
    <span style="color:#e6db74">&#34;list&#34;</span>              : list,
    <span style="color:#e6db74">&#34;dict&#34;</span>              : dict,
    <span style="color:#e6db74">&#34;set&#34;</span>               : set,
    <span style="color:#e6db74">&#34;tuple&#34;</span>             : <span style="color:#66d9ef">lambda</span> <span style="color:#f92672">*</span>args: args,
    <span style="color:#e6db74">&#34;char&#34;</span>              : chr,
    <span style="color:#e6db74">&#34;ord&#34;</span>               : ord,
    <span style="color:#e6db74">&#34;bytes&#34;</span>             : <span style="color:#66d9ef">lambda</span> s, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ascii&#34;</span>:bytes(s, encoding),
    <span style="color:#e6db74">&#34;typeof&#34;</span>            : <span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>__class__<span style="color:#f92672">.</span>__name__,
    <span style="color:#e6db74">&#34;isa&#34;</span>               : <span style="color:#66d9ef">lambda</span> x, t: isinstance(x, t),
    <span style="color:#e6db74">&#34;max&#34;</span>               : max,
    <span style="color:#e6db74">&#34;min&#34;</span>               : min,
    <span style="color:#e6db74">&#34;map&#34;</span>               : map,
    <span style="color:#e6db74">&#34;filter&#34;</span>            : filter,
    <span style="color:#e6db74">&#34;zip&#34;</span>               : zip,
    <span style="color:#e6db74">&#34;staticmethod&#34;</span>      : staticmethod,
    <span style="color:#e6db74">&#34;property&#34;</span>          : property,
    <span style="color:#e6db74">&#34;ceil&#34;</span>              : math<span style="color:#f92672">.</span>ceil,
    <span style="color:#e6db74">&#34;floor&#34;</span>             : math<span style="color:#f92672">.</span>floor,
    <span style="color:#e6db74">&#34;fabs&#34;</span>              : math<span style="color:#f92672">.</span>fabs,
    <span style="color:#e6db74">&#34;sqrt&#34;</span>              : math<span style="color:#f92672">.</span>sqrt,
    <span style="color:#e6db74">&#34;log&#34;</span>               : math<span style="color:#f92672">.</span>log,
    <span style="color:#e6db74">&#34;log10&#34;</span>             : math<span style="color:#f92672">.</span>log10,
    <span style="color:#e6db74">&#34;exp&#34;</span>               : math<span style="color:#f92672">.</span>exp,
    <span style="color:#e6db74">&#34;pow&#34;</span>               : math<span style="color:#f92672">.</span>pow,
    <span style="color:#e6db74">&#34;sin&#34;</span>               : math<span style="color:#f92672">.</span>sin,
    <span style="color:#e6db74">&#34;cos&#34;</span>               : math<span style="color:#f92672">.</span>cos,
    <span style="color:#e6db74">&#34;tan&#34;</span>               : math<span style="color:#f92672">.</span>tan,
    <span style="color:#e6db74">&#34;asin&#34;</span>              : math<span style="color:#f92672">.</span>asin,
    <span style="color:#e6db74">&#34;acos&#34;</span>              : math<span style="color:#f92672">.</span>acos,
    <span style="color:#e6db74">&#34;atan&#34;</span>              : math<span style="color:#f92672">.</span>atan,
    <span style="color:#e6db74">&#34;spawn&#34;</span>             : builtin_spawn,
    <span style="color:#e6db74">&#34;kill&#34;</span>              : builtin_kill,
    <span style="color:#e6db74">&#34;self&#34;</span>              : builtin_self,
    <span style="color:#e6db74">&#34;quit&#34;</span>              : sys<span style="color:#f92672">.</span>exit,
    <span style="color:#e6db74">&#34;open&#34;</span>              : open,
    <span style="color:#e6db74">&#34;install&#34;</span>           : pip_install,
    <span style="color:#e6db74">&#34;time&#34;</span>              : time<span style="color:#f92672">.</span>time,
    <span style="color:#e6db74">&#34;year&#34;</span>              : <span style="color:#66d9ef">lambda</span>: datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>year,
    <span style="color:#e6db74">&#34;month&#34;</span>             : <span style="color:#66d9ef">lambda</span>: datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>month,
    <span style="color:#e6db74">&#34;day&#34;</span>               : <span style="color:#66d9ef">lambda</span>: datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>day,
    <span style="color:#e6db74">&#34;hour&#34;</span>              : <span style="color:#66d9ef">lambda</span>: datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>hour,
    <span style="color:#e6db74">&#34;minute&#34;</span>            : <span style="color:#66d9ef">lambda</span>: datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>minute,
    <span style="color:#e6db74">&#34;second&#34;</span>            : <span style="color:#66d9ef">lambda</span>: datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>second,
    <span style="color:#e6db74">&#34;microsecond&#34;</span>       : <span style="color:#66d9ef">lambda</span>: datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>microsecond,
    <span style="color:#e6db74">&#34;sleep&#34;</span>             : time<span style="color:#f92672">.</span>sleep,
    <span style="color:#e6db74">&#34;delay&#34;</span>             : <span style="color:#66d9ef">lambda</span> ms: time<span style="color:#f92672">.</span>sleep(ms <span style="color:#f92672">/</span> <span style="color:#ae81ff">1000</span>),
    <span style="color:#e6db74">&#34;delayMicroseconds&#34;</span> : <span style="color:#66d9ef">lambda</span> us: time<span style="color:#f92672">.</span>sleep(us <span style="color:#f92672">/</span> <span style="color:#ae81ff">1000000</span>),
    <span style="color:#e6db74">&#34;PI&#34;</span>                : math<span style="color:#f92672">.</span>pi,
    <span style="color:#e6db74">&#34;ARGV&#34;</span>              : argv,
    <span style="color:#e6db74">&#34;__builtins__&#34;</span>      : fix_builtins(
        {
            <span style="color:#e6db74">&#34;__import__&#34;</span>      : local_import,
            <span style="color:#e6db74">&#34;__build_class__&#34;</span> : __build_class__,
            <span style="color:#e6db74">&#34;__name__&#34;</span>        : <span style="color:#e6db74">&#34;__main__&#34;</span>,
            <span style="color:#e6db74">&#34;__file__&#34;</span>        : fname,
            <span style="color:#e6db74">&#34;__print__&#34;</span>       : eval_print,
            <span style="color:#e6db74">&#34;___&#34;</span>             : None,
            <span style="color:#e6db74">&#34;__div__&#34;</span>         : __builtin_div,
            <span style="color:#e6db74">&#34;__rem__&#34;</span>         : __builtin_rem,
        }
    ),
}
</code></pre></div><p>不愧是国产大项目</p>
<div class="mermaid">
graph TD;
    获取指令-->替换成Python代码;
    替换成Python代码-->exec;
</div>
<p>参考：</p>
<ul>
<li><a href="https://www.zhihu.com/question/366509495">https://www.zhihu.com/question/366509495</a></li>
<li><a href="https://www.zhihu.com/question/366698484">https://www.zhihu.com/question/366698484</a></li>
<li><a href="https://github.com/Myts2/ulang">https://github.com/Myts2/ulang</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/104488265">https://zhuanlan.zhihu.com/p/104488265</a></li>
<li><a href="https://github.com/loopyme/ulang-uncompile">https://github.com/loopyme/ulang-uncompile</a></li>
</ul>]]></description><category domain="https://raycoder.me/categories/%E5%90%90%E6%A7%BD/">吐槽</category><category domain="https://raycoder.me/tags/ulang/">Ulang</category><category domain="https://raycoder.me/tags/%E7%B4%A0%E8%B4%9E/">素贞</category></item><item><title>白嫖Office365</title><link>https://raycoder.me/p/%E7%99%BD%E5%AB%96office365/</link><guid isPermaLink="true">https://raycoder.me/p/%E7%99%BD%E5%AB%96office365/</guid><pubDate>Mon, 16 Mar 2020 12:57:27 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>最近系统升级到1909, 送了我一套Office365. 我也很无奈啊, 送了让我激活也是够了...</strong></p>
<!-- more -->
</blockquote>
<p>用了各种激活软件都无效，比如<a href="https://otp.landian.vip">Office Tool Plus</a>. 根据国外某网站的资料，编写了一个批处理文件，命名为<code>Office365激活.bat</code>. ( 其实叫什么都可以 ) 代码如下:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">@echo off
title Activate Office <span style="color:#ae81ff">365</span> ProPlus <span style="color:#66d9ef">for</span> FREE - MSGuides.com&amp;cls&amp;echo <span style="color:#f92672">============================================================================</span>&amp;echo <span style="color:#75715e">#Project: Activating Microsoft software products for FREE without software&amp;echo ============================================================================&amp;echo.&amp;echo #Supported products: Office 365 ProPlus (x86-x64)&amp;echo.&amp;echo.&amp;(if exist &#34;%ProgramFiles%\Microsoft Office\Office16\ospp.vbs&#34; cd /d &#34;%ProgramFiles%\Microsoft Office\Office16&#34;)&amp;(if exist &#34;%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs&#34; cd /d &#34;%ProgramFiles(x86)%\Microsoft Office\Office16&#34;)&amp;(for /f %%x in (&#39;dir /b ..\root\Licenses16\proplusvl_kms*.xrm-ms&#39;) do cscript ospp.vbs /inslic:&#34;..\root\Licenses16\%%x&#34; &gt;nul)&amp;(for /f %%x in (&#39;dir /b ..\root\Licenses16\proplusvl_mak*.xrm-ms&#39;) do cscript ospp.vbs /inslic:&#34;..\root\Licenses16\%%x&#34; &gt;nul)&amp;echo.&amp;echo ============================================================================&amp;echo Activating your Office...&amp;cscript //nologo ospp.vbs /unpkey:WFG99 &gt;nul&amp;cscript //nologo ospp.vbs /unpkey:DRTFM &gt;nul&amp;cscript //nologo ospp.vbs /unpkey:BTDRB &gt;nul&amp;cscript //nologo ospp.vbs /inpkey:XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 &gt;nul&amp;set i=1</span>
:server
<span style="color:#66d9ef">if</span> %i%<span style="color:#f92672">==</span><span style="color:#ae81ff">1</span> set KMS_Sev<span style="color:#f92672">=</span>kms7.MSGuides.com
<span style="color:#66d9ef">if</span> %i%<span style="color:#f92672">==</span><span style="color:#ae81ff">2</span> set KMS_Sev<span style="color:#f92672">=</span>kms8.MSGuides.com
<span style="color:#66d9ef">if</span> %i%<span style="color:#f92672">==</span><span style="color:#ae81ff">3</span> set KMS_Sev<span style="color:#f92672">=</span>kms9.MSGuides.com
<span style="color:#66d9ef">if</span> %i%<span style="color:#f92672">==</span><span style="color:#ae81ff">4</span> goto notsupported
cscript //nologo ospp.vbs /sethst:%KMS_Sev% &gt;nul&amp;echo <span style="color:#f92672">============================================================================</span>&amp;echo.&amp;echo.
cscript //nologo ospp.vbs /act | find /i <span style="color:#e6db74">&#34;successful&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>echo.&amp;echo <span style="color:#f92672">============================================================================</span>&amp;echo.&amp;echo <span style="color:#75715e">#My official blog: MSGuides.com&amp;echo.&amp;echo #How it works: bit.ly/kms-server&amp;echo.&amp;echo #Please feel free to contact me at msguides.com@gmail.com if you have any questions or concerns.&amp;echo.&amp;echo #Please consider supporting this project: donate.msguides.com&amp;echo #Your support is helping me keep my servers running everyday!&amp;echo.&amp;echo ============================================================================&amp;choice /n /c YN /m &#34;Would you like to visit my blog [Y,N]?&#34; &amp; if errorlevel 2 exit) || (echo The connection to my KMS server failed! Trying to connect to another one... &amp; echo Please wait... &amp; echo. &amp; echo. &amp; set /a i+=1 &amp; goto server)</span>
explorer <span style="color:#e6db74">&#34;http://MSGuides.com&#34;</span>&amp;goto halt
:notsupported
echo.&amp;echo <span style="color:#f92672">============================================================================</span>&amp;echo Sorry! Your version is not supported.&amp;echo Please try installing the latest version here: bit.ly/odt2k16
:halt
pause
</code></pre></div><p>右键以管理员身份运行. 如有什么问题请在评论区反馈。</p>
<p>参考资料：</p>
<ul>
<li><a href="https://kms.cangshui.net/">沧水KMS</a></li>
</ul>
]]></description><category domain="https://raycoder.me/categories/%E6%89%B9%E5%A4%84%E7%90%86/">批处理</category><category domain="https://raycoder.me/tags/%E5%B7%A5%E5%85%B7/">工具</category><category domain="https://raycoder.me/tags/%E7%A6%8F%E5%88%A9/">福利</category><category domain="https://raycoder.me/tags/office/">Office</category><category domain="https://raycoder.me/tags/%E7%A0%B4%E8%A7%A3/">破解</category></item><item><title>Hugo-Python(伪)自动部署</title><link>https://raycoder.me/p/hugo-auto-deploy/</link><guid isPermaLink="true">https://raycoder.me/p/hugo-auto-deploy/</guid><pubDate>Mon, 16 Mar 2020 09:08:23 +0800</pubDate><description><![CDATA[<p>最近无聊就写了个<code>Hugo自动部署</code>的Python脚本。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>
<span style="color:#75715e"># coding:utf-8</span>

<span style="color:#f92672">from</span> os <span style="color:#f92672">import</span> system
<span style="color:#f92672">from</span> time <span style="color:#f92672">import</span> ctime

system(<span style="color:#e6db74">&#39;start cmd /K &#34;cd /d D:/workspace/hugoblog&amp;hugo&amp;cd public&amp;git add -A&amp;git commit -m </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">Site updated: </span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">&amp;git push -u origin master&#34;&#39;</span> <span style="color:#f92672">%</span> str(ctime()))
</code></pre></div><p>假的自动，其实就是一次性执行所有部署命令。</p>
<p>自动部署请参考<a href="/p/deploy-your-hugo-and-hexo-blog-to-netlify">Hugo-MemE/Hexo(真)自动推送部署至Netlify</a></p>]]></description><category domain="https://raycoder.me/categories/python/">Python</category><category domain="https://raycoder.me/categories/hugo/">Hugo</category><category domain="https://raycoder.me/tags/hugo/">Hugo</category><category domain="https://raycoder.me/tags/python/">Python</category><category domain="https://raycoder.me/tags/git/">Git</category></item><item><title>【转】适合爬虫使用的API</title><link>https://raycoder.me/p/spider-api/</link><guid isPermaLink="true">https://raycoder.me/p/spider-api/</guid><pubDate>Sun, 08 Mar 2020 17:04:23 +0800</pubDate><description><![CDATA[<h3 id="一网易云音乐">一、网易云音乐</h3>
<p>【转】<a href="https://zhuanlan.zhihu.com/p/30246788">https://zhuanlan.zhihu.com/p/30246788</a>
调用地址：<a href="https://api.imjad.cn/cloudmusic/">https://api.imjad.cn/cloudmusic/</a>
在以上网址后紧跟两个参数完成具体请求：</p>
<ol>
<li>type （默认值为type=song）</li>
<li>id（歌曲的id）
其中type的所有可取的值如下：</li>
</ol>
<table>
<thead>
<tr>
<th align="center">type</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">song</td>
<td align="center">单曲</td>
</tr>
<tr>
<td align="center">lyric</td>
<td align="center">歌词</td>
</tr>
<tr>
<td align="center">comments</td>
<td align="center">评论</td>
</tr>
<tr>
<td align="center">detail</td>
<td align="center">歌曲详情</td>
</tr>
<tr>
<td align="center">artist</td>
<td align="center">歌手</td>
</tr>
<tr>
<td align="center">album</td>
<td align="center">专辑</td>
</tr>
<tr>
<td align="center">playlist</td>
<td align="center">歌单</td>
</tr>
<tr>
<td align="center">mv</td>
<td align="center">MV</td>
</tr>
<tr>
<td align="center">djradio</td>
<td align="center">主播电台</td>
</tr>
<tr>
<td align="center">dj</td>
<td align="center">主播电台单曲ID</td>
</tr>
<tr>
<td align="center">detail_dj</td>
<td align="center">主播电台单曲详情</td>
</tr>
<tr>
<td align="center">search</td>
<td align="center">搜索</td>
</tr>
</tbody>
</table>
<ol>
<li>type=song
当type=song时，返回歌曲的下载地址信息（和其他不是特别有用的信息）.
所以当我们知道一首歌的id后，就可以用type=song来获取到这首歌的下载链接.
完整请求示例：
请求id为28012031的歌曲下载地址
<a href="https://api.imjad.cn/cloudmusic/?type=song&amp;id=28012031">https://api.imjad.cn/cloudmusic/?type=song&amp;id=28012031</a>
应当指出：此时返回的歌曲比特率为默认值128000，如果你需要音质更高的资源，可以再尾部再跟上参数br,br的取值决定音质，大概是这样：</li>
</ol>
<table>
<thead>
<tr>
<th align="center">参数名</th>
<th align="center">含义</th>
<th align="center">默认</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">br</td>
<td align="center"><code>int</code>，指定歌曲码率，可选：64000，128000，198000，320000</td>
<td align="center">128000</td>
</tr>
</tbody>
</table>
<p>完整请求示例：
请求id为28012031的歌曲下载地址，br为320000
<a href="https://api.imjad.cn/cloudmusic/?type=song&amp;id=28012031&amp;br=320000">https://api.imjad.cn/cloudmusic/?type=song&amp;id=28012031&amp;br=320000</a>
我不确定是不是每一首歌都有br=320000的版本哦...(￣▽￣&quot;)</p>
<p>2.type=lyric
当我们知道一首歌的id后，就可以用type=lyric来获取到这首歌的歌词
完整请求示例：
请求id为28012031歌曲的歌词信息
<a href="https://api.imjad.cn/cloudmusic/?type=lyric&amp;id=28012031">https://api.imjad.cn/cloudmusic/?type=lyric&amp;id=28012031</a>
返回的歌词信息中会带有时间轴0.0</p>
<p>3.type=comments
当我们知道一首歌的id后，就可以用type=comments来获取到这首歌的评论信息
完整请求示例：
请求id为28012031歌曲的评论信息
<a href="https://api.imjad.cn/cloudmusic/?type=comments&amp;id=28012031">https://api.imjad.cn/cloudmusic/?type=comments&amp;id=28012031</a>
返回的数据中有一个json数组专门存储热评，另一个json数组专门存储最新评论。
每一条评论中包含非常多的重要信息，你需要用到的里面基本上都有 ・㉨・</p>
<p>4.type=detail
返回一些比较基本的信息，歌曲名歌曲id，歌手名歌手id，专辑封面图之类的
完整请求示例：
请求id为28012031歌曲的detail信息
<a href="https://api.imjad.cn/cloudmusic/?type=detail&amp;id=28012031">https://api.imjad.cn/cloudmusic/?type=detail&amp;id=28012031</a>
你试试把detail加个s...居然也有数据返回...(´・ω・`)</p>
<p>5.type=playlist
（playlist前面的几个值我就不具体说了，有需要的人自己试试就行）
当我们知道一个歌单的id后，就可以用type=playlist来获取到这个歌单的相关信息，例如创建者的信息啊，封面图啊，歌单被播放的次数啊....当然还有最重要的歌单内所有歌曲的简略信息（包含歌曲id等等）
完整请求示例：
请求歌单id为309390784的歌单信息
<a href="https://api.imjad.cn/cloudmusic/?type=playlist&amp;id=309390784">https://api.imjad.cn/cloudmusic/?type=playlist&amp;id=309390784</a>
当然你也可以把id改成你自己喜欢的一个歌单，至于歌单id怎么获取嘛，你在网易云音乐的歌单上按右键，复制链接，拿去浏览器里打开，地址栏里面可以看到这个歌单的id┌( ಠ_ಠ)┘</p>
<p>6.type=search
这个我感觉挺重要的，仔细看好了
当你指定type=search时，后面需要紧跟参数search_type，用来确定你到底需要搜个什么
search_type可以取的值如下：</p>
<table>
<thead>
<tr>
<th align="center">search_type</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">1</td>
<td align="center">单曲</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">专辑</td>
</tr>
<tr>
<td align="center">100</td>
<td align="center">歌手</td>
</tr>
<tr>
<td align="center">1000</td>
<td align="center">歌单</td>
</tr>
<tr>
<td align="center">1002</td>
<td align="center">用户</td>
</tr>
<tr>
<td align="center">1004</td>
<td align="center">mv</td>
</tr>
<tr>
<td align="center">1006</td>
<td align="center">歌词</td>
</tr>
<tr>
<td align="center">1009</td>
<td align="center">主播电台</td>
</tr>
</tbody>
</table>
<p>1.search_type=1
默认情况下search_type的值为1，搜索单曲。后面紧跟s=xxxxx来指定搜索的关键字
完整请求示例：
搜索单曲，关键字为cocoon（歌名）
<a href="https://api.imjad.cn/cloudmusic/?type=search&amp;search_type=1&amp;s=cocoon">https://api.imjad.cn/cloudmusic/?type=search&amp;search_type=1&amp;s=cocoon</a>
返回很多歌名为cocoon的歌曲信息，大概返回多少首我不知道，你需要的里面应该有..</p>
<p>2.search_type=1000
搜索歌单。用歌单名用作关键字，来搜索歌单这样的简单东西就不说了，这里提一下另外一点，出了歌单名之外，你可以用用户名来作为关键字，这样返回的是该用户创建的所有歌单
完整请求示例：
搜索歌单，用户CeuiLiSA所创建的所有歌单（我自己的用户名）
<a href="https://api.imjad.cn/cloudmusic/?type=search&amp;search_type=1000&amp;s=CeuiLiSA">https://api.imjad.cn/cloudmusic/?type=search&amp;search_type=1000&amp;s=CeuiLiSA</a>
返回的是歌单的简略信息，没有歌单内的具体的歌。只有id啊封面啊之类的内容，但是你只要有了歌单id，那就可以取得所有你需要的信息啦。。</p>
<p>3.search_type=1002
这样就可以搜索到网易云音乐的某个用户信息了。返回的用户信息不多不少，刚好可以用来做用户信息展示的页面。
完整请求示例：
搜索用户，关键字为CeuiLiSA。
<a href="https://api.imjad.cn/cloudmusic/?type=search&amp;search_type=1002&amp;s=CeuiLiSA">https://api.imjad.cn/cloudmusic/?type=search&amp;search_type=1002&amp;s=CeuiLiSA</a></p>
]]></description><category domain="https://raycoder.me/tags/%E7%88%AC%E8%99%AB/">爬虫</category><category domain="https://raycoder.me/tags/api/">Api</category></item><item><title>Python学习笔记之exec()函数简析</title><link>https://raycoder.me/p/python-exec/</link><guid isPermaLink="true">https://raycoder.me/p/python-exec/</guid><pubDate>Fri, 06 Mar 2020 00:44:34 +0800</pubDate><description><![CDATA[<p><code>exec()</code>函数的作用：动态执行python代码。也就是说<code>exec()</code>可以执行复杂的python代码，而不像<code>eval()</code>函数那样只能计算一个表达式的值。
【转】<a href="https://www.jianshu.com/p/3cf0a649e7bc">https://www.jianshu.com/p/3cf0a649e7bc</a>
举一个简单的小例子，代码如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">12</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">13</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">exec</span>(<span style="color:#e6db74">&#34;answer=i*j&#34;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Answer is </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">%</span>answer)
Answer <span style="color:#f92672">is</span> <span style="color:#ae81ff">156</span>
</code></pre></div><p>这表明第三句的exec()函数能够正确地执行Python代码，并且能将计算结果赋予answer变量，就像真正的Python代码一样。
那么，我们能不能让exec()函数执行一个复杂的Python代码呢？Why not?请看一下例子：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> func <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;def fact(n):</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">return 1 if n==1 else n*fact(n-1)&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">exec</span>(func)
<span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> fact(<span style="color:#ae81ff">5</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(a)
<span style="color:#ae81ff">120</span>
</code></pre></div><p>可能有些读者纳了闷了，这些代码不是直接能够在Python中执行吗，为何还要多此一举地把它写成字符串，并用exec()执行呢？笔者的答案是，刚才的例子只是为了演示exec()函数的基本用法，它的强大之处远不止于此。
在实际项目中，我们有些时候会将Python代码写入一些文件中，举个例子，如以下的eg.txt,它储存了我们想要的Python代码，如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fact</span>(n):
        <span style="color:#66d9ef">if</span> n<span style="color:#f92672">==</span><span style="color:#ae81ff">1</span>:
            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">return</span> n<span style="color:#f92672">*</span>fact(n<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
    <span style="color:#f92672">...</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> t <span style="color:#f92672">=</span> fact(<span style="color:#ae81ff">6</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(t)
</code></pre></div><p>请再次注意，这是一个txt格式的Python代码。那么，我们如何调用它呢？答案就是exec()函数，代码如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;E://eg.txt&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
        s <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
    <span style="color:#f92672">...</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">exec</span>(s)
<span style="color:#ae81ff">720</span>
</code></pre></div><p>在上述代码中，我们先读取eg.txt文件的内容，再转交exec()函数执行。</p>
<p>是不是有点棒呢？除了能执行string和code object外，还可以在exec()函数中加入参数,参数的传递可以写成字典(dict)形式。具体的使用方法可以参考下面的例子：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> expr <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        z = 30
</span><span style="color:#e6db74">        sum = x + y + z
</span><span style="color:#e6db74">        print(sum)
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#f92672">...</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">func</span>():
        y <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>
        <span style="color:#66d9ef">exec</span>(expr)
        <span style="color:#66d9ef">exec</span>(expr, {<span style="color:#e6db74">&#39;x&#39;</span>: <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;y&#39;</span>: <span style="color:#ae81ff">2</span>})
        <span style="color:#66d9ef">exec</span>(expr, {<span style="color:#e6db74">&#39;x&#39;</span>: <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;y&#39;</span>: <span style="color:#ae81ff">2</span>}, {<span style="color:#e6db74">&#39;y&#39;</span>: <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#39;z&#39;</span>: <span style="color:#ae81ff">4</span>})
    <span style="color:#f92672">...</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> func()
<span style="color:#ae81ff">60</span>
<span style="color:#ae81ff">33</span>
<span style="color:#ae81ff">34</span>
</code></pre></div><p>在expr语句中，有三个变量x,y,z,其中z值已给定，我们可以在exec()函数外指定x,y的值，也可以在exec()函数中以字典的形式指定x,y的值。在最后的语句中，我们给出了x,y,z的值，并且y值重复，exec()函数接收后面一个y值，且z值传递不起作用，因此输出结果为34。</p>
<p><code>exec()</code>函数的标准格式如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">exec</span>(object[, globals[, locals]])
</code></pre></div><blockquote>
<p>这个函数支持动态执行 Python 代码。object 必须是字符串或者代码对象。如果是字符串，那么该字符串将被解析为一系列 Python 语句并执行（除非发生语法错误）。1 如果是代码对象，它将被直接执行。在任何情况下，被执行的代码都需要和文件输入一样是有效的（见参考手册中关于文件输入的章节）。请注意即使在传递给 exec() 函数的代码的上下文中，return 和 yield 语句也不能在函数定义之外使用。该函数返回值是 None 。</p>
</blockquote>
<p>exec和eval都可以执行single mode的代码；exec只是计算表达式，本身返回为None，因此使用exec计算表达式虽然可以计算出结果，但是返回值为None。而eval只能执行单个的表达式，返回表达式的结果。</p>
]]></description><category domain="https://raycoder.me/categories/python/">Python</category><category domain="https://raycoder.me/categories/python%E5%85%B3%E9%94%AE%E5%AD%97/">Python关键字</category><category domain="https://raycoder.me/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Python学习笔记</category><category domain="https://raycoder.me/tags/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/">内置函数</category><category domain="https://raycoder.me/tags/python/">Python</category><category domain="https://raycoder.me/tags/python%E8%BF%9B%E9%98%B6/">Python进阶</category><category domain="https://raycoder.me/tags/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Python学习笔记</category></item><item><title>Python学习笔记之eval()函数简析</title><link>https://raycoder.me/p/python-eval/</link><guid isPermaLink="true">https://raycoder.me/p/python-eval/</guid><pubDate>Thu, 05 Mar 2020 20:20:53 +0800</pubDate><description><![CDATA[<p>一个最基本的<code>eval()</code>函数的格式应该如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> command <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;print(</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">Hello world!</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">)&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> eval(command)
Hello world<span style="color:#960050;background-color:#1e0010">!</span>
</code></pre></div><p>没错，eval函数是一个可以让字符串转换为表达式的内置函数（注意<code>eval()</code>不支持任何形式的赋值操作，而不能是复杂的代码逻辑）。
<code>eval()</code>函数不仅可以执行代码，还可以作如下操作：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> eval(<span style="color:#e6db74">&#39;[1, 2, 3]&#39;</span>) <span style="color:#75715e">#字符串转列表</span>
[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> eval(<span style="color:#e6db74">&#39;(1, 2, 3)&#39;</span>) <span style="color:#75715e">#字符串转元组</span>
(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> eval(<span style="color:#e6db74">&#39;{&#34;one&#34;: 1, &#34;two&#34;: 2, &#34;three&#34;: 3}&#39;</span>) <span style="color:#75715e">#字符串转字典</span>
{<span style="color:#e6db74">&#39;one&#39;</span>: <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;two&#39;</span>: <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;three&#39;</span>: <span style="color:#ae81ff">3</span>}
<span style="color:#f92672">&gt;&gt;&gt;</span> eval(<span style="color:#e6db74">&#39;0o187&#39;</span>)
<span style="color:#ae81ff">0</span>o187
</code></pre></div><p><code>eval()</code>函数的完整格式如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">eval(expression[, globals[, locals]])
</code></pre></div><p><code>expression</code>: 表达式。
<code>globals</code>:  变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。
<code>locals</code>:  变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</p>
<p>当后两个参数都为空时，很好理解，就是一个string类型的算术表达式，计算出结果即可。等价于eval(expression)。
当locals参数为空，globals参数不为空时，先查找globals参数中是否存在变量，并计算。
当两个参数都不为空时，先查找locals参数，再查找globals参数。
<del>无良</del>引用一段Python官方的文档：</p>
<blockquote>
<p>eval(expression[, globals[, locals]])
实参是一个字符串，以及可选的 globals 和 locals。globals 实参必须是一个字典。locals 可以是任何映射对象。
expression 参数会作为一个 Python 表达式（从技术上说是一个条件列表）被解析并求值，并使用globals 和 locals 字典作为全局和局部命名空间。 如果 globals 字典存在且不包含以 <code>__builtins__ </code>为键的值，则会在解析 expression 之前插入以此为键的对内置模块 <a href="https://docs.python.org/zh-cn/3/library/builtins.html#module-builtins">builtins</a> 的引用。 这意味着 expression 通常具有对标准 <a href="https://docs.python.org/zh-cn/3/library/builtins.html#module-builtins">builtins</a> 模块的完全访问权限且受限的环境会被传播。 如果省略 locals 字典则其默认值为 globals 字典。 如果两个字典同时省略，则表达式执行时会使用 eval() 被调用的环境中的 globals 和 locals。 请注意，eval() 并没有对外围环境下的 (非局部)<a href="https://docs.python.org/zh-cn/3/glossary.html#term-nested-scope">嵌套作用域</a> 的访问权限。
返回值就是表达式的求值结果。 语法错误将作为异常被报告。 例如：
&gt;&gt;&gt; x = 1
&gt;&gt;&gt; eval('x+1')
2
这个函数也可以用来执行任何代码对象（如<a href="https://docs.python.org/zh-cn/3/library/functions.html#compile">compile()</a>创建的）。这种情况下，参数是代码对象，而不是字符串。如果编译该对象时的 mode 实参是<code>'exec'</code> 那么 eval() 返回值为 <code>None </code>
提示： exec() 函数支持动态执行语句。 <a href="https://docs.python.org/zh-cn/3/library/functions.html#globals">globals()</a> 和 <a href="https://docs.python.org/zh-cn/3/library/functions.html#locals">locals()</a> 函数各自返回当前的全局和本地字典，因此您可以将它们传递给 eval() 或 <a href="https://docs.python.org/zh-cn/3/library/functions.html#exec">exec()</a> 来使用。</p>
</blockquote>
<hr>
<p>实战：</p>
<h3 id="传递全局变量">传递全局变量</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(eval(<span style="color:#e6db74">&#34;{&#39;name&#39;:&#39;linux&#39;,&#39;age&#39;:age}&#34;</span>,{<span style="color:#e6db74">&#34;age&#34;</span>:<span style="color:#ae81ff">1822</span>}))
{<span style="color:#e6db74">&#39;name&#39;</span>: <span style="color:#e6db74">&#39;linux&#39;</span>, <span style="color:#e6db74">&#39;age&#39;</span>: <span style="color:#ae81ff">1822</span>}
</code></pre></div><h3 id="传递本地变量">传递本地变量</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> age<span style="color:#f92672">=</span><span style="color:#ae81ff">18</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">print</span>(eval(<span style="color:#e6db74">&#34;{&#39;name&#39;:&#39;linux&#39;,&#39;age&#39;:age}&#34;</span>,{<span style="color:#e6db74">&#34;age&#34;</span>:<span style="color:#ae81ff">1822</span>},locals()))
{<span style="color:#e6db74">&#39;name&#39;</span>: <span style="color:#e6db74">&#39;linux&#39;</span>, <span style="color:#e6db74">&#39;age&#39;</span>: <span style="color:#ae81ff">18</span>}
</code></pre></div><h3 id="传递参数其实可以如下实现伪">传递参数其实可以如下实现（伪）</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> eval(<span style="color:#e6db74">&#39;print&#39;</span>)(<span style="color:#e6db74">&#39;123&#39;</span>)
<span style="color:#ae81ff">123</span>
</code></pre></div><h3 id="不可进行任何形式的赋值">不可进行任何形式的赋值</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> eval(<span style="color:#e6db74">&#39;a=1&#39;</span>)
Traceback (most recent call last):
  File <span style="color:#e6db74">&#34;&lt;pyshell#0&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
    eval(<span style="color:#e6db74">&#39;a=1&#39;</span>)
  File <span style="color:#e6db74">&#34;&lt;string&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>
    a<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
     <span style="color:#f92672">^</span>
<span style="color:#a6e22e">SyntaxError</span>: invalid syntax
</code></pre></div>]]></description><category domain="https://raycoder.me/categories/python/">Python</category><category domain="https://raycoder.me/categories/python%E5%85%B3%E9%94%AE%E5%AD%97/">Python关键字</category><category domain="https://raycoder.me/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Python学习笔记</category><category domain="https://raycoder.me/tags/python/">Python</category><category domain="https://raycoder.me/tags/python%E8%BF%9B%E9%98%B6/">Python进阶</category><category domain="https://raycoder.me/tags/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/">内置函数</category><category domain="https://raycoder.me/tags/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Python学习笔记</category></item><item><title>从零开始写一个音乐爬虫-4：QQ音乐</title><link>https://raycoder.me/p/qqmusic-spider-artlist/</link><guid isPermaLink="true">https://raycoder.me/p/qqmusic-spider-artlist/</guid><pubDate>Thu, 05 Mar 2020 10:43:15 +0800</pubDate><description><![CDATA[<p>划了这么多天水，我终于回来了……
<img src="https://raycoder.me/post-images/1583376357108.jpg" alt="">
毕竟博主也是要上课的,QwQ。
最近终于抽出一些时间了，研究研究QQ音乐的爬虫。
我们随便打开一个歌单(<a href="https://y.qq.com/n/yqq/playlist/6809716883.html">https://y.qq.com/n/yqq/playlist/6809716883.html</a>)，登录自己的QQ：
<img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316130255.png" alt="https://y.qq.com/n/yqq/playlist/6809716883.html" title="https://y.qq.com/n/yqq/playlist/6809716883.html">
？QQ音乐竟然还对网页端做限制！<img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316130506.png" alt="">
根据我多年的前(摸)端(爬)开(滚)发(打)经验，这种网站一定是通过<code>JS</code>做限制，并且在浏览器的<code>Network</code>中一定会有相关的数据。
我们先打开一个音乐链接(<a href="https://y.qq.com/n/yqq/song/004WKx9W0E7skj.html">https://y.qq.com/n/yqq/song/004WKx9W0E7skj.html</a> ==&gt; 播放)：
<img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316130739.png" alt="">
发现所有的音乐最后都指向<a href="https://y.qq.com/portal/player.html">https://y.qq.com/portal/player.html</a>这个网址。所以我们可以做如下判断：这个东西是通过传<code>Cookie</code>来播放音乐的，所以它的<code>Network</code>中绝对会有相应的<code>音乐文件</code>    。
果不其然，里边有一个如下的链接：
<code>https://isure.stream.qqmusic.qq.com/C400003jblv923cckE.m4a?guid=2092345306&amp;vkey=0C2C0214E13FDAA60DF4560C8CAFB591C5C8D31854F25B79A59E07FE292AFF133E2B053C4A96C190ACA1582BD0476710ECCF87F6826D15A2&amp;uin=4354&amp;fromtag=66</code>
经过观察，发现它的格式如下：
<code>https://isure.stream.qqmusic.qq.com/C400&lt;MID&gt;.m4a?guid=&lt;GUID&gt;&amp;vkey=&lt;VKEY&gt;&amp;uin=4354&amp;fromtag=66</code>，<code>uin</code>和<code>fromtag</code>是不变的。
所以我们再返回歌单页，打开控制台，找到了如下文件：
<img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316130803.png" alt="">
好的，我们通过观察，发现这是一个格式类似于如下的文件：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{<span style="color:#960050;background-color:#1e0010">&#39;accessed_favbase&#39;:</span> <span style="color:#960050;background-color:#1e0010">1,</span>
 <span style="color:#960050;background-color:#1e0010">&#39;accessed_plaza_cache&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
 <span style="color:#960050;background-color:#1e0010">&#39;cdlist&#39;:</span> <span style="color:#960050;background-color:#1e0010">[{&#39;album_pic_mid&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;buynum&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;cmtnum&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;coveradurl&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;ctime&#39;:</span> <span style="color:#960050;background-color:#1e0010">1552789122,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;cur_song_num&#39;:</span> <span style="color:#960050;background-color:#1e0010">70,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;desc&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;YouTuber阿神背景音乐，Bob们快来听听吧！阿神加油，我们会永远支持你的！&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;dir_pic_url2&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;dir_show&#39;:</span> <span style="color:#960050;background-color:#1e0010">1,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;dirid&#39;:</span> <span style="color:#960050;background-color:#1e0010">2,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;dissid&#39;:</span> <span style="color:#960050;background-color:#1e0010">6809716,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;dissname&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;阿神常用BGM&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;disstid&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;6809716883&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;disstype&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;encrypt_uin&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;oK6kowEAoK4z7eSiNevzoivlov**&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;headurl&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1iaxx2AdrAQDGlibrNZicyaYspzibEWTeCIHOGHPpMOau3MFofE1e5oJwEGHTrBUzrLegbPYiaNOicPaQ/132&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;ifpicurl&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;isAd&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;isdj&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;isvip&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;login&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;oK-57KEA7w4ion**&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;logo&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;http://qpic.y.qq.com/music_cover/huYTu7R6ZfqKlvicEsOAPc5D6PTtzz0caVENpSkmJnF4IbCCI7iaWqnz7SQXcf474k/300?n=1&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;mtime&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;nick&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;Max&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;nickname&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;Max&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;owndir&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;pic_dpi&#39;:</span> <span style="color:#960050;background-color:#1e0010">300,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;pic_mid&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;scoreavage&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;0.0&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;scoreusercount&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;singerid&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;singermid&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;song_begin&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;song_update_num&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;song_update_time&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;songids&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;108412441,108412318,236593788,212656442,204897711,203546728,101688454,201272163,215240933,201272176,105055346,125803989,201287859,4998977,220183309,1875424,200448238,107600922,202985843,201272151,102994348,4941179,200980117,102179620,108412364,1144219,108920995,4799526,200316483,125586926,108547678,214531352,214483351,108412363,225361408,201272168,201272164,213407792,215240934,108031940,109296153,102215437,203021286,104769082,201272157,200980118,213407791,201272160,200980114,201272153,200980111,201438505,201272165,109996034,202916713,202617948,109296152,201422059,200604508,203836723,9072513,201255271,201287877,102222132,105389125,108412359,215360418,109225063,102206145,219032454&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;songlist&#39;:</span> <span style="color:#960050;background-color:#1e0010">[{&#39;action&#39;:</span> <span style="color:#960050;background-color:#1e0010">{&#39;alert&#39;:</span> <span style="color:#960050;background-color:#1e0010">2,</span>
                                      <span style="color:#960050;background-color:#1e0010">&#39;icons&#39;:</span> <span style="color:#960050;background-color:#1e0010">8535932,</span>
                                      <span style="color:#960050;background-color:#1e0010">&#39;msgid&#39;:</span> <span style="color:#960050;background-color:#1e0010">14,</span>
                                      <span style="color:#960050;background-color:#1e0010">&#39;msgpay&#39;:</span> <span style="color:#960050;background-color:#1e0010">6,</span>
                                      <span style="color:#960050;background-color:#1e0010">&#39;switch&#39;:</span> <span style="color:#960050;background-color:#1e0010">17409795</span>}<span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;album&#39;:</span> {<span style="color:#960050;background-color:#1e0010">&#39;id&#39;:</span> <span style="color:#960050;background-color:#1e0010">1594129,</span>
                                     <span style="color:#960050;background-color:#1e0010">&#39;mid&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;001j2IHy2CkIaz&#39;,</span>
                                     <span style="color:#960050;background-color:#1e0010">&#39;name&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;UNDERTALE</span> <span style="color:#960050;background-color:#1e0010">Soundtrack&#39;,</span>
                                     <span style="color:#960050;background-color:#1e0010">&#39;pmid&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;001j2IHy2CkIaz_2&#39;,</span>
                                     <span style="color:#960050;background-color:#1e0010">&#39;subtitle&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;&#39;,</span>
                                     <span style="color:#960050;background-color:#1e0010">&#39;title&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;UNDERTALE</span> <span style="color:#960050;background-color:#1e0010">Soundtrack&#39;</span>}<span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;file&#39;:</span> {<span style="color:#960050;background-color:#1e0010">&#39;b_30s&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;e_30s&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;media_mid&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;003jblv923cckE&#39;,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_128&#39;:</span> <span style="color:#960050;background-color:#1e0010">724989,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_128mp3&#39;:</span> <span style="color:#960050;background-color:#1e0010">724989,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_192aac&#39;:</span> <span style="color:#960050;background-color:#1e0010">1046138,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_192ogg&#39;:</span> <span style="color:#960050;background-color:#1e0010">807221,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_24aac&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_320&#39;:</span> <span style="color:#960050;background-color:#1e0010">1812101,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_320mp3&#39;:</span> <span style="color:#960050;background-color:#1e0010">1812101,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_48aac&#39;:</span> <span style="color:#960050;background-color:#1e0010">264852,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_96aac&#39;:</span> <span style="color:#960050;background-color:#1e0010">523498,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_aac&#39;:</span> <span style="color:#960050;background-color:#1e0010">264852,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_ape&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_dts&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_flac&#39;:</span> <span style="color:#960050;background-color:#1e0010">2120013,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_ogg&#39;:</span> <span style="color:#960050;background-color:#1e0010">807221,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;size_try&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;try_begin&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
                                    <span style="color:#960050;background-color:#1e0010">&#39;try_end&#39;:</span> <span style="color:#960050;background-color:#1e0010">0</span>}<span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;fnote&#39;:</span> <span style="color:#ae81ff">4009</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;genre&#39;:</span> <span style="color:#ae81ff">37</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;id&#39;:</span> <span style="color:#ae81ff">108412441</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;index_album&#39;:</span> <span style="color:#ae81ff">44</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;index_cd&#39;:</span> <span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;interval&#39;:</span> <span style="color:#ae81ff">45</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;isonly&#39;:</span> <span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;ksong&#39;:</span> {<span style="color:#960050;background-color:#1e0010">&#39;id&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span> <span style="color:#960050;background-color:#1e0010">&#39;mid&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;&#39;</span>}<span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;language&#39;:</span> <span style="color:#ae81ff">9</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;mid&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#ae81ff">004</span><span style="color:#960050;background-color:#1e0010">WKx</span><span style="color:#ae81ff">9</span><span style="color:#960050;background-color:#1e0010">W</span><span style="color:#ae81ff">0E7</span><span style="color:#960050;background-color:#1e0010">skj&#39;,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;mv&#39;:</span> {<span style="color:#960050;background-color:#1e0010">&#39;id&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span> <span style="color:#960050;background-color:#1e0010">&#39;vid&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;&#39;</span>}<span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;name&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;Tem</span> <span style="color:#960050;background-color:#1e0010">Shop&#39;,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;ov&#39;:</span> <span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;pay&#39;:</span> {<span style="color:#960050;background-color:#1e0010">&#39;pay_down&#39;:</span> <span style="color:#960050;background-color:#1e0010">1,</span>
                                   <span style="color:#960050;background-color:#1e0010">&#39;pay_month&#39;:</span> <span style="color:#960050;background-color:#1e0010">1,</span>
                                   <span style="color:#960050;background-color:#1e0010">&#39;pay_play&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
                                   <span style="color:#960050;background-color:#1e0010">&#39;pay_status&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
                                   <span style="color:#960050;background-color:#1e0010">&#39;price_album&#39;:</span> <span style="color:#960050;background-color:#1e0010">0,</span>
                                   <span style="color:#960050;background-color:#1e0010">&#39;price_track&#39;:</span> <span style="color:#960050;background-color:#1e0010">200,</span>
                                   <span style="color:#960050;background-color:#1e0010">&#39;time_free&#39;:</span> <span style="color:#960050;background-color:#1e0010">0</span>}<span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;sa&#39;:</span> <span style="color:#ae81ff">16</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;singer&#39;:</span> [{<span style="color:#960050;background-color:#1e0010">&#39;id&#39;:</span> <span style="color:#960050;background-color:#1e0010">1204192,</span>
                                       <span style="color:#960050;background-color:#1e0010">&#39;mid&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;0045aGTp3XRXLD&#39;,</span>
                                       <span style="color:#960050;background-color:#1e0010">&#39;name&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;Toby</span> <span style="color:#960050;background-color:#1e0010">Fox&#39;,</span>
                                       <span style="color:#960050;background-color:#1e0010">&#39;title&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;Toby</span> <span style="color:#960050;background-color:#1e0010">Fox&#39;</span>}]<span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;songtype&#39;:</span> <span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;status&#39;:</span> <span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;subtitle&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;&#39;,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;tid&#39;:</span> <span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;time_public&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#ae81ff">2015-09-15</span><span style="color:#960050;background-color:#1e0010">&#39;,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;title&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;Tem</span> <span style="color:#960050;background-color:#1e0010">Shop&#39;,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;type&#39;:</span> <span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;url&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;&#39;,</span>
                           <span style="color:#960050;background-color:#1e0010">&#39;volume&#39;:</span> {<span style="color:#960050;background-color:#1e0010">&#39;gain&#39;:</span> <span style="color:#960050;background-color:#1e0010">0.0,</span> <span style="color:#960050;background-color:#1e0010">&#39;lra&#39;:</span> <span style="color:#960050;background-color:#1e0010">0.0,</span> <span style="color:#960050;background-color:#1e0010">&#39;peak&#39;:</span> <span style="color:#960050;background-color:#1e0010">0.0</span>}<span style="color:#960050;background-color:#1e0010">},</span>
             <span style="color:#960050;background-color:#1e0010">&#39;songnum&#39;:</span> <span style="color:#ae81ff">70</span><span style="color:#960050;background-color:#1e0010">,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;songtypes&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#ae81ff">13</span><span style="color:#960050;background-color:#1e0010">&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;tags&#39;:</span> [{<span style="color:#960050;background-color:#1e0010">&#39;id&#39;:</span> <span style="color:#960050;background-color:#1e0010">199,</span> <span style="color:#960050;background-color:#1e0010">&#39;name&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;背景音乐&#39;,</span> <span style="color:#960050;background-color:#1e0010">&#39;pid&#39;:</span> <span style="color:#960050;background-color:#1e0010">199</span>},
                      {<span style="color:#960050;background-color:#1e0010">&#39;id&#39;:</span> <span style="color:#960050;background-color:#1e0010">117,</span> <span style="color:#960050;background-color:#1e0010">&#39;name&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;快乐&#39;,</span> <span style="color:#960050;background-color:#1e0010">&#39;pid&#39;:</span> <span style="color:#960050;background-color:#1e0010">117</span>},
                      {<span style="color:#960050;background-color:#1e0010">&#39;id&#39;:</span> <span style="color:#960050;background-color:#1e0010">116,</span> <span style="color:#960050;background-color:#1e0010">&#39;name&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;治愈&#39;,</span> <span style="color:#960050;background-color:#1e0010">&#39;pid&#39;:</span> <span style="color:#960050;background-color:#1e0010">116</span>}]<span style="color:#960050;background-color:#1e0010">,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;total_song_num&#39;:</span> <span style="color:#ae81ff">70</span><span style="color:#960050;background-color:#1e0010">,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;type&#39;:</span> <span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;uin&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;oK</span><span style="color:#ae81ff">6</span><span style="color:#960050;background-color:#1e0010">kowEAoK</span><span style="color:#ae81ff">4</span><span style="color:#960050;background-color:#1e0010">z</span><span style="color:#ae81ff">7</span><span style="color:#960050;background-color:#1e0010">eSiNevzoivlov**&#39;,</span>
             <span style="color:#960050;background-color:#1e0010">&#39;visitnum&#39;:</span> <span style="color:#ae81ff">170366</span><span style="color:#960050;background-color:#1e0010">}],</span>
 <span style="color:#960050;background-color:#1e0010">&#39;cdnum&#39;:</span> <span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">,</span>
 <span style="color:#960050;background-color:#1e0010">&#39;code&#39;:</span> <span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">,</span>
 <span style="color:#960050;background-color:#1e0010">&#39;login&#39;:</span> <span style="color:#960050;background-color:#1e0010">&#39;oK</span><span style="color:#ae81ff">-57</span><span style="color:#960050;background-color:#1e0010">KEA</span><span style="color:#ae81ff">7</span><span style="color:#960050;background-color:#1e0010">w</span><span style="color:#ae81ff">4</span><span style="color:#960050;background-color:#1e0010">ion**&#39;,</span>
 <span style="color:#960050;background-color:#1e0010">&#39;realcdnum&#39;:</span> <span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">,</span>
 <span style="color:#960050;background-color:#1e0010">&#39;subcode&#39;:</span> <span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>很容易看出，里面有我们所需的<code>&lt;MID&gt;</code>。但是<code>&lt;VKEY&gt;</code>并没有出现。所以，我们必须换一种思路了。
查找了网络上的资料，发现有一个音乐信息外链：
<code>https://u.y.qq.com/cgi-bin/musicu.fcg?format=json&amp;data=%7B%22req_0%22%3A%7B%22module%22%3A%22vkey.GetVkeyServer%22%2C%22method%22%3A%22CgiGetVkey%22%2C%22param%22%3A%7B%22guid%22%3A%22358840384%22%2C%22songmid%22%3A%5B%22&lt;MID&gt;%22%5D%2C%22songtype%22%3A%5B0%5D%2C%22uin%22%3A%221443481947%22%2C%22loginflag%22%3A1%2C%22platform%22%3A%2220%22%7D%7D%2C%22comm%22%3A%7B%22uin%22%3A%2218585073516%22%2C%22format%22%3A%22json%22%2C%22ct%22%3A24%2C%22cv%22%3A0%7D%7D</code>
这个是经过<code>URL编码</code>的，解密后结果如下：
<code>https://u.y.qq.com/cgi-bin/musicu.fcg?format=json&amp;data={&quot;req_0&quot;:{&quot;module&quot;:&quot;vkey.GetVkeyServer&quot;,&quot;method&quot;:&quot;CgiGetVkey&quot;,&quot;param&quot;:{&quot;guid&quot;:&quot;358840384&quot;,&quot;songmid&quot;:[&quot;&lt;MID&gt;&quot;],&quot;songtype&quot;:[0],&quot;uin&quot;:&quot;1443481947&quot;,&quot;loginflag&quot;:1,&quot;platform&quot;:&quot;20&quot;}},&quot;comm&quot;:{&quot;uin&quot;:&quot;18585073516&quot;,&quot;format&quot;:&quot;json&quot;,&quot;ct&quot;:24,&quot;cv&quot;:0}}</code>
好的，看来我们只需要这个<code>&lt;MID&gt;</code>即可。
我们在上面的步骤已经获得了<code>&lt;MID&gt;</code>，把它放进那个URL，会找到一个数据文件。如下(链接：<a href="https://u.y.qq.com/cgi-bin/musicu.fcg?format=json&amp;data=%7B%22req_0%22%3A%7B%22module%22%3A%22vkey.GetVkeyServer%22%2C%22method%22%3A%22CgiGetVkey%22%2C%22param%22%3A%7B%22guid%22%3A%22358840384%22%2C%22songmid%22%3A%5B%22004WKx9W0E7skj%22%5D%2C%22songtype%22%3A%5B0%5D%2C%22uin%22%3A%221443481947%22%2C%22loginflag%22%3A1%2C%22platform%22%3A%2220%22%7D%7D%2C%22comm%22%3A%7B%22uin%22%3A%2218585073516%22%2C%22format%22%3A%22json%22%2C%22ct%22%3A24%2C%22cv%22%3A0%7D%7D">https://u.y.qq.com/cgi-bin/musicu.fcg?format=json&amp;data=%7B%22req_0%22%3A%7B%22module%22%3A%22vkey.GetVkeyServer%22%2C%22method%22%3A%22CgiGetVkey%22%2C%22param%22%3A%7B%22guid%22%3A%22358840384%22%2C%22songmid%22%3A%5B%22004WKx9W0E7skj%22%5D%2C%22songtype%22%3A%5B0%5D%2C%22uin%22%3A%221443481947%22%2C%22loginflag%22%3A1%2C%22platform%22%3A%2220%22%7D%7D%2C%22comm%22%3A%7B%22uin%22%3A%2218585073516%22%2C%22format%22%3A%22json%22%2C%22ct%22%3A24%2C%22cv%22%3A0%7D%7D</a>)：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{<span style="color:#f92672">&#34;code&#34;</span>:<span style="color:#ae81ff">0</span>,<span style="color:#f92672">&#34;ts&#34;</span>:<span style="color:#ae81ff">1583379252481</span>,<span style="color:#f92672">&#34;req_0&#34;</span>:{<span style="color:#f92672">&#34;code&#34;</span>:<span style="color:#ae81ff">0</span>,<span style="color:#f92672">&#34;data&#34;</span>:{ <span style="color:#f92672">&#34;expiration&#34;</span>: <span style="color:#ae81ff">80400</span>, <span style="color:#f92672">&#34;login_key&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;midurlinfo&#34;</span>: [ { <span style="color:#f92672">&#34;common_downfromtag&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;errtype&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;filename&#34;</span>: <span style="color:#e6db74">&#34;C400003jblv923cckE.m4a&#34;</span>, <span style="color:#f92672">&#34;flowfromtag&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;flowurl&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;hisbuy&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;hisdown&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;isbuy&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;isonly&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;onecan&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;opi128kurl&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;opi192koggurl&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;opi192kurl&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;opi30surl&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;opi48kurl&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;opi96kurl&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;opiflackurl&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;p2pfromtag&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;pdl&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;pneed&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;pneedbuy&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;premain&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;purl&#34;</span>: <span style="color:#e6db74">&#34;C400003jblv923cckE.m4a?guid=358840384&amp;vkey=9B9B50B3B25F0A5B339075E830EDE2E10FDC429A412FD272C65C2C0BA96846C98CF95F046C4B6E76BB16191F791104AB1B949E0C5168C3D0&amp;uin=0&amp;fromtag=66&#34;</span>, <span style="color:#f92672">&#34;qmdlfromtag&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;result&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;songmid&#34;</span>: <span style="color:#e6db74">&#34;004WKx9W0E7skj&#34;</span>, <span style="color:#f92672">&#34;tips&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;uiAlert&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;vip_downfromtag&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;vkey&#34;</span>: <span style="color:#e6db74">&#34;9B9B50B3B25F0A5B339075E830EDE2E10FDC429A412FD272C65C2C0BA96846C98CF95F046C4B6E76BB16191F791104AB1B949E0C5168C3D0&#34;</span>, <span style="color:#f92672">&#34;wififromtag&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;wifiurl&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span> } ], <span style="color:#f92672">&#34;msg&#34;</span>: <span style="color:#e6db74">&#34;&lt;IP&gt;&#34;</span>, <span style="color:#f92672">&#34;retcode&#34;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&#34;servercheck&#34;</span>: <span style="color:#e6db74">&#34;0502f67d8cf451662c4b46417d571295&#34;</span>, <span style="color:#f92672">&#34;sip&#34;</span>: [ <span style="color:#e6db74">&#34;http:\/\/ws.stream.qqmusic.qq.com\/&#34;</span>, <span style="color:#e6db74">&#34;http:\/\/isure.stream.qqmusic.qq.com\/&#34;</span> ], <span style="color:#f92672">&#34;testfile2g&#34;</span>: <span style="color:#e6db74">&#34;C400003mAan70zUy5O.m4a?guid=358840384&amp;vkey=62F3CE198C73F66E7207E03BFB4F4C29BC086BF77E55DDC7C81ECEB156B8736E26F5B8360E5C63E0B6ADAB89779732648AF943136A70DC05&amp;uin=&amp;fromtag=3&#34;</span>, <span style="color:#f92672">&#34;testfilewifi&#34;</span>: <span style="color:#e6db74">&#34;C400003mAan70zUy5O.m4a?guid=358840384&amp;vkey=62F3CE198C73F66E7207E03BFB4F4C29BC086BF77E55DDC7C81ECEB156B8736E26F5B8360E5C63E0B6ADAB89779732648AF943136A70DC05&amp;uin=&amp;fromtag=3&#34;</span>, <span style="color:#f92672">&#34;thirdip&#34;</span>: [ <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span> ], <span style="color:#f92672">&#34;uin&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#f92672">&#34;verify_type&#34;</span>: <span style="color:#ae81ff">0</span> }}}
</code></pre></div><p>再把<code>purl</code>代入外链<code>https://isure.stream.qqmusic.qq.com</code>(<code>http://ws.stream.qqmusic.qq.com</code>也可以)，得到如下链接：
<code>https://isure.stream.qqmusic.qq.com/C400003jblv923cckE.m4a?guid=358840384&amp;vkey=9B9B50B3B25F0A5B339075E830EDE2E10FDC429A412FD272C65C2C0BA96846C98CF95F046C4B6E76BB16191F791104AB1B949E0C5168C3D0&amp;uin=0&amp;fromtag=66</code>
打开，便是我们想要的音乐文件了。下载音乐，请参考我的前两篇文章：
<a href="/post/CUlLXMwcx/" class="LinkCard">从零开始写一个音乐爬虫-2-网易云音乐：下载音乐文件</a>
<a href="/post/lOWHTeAPC/" class="LinkCard">从零开始写一个音乐爬虫-3-酷狗音乐</a>
代码之后放上来。</p>
]]></description><category domain="https://raycoder.me/categories/python/">Python</category><category domain="https://raycoder.me/categories/%E7%88%AC%E8%99%AB/">爬虫</category><category domain="https://raycoder.me/tags/python/">Python</category><category domain="https://raycoder.me/tags/%E7%88%AC%E8%99%AB/">爬虫</category><category domain="https://raycoder.me/tags/qq%E9%9F%B3%E4%B9%90/">QQ音乐</category><category domain="https://raycoder.me/tags/%E7%A6%8F%E5%88%A9/">福利</category><category domain="https://raycoder.me/tags/%E7%A0%B4%E8%A7%A3/">破解</category><category domain="https://raycoder.me/tags/%E9%9F%B3%E4%B9%90/">音乐</category><category domain="https://raycoder.me/tags/%E4%BC%9A%E5%91%98/">会员</category><category domain="https://raycoder.me/tags/python%E8%BF%9B%E9%98%B6/">Python进阶</category></item><item><title>从零开始写一个音乐爬虫-2：下载音乐文件</title><link>https://raycoder.me/p/music-spider-downloader/</link><guid isPermaLink="true">https://raycoder.me/p/music-spider-downloader/</guid><pubDate>Tue, 25 Feb 2020 08:27:44 +0800</pubDate><description><![CDATA[<p><strong>上一篇文章我写了爬取网易云音乐歌单中音乐ID及下载链接的教程，这一期我们就应该把文件下载下来了。</strong></p>
<p>下载文件，我们通过Python3的<code>urllib</code>模块可以很轻松地实现。
新建一个<code>download.py</code>文件。</p>
<p>下载音乐主要的代码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#75715e">#!/usr/bin/env python</span>
<span style="color:#75715e">#-*- coding:utf8 -*-</span>
<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">@Author  :   Ray
</span><span style="color:#e6db74">@Contact :   ray@raycoder.me
</span><span style="color:#e6db74">@Software:   PyCharm
</span><span style="color:#e6db74">@File    :   download.py
</span><span style="color:#e6db74">@Time    :   2019/11/4 21:19
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
<span style="color:#f92672">import</span> urllib<span style="color:#f92672">,</span> time<span style="color:#f92672">,</span> os

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">downloadMusic</span>(music_dictionary, path): <span style="color:#75715e">#下载音乐</span>
    exist <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(path)
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> exist:
        os<span style="color:#f92672">.</span>makedirs(path)
    complete <span style="color:#f92672">=</span> []
    failed <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> music_dictionary:
        <span style="color:#66d9ef">try</span>:
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;正在下载：&#39;</span> <span style="color:#f92672">+</span> i)
            trans <span style="color:#f92672">=</span> str<span style="color:#f92672">.</span>maketrans(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">/*?:&#34;|&lt;&gt;&#39;</span>, <span style="color:#e6db74">&#39;         &#39;</span>)
            urllib<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>urlretrieve(music_dictionary[i], path <span style="color:#f92672">+</span> i<span style="color:#f92672">.</span>translate(trans) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;.mp3&#39;</span>)
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;下载完成！&#39;</span>)
            complete<span style="color:#f92672">.</span>append(i)
            time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">1</span>)
        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">OSError</span> <span style="color:#66d9ef">as</span> e:
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;下载失败：&#39;</span> <span style="color:#f92672">+</span> i <span style="color:#f92672">+</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;失败原因：&#39;</span> <span style="color:#f92672">+</span> str(e))
            failed<span style="color:#f92672">.</span>append(i)
    <span style="color:#66d9ef">if</span> complete:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;下载成功：&#34;</span>)
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> complete:
            <span style="color:#66d9ef">print</span>(str(complete<span style="color:#f92672">.</span>index(i) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;.</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> i)
        <span style="color:#66d9ef">print</span>()
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;无下载成功&#34;</span>)

    <span style="color:#66d9ef">if</span> failed:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;下载失败：&#34;</span>)
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> failed:
            <span style="color:#66d9ef">print</span>(str(failed<span style="color:#f92672">.</span>index(i) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;.</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> i)
        <span style="color:#66d9ef">print</span>()
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;无下载失败&#34;</span>)

</code></pre></div><p>测试：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> CloudMusicSpider
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_test</span>():
    spider <span style="color:#f92672">=</span> CloudMusicSpider()
    downloadMusic(spider<span style="color:#f92672">.</span>getArtUrl(<span style="color:#e6db74">&#39;https://music.163.com/#/playlist?id=4874770876&#39;</span>))

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    _test()
</code></pre></div><p>结果：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">正在下载：Prelude
下载完成！
正在下载：Marble Soda [Explicit]
下载完成！
正在下载：Snowdin Town
下载完成！
正在下载：Monkeys Spinning Monkeys
下载完成！
正在下载：Overworld Theme (GFM Trap Remix)
下载完成！
正在下载：Pizza
下载完成！
正在下载：King Dedede
下载完成！
正在下载：Undertale
下载完成！
正在下载：sans.
下载完成！
正在下载：Tem Shop
下载完成！
正在下载：Undertale - Snowdin Town (****** Bootleg)
下载失败：Undertale - Snowdin Town (****** Bootleg)	失败原因：[Errno 22] Invalid argument: &#39;Undertale - Snowdin Town (****** Bootleg).mp3&#39;
正在下载：It&#39;s Not Like I Like You!!(Instrumental)
下载完成！
正在下载：似顔絵広場 (似顔絵チャンネル)
下载完成！
正在下载：ステージ：コミカル (サンドキャニオン)
下载完成！
正在下载：I Love You
下载完成！
正在下载：Ice Cream
下载完成！
正在下载：Dying
下载完成！
下载成功：
1.	Prelude
2.	Marble Soda [Explicit]
3.	Snowdin Town
4.	Monkeys Spinning Monkeys
5.	Overworld Theme (GFM Trap Remix)
6.	Pizza
7.	King Dedede
8.	Undertale
9.	sans.
10.	Tem Shop
11.	It&#39;s Not Like I Like You!!(Instrumental)
12.	似顔絵広場 (似顔絵チャンネル)
13.	ステージ：コミカル (サンドキャニオン)
14.	I Love You
15.	Ice Cream
16.	Dying

下载失败：
1.	Undertale - Snowdin Town (****** Bootleg)
</code></pre></div><p>之后就可以在保存源文件的目录下<code>downloads</code>文件夹看到音乐文件了。</p>
<p>想要下载歌词的只需修改<code>getArtUrl()</code>函数即可，外链为<code>http://music.163.com/api/song/lyric?id=音乐ID&amp;lv=1&amp;kv=1&amp;tv=-1</code>。</p>
<p>P.S：上面那个下载失败的是因为文件名中有<code>*</code>号，而Windows是不让保存的。所以我要用<code>str.translate()</code>方法将这些字符批量替换。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>
<span style="color:#75715e">#-*- coding:utf8 -*-</span>
<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">@Author  :   Ray
</span><span style="color:#e6db74">@Contact :   nn_201412@qq.com
</span><span style="color:#e6db74">@Software:   PyCharm
</span><span style="color:#e6db74">@File    :   init.py
</span><span style="color:#e6db74">@Time    :   2019/11/4 21:19
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
<span style="color:#f92672">import</span> requests<span style="color:#f92672">,</span> re<span style="color:#f92672">,</span> urllib<span style="color:#f92672">,</span> os
<span style="color:#f92672">from</span> fake_useragent <span style="color:#f92672">import</span> UserAgent
<span style="color:#f92672">from</span> time <span style="color:#f92672">import</span> sleep

exist <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(<span style="color:#e6db74">&#39;downloads/&#39;</span>)
<span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> exist:
    os<span style="color:#f92672">.</span>makedirs(<span style="color:#e6db74">&#39;downloads/&#39;</span>)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CloudmusicSpider</span>():
    HEADER <span style="color:#f92672">=</span> {  <span style="color:#75715e"># 伪造请求头，防止被封</span>
        <span style="color:#e6db74">&#39;Accept&#39;</span>: <span style="color:#e6db74">&#39;*/*&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Encoding&#39;</span>: <span style="color:#e6db74">&#39;gzip,deflate,sdch&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Language&#39;</span>: <span style="color:#e6db74">&#39;zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4&#39;</span>,
        <span style="color:#e6db74">&#39;Connection&#39;</span>: <span style="color:#e6db74">&#39;keep-alive&#39;</span>,
        <span style="color:#e6db74">&#39;Content-Type&#39;</span>: <span style="color:#e6db74">&#39;application/x-www-form-urlencoded&#39;</span>,
        <span style="color:#e6db74">&#39;Host&#39;</span>: <span style="color:#e6db74">&#39;music.163.com&#39;</span>,
        <span style="color:#e6db74">&#39;Referer&#39;</span>: <span style="color:#e6db74">&#39;https://music.163.com/&#39;</span>,
        <span style="color:#e6db74">&#39;User-Agent&#39;</span>: UserAgent()<span style="color:#f92672">.</span>random
    }
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getUrl</span>(self, artlist_url): <span style="color:#75715e">#获取音乐真实ID的函数</span>
        outerUrl <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://music.163.com/song/media/outer/url?id={0:s}.mp3&#34;</span> <span style="color:#75715e">#外链地址</span>
        response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url<span style="color:#f92672">=</span>artlist_url<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;#/&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>), headers<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>HEADER) <span style="color:#75715e">#网易云音乐使用异步加载，需要去掉&#34;#/&#34;</span>
        songs <span style="color:#f92672">=</span> {}
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;&lt;a href=&#34;/song\?id=(\d+)&#34;&gt;(.*?)&lt;/a&gt;&#39;</span>, response<span style="color:#f92672">.</span>text):
            songs[i[<span style="color:#ae81ff">1</span>]] <span style="color:#f92672">=</span> outerUrl<span style="color:#f92672">.</span>format(i[<span style="color:#ae81ff">0</span>])
        <span style="color:#66d9ef">return</span> songs
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">downloadMusic</span>(self, music_dictionary): <span style="color:#75715e">#下载音乐</span>
        complete <span style="color:#f92672">=</span> []
        failed <span style="color:#f92672">=</span> []
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> music_dictionary<span style="color:#f92672">.</span>keys():
            <span style="color:#66d9ef">try</span>:
                <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;正在下载：&#39;</span> <span style="color:#f92672">+</span> i)
                trans <span style="color:#f92672">=</span> str<span style="color:#f92672">.</span>maketrans(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">/*?:&#34;|&lt;&gt;&#39;</span>, <span style="color:#e6db74">&#39;         &#39;</span>) <span style="color:#75715e">#一一对应</span>
                urllib<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>urlretrieve(music_dictionary[i], <span style="color:#e6db74">&#39;downloads/&#39;</span> <span style="color:#f92672">+</span> i<span style="color:#f92672">.</span>translate(trans) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;.mp3&#39;</span>) <span style="color:#75715e">#字符替换</span>
                <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;下载完成！&#39;</span>)
                complete<span style="color:#f92672">.</span>append(i)
                sleep(<span style="color:#ae81ff">1</span>)
            <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">OSError</span> <span style="color:#66d9ef">as</span> e:
                <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;下载失败：&#39;</span> <span style="color:#f92672">+</span> i <span style="color:#f92672">+</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;失败原因：&#39;</span> <span style="color:#f92672">+</span> str(e))
                failed<span style="color:#f92672">.</span>append(i)
        <span style="color:#66d9ef">if</span> complete <span style="color:#f92672">!=</span> []:
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;下载成功：&#34;</span>)
            <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> complete:
                <span style="color:#66d9ef">print</span>(str(complete<span style="color:#f92672">.</span>index(i) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;.</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> i)
            <span style="color:#66d9ef">print</span>()
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;无下载成功&#34;</span>)

        <span style="color:#66d9ef">if</span> failed <span style="color:#f92672">!=</span> []:
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;下载失败：&#34;</span>)
            <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> failed:
                <span style="color:#66d9ef">print</span>(str(failed<span style="color:#f92672">.</span>index(i) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;.</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> i)
            <span style="color:#66d9ef">print</span>()
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;无下载失败&#34;</span>)
</code></pre></div><p>这个代码也需要保存为模块，命名为<code>download.py</code>，以后作为模块备用。</p>
]]></description><category domain="https://raycoder.me/categories/python/">Python</category><category domain="https://raycoder.me/categories/%E7%88%AC%E8%99%AB/">爬虫</category><category domain="https://raycoder.me/tags/python/">Python</category><category domain="https://raycoder.me/tags/%E7%88%AC%E8%99%AB/">爬虫</category><category domain="https://raycoder.me/tags/%E7%A6%8F%E5%88%A9/">福利</category><category domain="https://raycoder.me/tags/%E7%BD%91%E6%98%93/">网易</category><category domain="https://raycoder.me/tags/%E7%A0%B4%E8%A7%A3/">破解</category><category domain="https://raycoder.me/tags/%E9%9F%B3%E4%B9%90/">音乐</category><category domain="https://raycoder.me/tags/%E4%BC%9A%E5%91%98/">会员</category><category domain="https://raycoder.me/tags/python%E8%BF%9B%E9%98%B6/">Python进阶</category></item><item><title>从零开始写一个音乐爬虫-1-网易云音乐：批量获取歌单音乐下载链接</title><link>https://raycoder.me/p/cloudmusic-spider-artlist/</link><guid isPermaLink="true">https://raycoder.me/p/cloudmusic-spider-artlist/</guid><pubDate>Sat, 22 Feb 2020 15:59:37 +0800</pubDate><description><![CDATA[<p><strong>本文将会详细的写从零开始制作网易云音乐爬虫的过程，可以下载网易云音乐音乐付费歌曲，使用Python3开发。</strong></p>
<blockquote>
<p><strong>声明：本文从前端入手，再获得歌曲数据。如果您不想走那么多弯路，请参考这篇文章：<a href="https://zhuanlan.zhihu.com/p/30246788">https://zhuanlan.zhihu.com/p/30246788</a>和这篇文章：<a href="https://www.shangyexinzhi.com/article/details/id-297404">https://www.shangyexinzhi.com/article/details/id-297404</a></strong></p>
<!-- more -->
</blockquote>
<p>本文采用环境：</p>
<ul>
<li>Pycharm + Python 3.7.5</li>
</ul>
<p>所需模块：</p>
<ol>
<li>fake-useragent</li>
<li>requests</li>
<li>re</li>
</ol>
<p>安装方法：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">pip install beautifulsoup4 fake<span style="color:#f92672">-</span>useragent requests
</code></pre></div><p>爬虫思路：</p>
<div class="mermaid">
graph TD;
    初始化程序-->获取链接;
    获取链接-->遍历链接;
    遍历链接-->获取真实下载链接;
    获取真实下载链接-->下载音乐;
</div>
<p>看起来并不是非常困难，是吧？(^o^)/~</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316121330.gif" alt="">
经过分析，发现网易云歌单中的音乐格式如下：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316121355.png" alt=""></p>
<p>好。我们新建一个<code>CloudMusicSpider.py</code>，开始码代码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>
<span style="color:#75715e">#-*- coding:utf8 -*-</span>
<span style="color:#f92672">import</span> requests <span style="color:#75715e">#导入模块</span>
<span style="color:#f92672">from</span> fake_useragent <span style="color:#f92672">import</span> UserAgent <span style="color:#75715e">#导入模块</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getArtUrl</span>(artlist_url): <span style="color:#75715e">#获取音乐真实ID的函数</span>
    outerUrl <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://music.163.com/song/media/outer/url?id={0:s}.mp3&#34;</span> <span style="color:#75715e">#外链地址</span>
    HEADER <span style="color:#f92672">=</span> { <span style="color:#75715e">#伪造请求头，防止被封</span>
        <span style="color:#e6db74">&#39;Accept&#39;</span>: <span style="color:#e6db74">&#39;*/*&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Encoding&#39;</span>: <span style="color:#e6db74">&#39;gzip,deflate,sdch&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Language&#39;</span>: <span style="color:#e6db74">&#39;zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4&#39;</span>,
        <span style="color:#e6db74">&#39;Connection&#39;</span>: <span style="color:#e6db74">&#39;keep-alive&#39;</span>,
        <span style="color:#e6db74">&#39;Content-Type&#39;</span>: <span style="color:#e6db74">&#39;application/x-www-form-urlencoded&#39;</span>,
        <span style="color:#e6db74">&#39;Host&#39;</span>: <span style="color:#e6db74">&#39;music.163.com&#39;</span>,
        <span style="color:#e6db74">&#39;Referer&#39;</span>: <span style="color:#e6db74">&#39;https://music.163.com/search/&#39;</span>,
        <span style="color:#e6db74">&#39;User-Agent&#39;</span>: UserAgent()<span style="color:#f92672">.</span>random
    }
    response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url<span style="color:#f92672">=</span>url<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;#/&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>), headers<span style="color:#f92672">=</span>HEADER) <span style="color:#75715e">#网易云音乐使用异步加载，需要去掉&#34;#/&#34;</span>
    soup <span style="color:#f92672">=</span> BeautifulSoup(response<span style="color:#f92672">.</span>text, <span style="color:#e6db74">&#34;html.parser&#34;</span>) <span style="color:#75715e">#bs4读取</span>
    aList <span style="color:#f92672">=</span> soup<span style="color:#f92672">.</span>select(<span style="color:#e6db74">&#34;a&#34;</span>) <span style="color:#75715e">#获取全部a标签</span>
    Songs <span style="color:#f92672">=</span> {} <span style="color:#75715e">#格式为{音乐名: &#34;外链地址&#34;}的字典</span>
    <span style="color:#66d9ef">for</span> music <span style="color:#f92672">in</span> aList:
        <span style="color:#66d9ef">if</span> music<span style="color:#f92672">.</span>has_attr(<span style="color:#e6db74">&#34;href&#34;</span>): <span style="color:#75715e">#判断是否有href属性</span>
            <span style="color:#66d9ef">if</span> str(music<span style="color:#f92672">.</span>attrs[<span style="color:#e6db74">&#34;href&#34;</span>])<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#34;/song?id=&#34;</span>): <span style="color:#75715e">#是不是音乐ID</span>
                id <span style="color:#f92672">=</span> str(music<span style="color:#f92672">.</span>attrs[<span style="color:#e6db74">&#34;href&#34;</span>])<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;/song?id=&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>) <span style="color:#75715e">#获取真实ID</span>
                <span style="color:#66d9ef">try</span>:
                    Songs[music<span style="color:#f92672">.</span>text] <span style="color:#f92672">=</span> outerUrl<span style="color:#f92672">.</span>format(id) <span style="color:#75715e">#放入字典</span>
                <span style="color:#66d9ef">except</span>:
                    <span style="color:#66d9ef">pass</span>
    <span style="color:#66d9ef">return</span> Songs <span style="color:#75715e">#返回这个字典</span>
</code></pre></div><p>测试：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span>(getUrl(<span style="color:#e6db74">&#39;https://music.163.com/#/playlist?id=4874770876&#39;</span>))
</code></pre></div><p>结果应该是这样的：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">{<span style="color:#e6db74">&#39;Undertale&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=39227624.mp3&#39;</span>, <span style="color:#e6db74">&#39;sans.&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=39224615.mp3&#39;</span>, <span style="color:#e6db74">&#39;Tem Shop&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=39224629.mp3&#39;</span>, <span style="color:#e6db74">&#39;Undertale - Snowdin Town (****** Bootleg)&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=463498197.mp3&#39;</span>, <span style="color:#e6db74">&#34;It&#39;s Not Like I Like You!!(Instrumental)&#34;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=1385676402.mp3&#39;</span>, <span style="color:#e6db74">&#39;似顔絵広場 (似顔絵チャンネル)&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=1378269172.mp3&#39;</span>, <span style="color:#e6db74">&#39;ステージ：コミカル (サンドキャニオン)&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=28546263.mp3&#39;</span>, <span style="color:#e6db74">&#39;I Love You&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=31460297.mp3&#39;</span>, <span style="color:#e6db74">&#39;Ice Cream&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=35407675.mp3&#39;</span>, <span style="color:#e6db74">&#39;Dying&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=506092100.mp3&#39;</span>, <span style="color:#e6db74">&#39;${song.name|mark}-${listArtists(song.artists)}&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=${song.id}.mp3&#39;</span>, <span style="color:#e6db74">&#39;${soil(x.name)}&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=${x.id}.mp3&#39;</span>, <span style="color:#e6db74">&#39;{if x.album}{/if}&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=${x.id}.mp3&#39;</span>, <span style="color:#e6db74">&#39;${x.name}&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=${x.id}.mp3&#39;</span>}
</code></pre></div><p>为啥会有<code>'${x.id}'</code>和<code>'${song.id}'</code>？？我也不是很清楚，但是只要把它过滤就行了。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getArtUrl</span>(artlist_url): <span style="color:#75715e">#获取音乐真实ID的函数</span>
	outerUrl <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://music.163.com/song/media/outer/url?id={0:s}.mp3&#34;</span> <span style="color:#75715e">#外链地址</span>
    HEADER <span style="color:#f92672">=</span> { <span style="color:#75715e">#伪造请求头，防止被封</span>
        <span style="color:#e6db74">&#39;Accept&#39;</span>: <span style="color:#e6db74">&#39;*/*&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Encoding&#39;</span>: <span style="color:#e6db74">&#39;gzip,deflate,sdch&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Language&#39;</span>: <span style="color:#e6db74">&#39;zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4&#39;</span>,
        <span style="color:#e6db74">&#39;Connection&#39;</span>: <span style="color:#e6db74">&#39;keep-alive&#39;</span>,
        <span style="color:#e6db74">&#39;Content-Type&#39;</span>: <span style="color:#e6db74">&#39;application/x-www-form-urlencoded&#39;</span>,
        <span style="color:#e6db74">&#39;Host&#39;</span>: <span style="color:#e6db74">&#39;music.163.com&#39;</span>,
        <span style="color:#e6db74">&#39;Referer&#39;</span>: <span style="color:#e6db74">&#39;https://music.163.com/search/&#39;</span>,
        <span style="color:#e6db74">&#39;User-Agent&#39;</span>: UserAgent()<span style="color:#f92672">.</span>random
    }
    response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url<span style="color:#f92672">=</span>url<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;#/&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>), headers<span style="color:#f92672">=</span>HEADER) <span style="color:#75715e">#网易云音乐使用异步iframe加载，需要去掉&#34;#/&#34;</span>
    soup <span style="color:#f92672">=</span> BeautifulSoup(response<span style="color:#f92672">.</span>text, <span style="color:#e6db74">&#34;html.parser&#34;</span>) <span style="color:#75715e">#bs4读取</span>
    aList <span style="color:#f92672">=</span> soup<span style="color:#f92672">.</span>select(<span style="color:#e6db74">&#34;a&#34;</span>) <span style="color:#75715e">#获取全部a标签</span>
    Songs <span style="color:#f92672">=</span> {} <span style="color:#75715e">#格式为{音乐名: &#34;外链地址&#34;}的字典</span>
    <span style="color:#66d9ef">for</span> music <span style="color:#f92672">in</span> aList:
        <span style="color:#66d9ef">if</span> music<span style="color:#f92672">.</span>has_attr(<span style="color:#e6db74">&#34;href&#34;</span>): <span style="color:#75715e">#判断是否有href属性</span>
            <span style="color:#66d9ef">if</span> str(music<span style="color:#f92672">.</span>attrs[<span style="color:#e6db74">&#34;href&#34;</span>])<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#34;/song?id=&#34;</span>): <span style="color:#75715e">#是不是音乐ID</span>
                id <span style="color:#f92672">=</span> str(music<span style="color:#f92672">.</span>attrs[<span style="color:#e6db74">&#34;href&#34;</span>])<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;/song?id=&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>) <span style="color:#75715e">#获取真实ID</span>
                <span style="color:#66d9ef">try</span>:
                    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> <span style="color:#e6db74">&#39;${x.id}&#39;</span> <span style="color:#f92672">in</span> id <span style="color:#f92672">and</span> <span style="color:#f92672">not</span> <span style="color:#e6db74">&#39;${song.id}&#39;</span> <span style="color:#f92672">in</span> id: <span style="color:#75715e">#过滤</span>
                        Songs[music<span style="color:#f92672">.</span>text] <span style="color:#f92672">=</span> outerUrl<span style="color:#f92672">.</span>format(id) <span style="color:#75715e">#放入字典</span>
                <span style="color:#66d9ef">except</span>:
                    <span style="color:#66d9ef">pass</span>
    <span style="color:#66d9ef">return</span> Songs <span style="color:#75715e">#返回这个字典</span>
</code></pre></div><p>结果：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">{<span style="color:#e6db74">&#39;Undertale&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=39227624.mp3&#39;</span>, <span style="color:#e6db74">&#39;sans.&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=39224615.mp3&#39;</span>, <span style="color:#e6db74">&#39;Tem Shop&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=39224629.mp3&#39;</span>, <span style="color:#e6db74">&#39;Undertale - Snowdin Town (****** Bootleg)&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=463498197.mp3&#39;</span>, <span style="color:#e6db74">&#34;It&#39;s Not Like I Like You!!(Instrumental)&#34;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=1385676402.mp3&#39;</span>, <span style="color:#e6db74">&#39;似顔絵広場 (似顔絵チャンネル)&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=1378269172.mp3&#39;</span>, <span style="color:#e6db74">&#39;ステージ：コミカル (サンドキャニオン)&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=28546263.mp3&#39;</span>, <span style="color:#e6db74">&#39;I Love You&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=31460297.mp3&#39;</span>, <span style="color:#e6db74">&#39;Ice Cream&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=35407675.mp3&#39;</span>, <span style="color:#e6db74">&#39;Dying&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=506092100.mp3&#39;</span>}
</code></pre></div><p>这就很好了。不过这种方式总觉得不是很妥。毕竟这个问题我们不知道还会有多少个类似错误。于是我要祭出我的正则表达式大法了！（看来BeautifulSoup也不需要了）</p>
<p>导入模块：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> requests<span style="color:#f92672">,</span> re <span style="color:#75715e">#导入模块</span>
<span style="color:#f92672">from</span> fake_useragent <span style="color:#f92672">import</span> UserAgent <span style="color:#75715e">#导入模块</span>
</code></pre></div><p>正则表达式：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&lt;</span>a href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/song\?id=(\d+)&#34;</span><span style="color:#f92672">&gt;</span>(<span style="color:#f92672">.*</span><span style="color:#960050;background-color:#1e0010">?</span>)<span style="color:#f92672">&lt;/</span>a<span style="color:#f92672">&gt;</span>
</code></pre></div><p><code>\?</code>：问号要转义，不然会被认为是匹配操作符。</p>
<p><code>(\d+)</code>：多个数字形成的子组。</p>
<p><code>(.*?)</code>：匹配任何文字（歌曲名称）。</p>
<p>这样，匹配一个，它就会返回一个格式为<code>(歌曲ID, 歌曲名称)</code>的元组。</p>
<p>于是我们最终的代码如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>
<span style="color:#75715e">#-*- coding:utf8 -*-</span>
<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">@Author  :   Ray
</span><span style="color:#e6db74">@Contact :   ray@raycoder.me
</span><span style="color:#e6db74">@Software:   PyCharm
</span><span style="color:#e6db74">@File    :   init.py
</span><span style="color:#e6db74">@Time    :   2020/2/23 21:19
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
<span style="color:#f92672">import</span> requests<span style="color:#f92672">,</span> re
<span style="color:#f92672">from</span> fake_useragent <span style="color:#f92672">import</span> UserAgent

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getArtUrl</span>(artlist_url): <span style="color:#75715e">#获取音乐真实ID的函数</span>
    outerUrl <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://music.163.com/song/media/outer/url?id={0:s}.mp3&#34;</span> <span style="color:#75715e">#外链地址</span>
    HEADER <span style="color:#f92672">=</span> { <span style="color:#75715e">#伪造请求头，防止被封</span>
        <span style="color:#e6db74">&#39;Accept&#39;</span>: <span style="color:#e6db74">&#39;*/*&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Encoding&#39;</span>: <span style="color:#e6db74">&#39;gzip,deflate,sdch&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Language&#39;</span>: <span style="color:#e6db74">&#39;zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4&#39;</span>,
        <span style="color:#e6db74">&#39;Connection&#39;</span>: <span style="color:#e6db74">&#39;keep-alive&#39;</span>,
        <span style="color:#e6db74">&#39;Content-Type&#39;</span>: <span style="color:#e6db74">&#39;application/x-www-form-urlencoded&#39;</span>,
        <span style="color:#e6db74">&#39;Host&#39;</span>: <span style="color:#e6db74">&#39;music.163.com&#39;</span>,
        <span style="color:#e6db74">&#39;Referer&#39;</span>: <span style="color:#e6db74">&#39;https://music.163.com/search/&#39;</span>,
        <span style="color:#e6db74">&#39;User-Agent&#39;</span>: UserAgent()<span style="color:#f92672">.</span>random
    }
    response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url<span style="color:#f92672">=</span>url<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;#/&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>), headers<span style="color:#f92672">=</span>HEADER) <span style="color:#75715e">#网易云音乐使用异步iframe加载，需要去掉&#34;#/&#34;</span>
    songs <span style="color:#f92672">=</span> {} <span style="color:#75715e">#含有音乐ID及名称的字典</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;&lt;a href=&#34;/song\?id=(\d+)&#34;&gt;(.*?)&lt;/a&gt;&#39;</span>, response<span style="color:#f92672">.</span>text):<span style="color:#75715e">#遍历匹配的对象</span>
        songs[i[<span style="color:#ae81ff">1</span>]] <span style="color:#f92672">=</span> outerUrl<span style="color:#f92672">.</span>format(i[<span style="color:#ae81ff">0</span>]) <span style="color:#75715e">#存入字典</span>
    <span style="color:#66d9ef">return</span> songs
</code></pre></div><p>测试：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span>(getUrl(<span style="color:#e6db74">&#39;https://music.163.com/#/playlist?id=4874770876&#39;</span>))
</code></pre></div><p>返回如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">{<span style="color:#e6db74">&#39;Prelude&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=441612739.mp3&#39;</span>, <span style="color:#e6db74">&#39;Marble Soda [Explicit]&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=400876011.mp3&#39;</span>, <span style="color:#e6db74">&#39;Snowdin Town&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=39227596.mp3&#39;</span>, <span style="color:#e6db74">&#39;Monkeys Spinning Monkeys&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=403711640.mp3&#39;</span>, <span style="color:#e6db74">&#39;Overworld Theme (GFM Trap Remix)&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=467590509.mp3&#39;</span>, <span style="color:#e6db74">&#39;Pizza&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=1302090422.mp3&#39;</span>, <span style="color:#e6db74">&#39;King Dedede&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=27518579.mp3&#39;</span>, <span style="color:#e6db74">&#39;Undertale&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=39227624.mp3&#39;</span>, <span style="color:#e6db74">&#39;sans.&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=39224615.mp3&#39;</span>, <span style="color:#e6db74">&#39;Tem Shop&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=39224629.mp3&#39;</span>, <span style="color:#e6db74">&#39;Undertale - Snowdin Town (****** Bootleg)&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=463498197.mp3&#39;</span>, <span style="color:#e6db74">&#34;It&#39;s Not Like I Like You!!(Instrumental)&#34;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=1385676402.mp3&#39;</span>, <span style="color:#e6db74">&#39;似顔絵広場 (似顔絵チャンネル)&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=1378269172.mp3&#39;</span>, <span style="color:#e6db74">&#39;ステージ：コミカル (サンドキャニオン)&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=28546263.mp3&#39;</span>, <span style="color:#e6db74">&#39;I Love You&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=31460297.mp3&#39;</span>, <span style="color:#e6db74">&#39;Ice Cream&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=35407675.mp3&#39;</span>, <span style="color:#e6db74">&#39;Dying&#39;</span>: <span style="color:#e6db74">&#39;http://music.163.com/song/media/outer/url?id=506092100.mp3&#39;</span>}
</code></pre></div><p>最好将其做成一个<code>class</code>：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>
<span style="color:#75715e">#-*- coding:utf8 -*-</span>
<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">@Author  :   Ray
</span><span style="color:#e6db74">@Contact :   ray@raycoder.me
</span><span style="color:#e6db74">@Software:   PyCharm
</span><span style="color:#e6db74">@File    :   init.py
</span><span style="color:#e6db74">@Time    :   2020/2/23 21:19
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
<span style="color:#f92672">import</span> requests<span style="color:#f92672">,</span> re
<span style="color:#f92672">from</span> fake_useragent <span style="color:#f92672">import</span> UserAgent

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CloudMusicSpider</span>():
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getArtUrl</span>(self, artlist_url): <span style="color:#75715e">#获取音乐真实ID的函数</span>
        outerUrl <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://music.163.com/song/media/outer/url?id={0:s}.mp3&#34;</span> <span style="color:#75715e">#外链地址</span>
        HEADER <span style="color:#f92672">=</span> { <span style="color:#75715e">#伪造请求头，防止被封</span>
            <span style="color:#e6db74">&#39;Accept&#39;</span>: <span style="color:#e6db74">&#39;*/*&#39;</span>,
            <span style="color:#e6db74">&#39;Accept-Encoding&#39;</span>: <span style="color:#e6db74">&#39;gzip,deflate,sdch&#39;</span>,
            <span style="color:#e6db74">&#39;Accept-Language&#39;</span>: <span style="color:#e6db74">&#39;zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4&#39;</span>,
            <span style="color:#e6db74">&#39;Connection&#39;</span>: <span style="color:#e6db74">&#39;keep-alive&#39;</span>,
            <span style="color:#e6db74">&#39;Content-Type&#39;</span>: <span style="color:#e6db74">&#39;application/x-www-form-urlencoded&#39;</span>,
            <span style="color:#e6db74">&#39;Host&#39;</span>: <span style="color:#e6db74">&#39;music.163.com&#39;</span>,
            <span style="color:#e6db74">&#39;Referer&#39;</span>: <span style="color:#e6db74">&#39;https://music.163.com/&#39;</span>,
            <span style="color:#e6db74">&#39;User-Agent&#39;</span>: UserAgent()<span style="color:#f92672">.</span>random
        }
        response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url<span style="color:#f92672">=</span>url<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;#/&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>), headers<span style="color:#f92672">=</span>HEADER) <span style="color:#75715e">#网易云音乐使用异步iframe加载，需要去掉&#34;#/&#34;</span>
        songs <span style="color:#f92672">=</span> {}
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;&lt;a href=&#34;/song\?id=(\d+)&#34;&gt;(.*?)&lt;/a&gt;&#39;</span>, response<span style="color:#f92672">.</span>text):
            songs[i[<span style="color:#ae81ff">1</span>]] <span style="color:#f92672">=</span> outerUrl<span style="color:#f92672">.</span>format(i[<span style="color:#ae81ff">0</span>])
        <span style="color:#66d9ef">return</span> songs
</code></pre></div><p>测试：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> CloudMusicSpider <span style="color:#f92672">import</span> CloudMusicSpider
spider<span style="color:#f92672">=</span>CloudMusicSpider()
<span style="color:#66d9ef">print</span>(spider<span style="color:#f92672">.</span>getArtUrl(<span style="color:#e6db74">&#39;https://music.163.com/#/playlist?id=4874770876&#39;</span>))
</code></pre></div><p>好的，我们这样子把它做成一个模块备用。</p>
<p>下一篇文章我会和大家讲爬虫<code>下载文件</code>的方法。我之后会写一篇有关<code>正则表达式</code>的文章。</p>
]]></description><category domain="https://raycoder.me/categories/python/">Python</category><category domain="https://raycoder.me/categories/%E7%88%AC%E8%99%AB/">爬虫</category><category domain="https://raycoder.me/tags/python/">Python</category><category domain="https://raycoder.me/tags/%E7%88%AC%E8%99%AB/">爬虫</category><category domain="https://raycoder.me/tags/%E7%A6%8F%E5%88%A9/">福利</category><category domain="https://raycoder.me/tags/%E7%BD%91%E6%98%93/">网易</category><category domain="https://raycoder.me/tags/%E7%A0%B4%E8%A7%A3/">破解</category><category domain="https://raycoder.me/tags/%E9%9F%B3%E4%B9%90/">音乐</category><category domain="https://raycoder.me/tags/%E4%BC%9A%E5%91%98/">会员</category><category domain="https://raycoder.me/tags/python%E8%BF%9B%E9%98%B6/">Python进阶</category></item><item><title>从零开始写一个音乐爬虫-3：酷狗音乐</title><link>https://raycoder.me/p/kugoumusic-spider-artlist/</link><guid isPermaLink="true">https://raycoder.me/p/kugoumusic-spider-artlist/</guid><pubDate>Tue, 18 Feb 2020 21:48:00 +0800</pubDate><description><![CDATA[<p><strong>本文将会详细的写从零开始制作酷狗音乐爬虫的过程，可以下载酷狗音乐音乐付费歌曲，使用Python3开发。</strong></p>
<!-- more -->
<p>随便打开一个歌单，右键检查属性发现这个<code>&lt;a&gt;</code>标签中含有<code>data</code>。</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316114956.png" alt=""></p>
<p>点进去播放，会发现：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316115025.png" alt=""></p>
<p>看来，音乐外链和这个<code>hash</code>哈希值是脱不了关系的了。</p>
<p>事实上，酷狗音乐歌曲数据外链如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">http://www.kugou.com/yy/index.php?r=play/getdata&amp;hash=&lt;刚才看到的哈希值&gt;
</code></pre></div><p>填入刚刚看到的值（URL：<code>https://www.kugou.com/yy/index.php?r=play/getdata&amp;hash=FE2A4AC53981BB3FAF077CCA2461401A</code>），会看到如下结果：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
	<span style="color:#f92672">&#34;status&#34;</span>:<span style="color:#ae81ff">1</span>,
	<span style="color:#f92672">&#34;err_code&#34;</span>:<span style="color:#ae81ff">0</span>,
	<span style="color:#f92672">&#34;data&#34;</span>:{
		<span style="color:#f92672">&#34;hash&#34;</span>:<span style="color:#e6db74">&#34;FE2A4AC53981BB3FAF077CCA2461401A&#34;</span>,
		<span style="color:#f92672">&#34;timelength&#34;</span>:<span style="color:#ae81ff">76000</span>,
		<span style="color:#f92672">&#34;filesize&#34;</span>:<span style="color:#ae81ff">1220066</span>,
		<span style="color:#f92672">&#34;audio_name&#34;</span>:<span style="color:#e6db74">&#34;Toby Fox - Snowdin Town&#34;</span>,
		<span style="color:#f92672">&#34;have_album&#34;</span>:<span style="color:#ae81ff">1</span>,
		<span style="color:#f92672">&#34;album_name&#34;</span>:<span style="color:#e6db74">&#34;UNDERTALE Soundtrack&#34;</span>,
		<span style="color:#f92672">&#34;album_id&#34;</span>:<span style="color:#e6db74">&#34;1983482&#34;</span>,
		<span style="color:#f92672">&#34;img&#34;</span>:<span style="color:#e6db74">&#34;http:\/\/imge.kugou.com\/stdmusic\/20170320\/20170320173006740587.jpg&#34;</span>,
		<span style="color:#f92672">&#34;have_mv&#34;</span>:<span style="color:#ae81ff">0</span>,
		<span style="color:#f92672">&#34;video_id&#34;</span>:<span style="color:#ae81ff">0</span>,
		<span style="color:#f92672">&#34;author_name&#34;</span>:<span style="color:#e6db74">&#34;Toby Fox&#34;</span>,
		<span style="color:#f92672">&#34;song_name&#34;</span>:<span style="color:#e6db74">&#34;Snowdin Town&#34;</span>,
		<span style="color:#f92672">&#34;lyrics&#34;</span>:<span style="color:#e6db74">&#34;\ufeff[id:$00000000]\r\n[ar:arkady sevidov]\r\n[ti:June]\r\n[by:]\r\n[hash:4399c9872c7235b60b58ce88dc487897]\r\n[al:]\r\n[sign:]\r\n[qq:]\r\n[total:320317]\r\n[offset:0]\r\n[00:01.58]\u7eaf\u97f3\u4e50\uff0c\u8bf7\u6b23\u8d4f\r\n&#34;</span>,
		<span style="color:#f92672">&#34;author_id&#34;</span>:<span style="color:#e6db74">&#34;579236&#34;</span>,
		<span style="color:#f92672">&#34;privilege&#34;</span>:<span style="color:#ae81ff">8</span>,
		<span style="color:#f92672">&#34;privilege2&#34;</span>:<span style="color:#e6db74">&#34;1000&#34;</span>,
		<span style="color:#f92672">&#34;play_url&#34;</span>:<span style="color:#e6db74">&#34;https:\/\/webfs.yun.kugou.com\/202002251957\/d2bff4d2209ca251954d38990445b8d2\/G057\/M08\/1A\/17\/GZQEAFaVAR6AYuQ_ABKd4lSFeUo118.mp3&#34;</span>,
		<span style="color:#f92672">&#34;authors&#34;</span>:[
			{
			<span style="color:#f92672">&#34;author_id&#34;</span>:<span style="color:#e6db74">&#34;579236&#34;</span>,
			<span style="color:#f92672">&#34;sizable_avatar&#34;</span>:<span style="color:#e6db74">&#34;http:\/\/singerimg.kugou.com\/uploadpic\/softhead\/{size}\/20171223\/20171223024709440.jpg&#34;</span>,
			<span style="color:#f92672">&#34;is_publish&#34;</span>:<span style="color:#e6db74">&#34;1&#34;</span>,
			<span style="color:#f92672">&#34;author_name&#34;</span>:<span style="color:#e6db74">&#34;Toby Fox&#34;</span>,
			<span style="color:#f92672">&#34;avatar&#34;</span>:<span style="color:#e6db74">&#34;http:\/\/singerimg.kugou.com\/uploadpic\/softhead\/400\/20171223\/20171223024709440.jpg&#34;</span>
			}
		],
		<span style="color:#f92672">&#34;is_free_part&#34;</span>:<span style="color:#ae81ff">0</span>,
		<span style="color:#f92672">&#34;bitrate&#34;</span>:<span style="color:#ae81ff">128</span>,
		<span style="color:#f92672">&#34;audio_id&#34;</span>:<span style="color:#e6db74">&#34;20519359&#34;</span>,
		<span style="color:#f92672">&#34;play_backup_url&#34;</span>:<span style="color:#e6db74">&#34;https:\/\/webfs.cloud.kugou.com\/202002251957\/5d639c7a92c6750b759cab7e718ede04\/G057\/M08\/1A\/17\/GZQEAFaVAR6AYuQ_ABKd4lSFeUo118.mp3&#34;</span>
	}
}
</code></pre></div><p>我们打开这个<code>play_url</code>（<code>https:\/\/webfs.yun.kugou.com\/202002251957\/d2bff4d2209ca251954d38990445b8d2\/G057\/M08\/1A\/17\/GZQEAFaVAR6AYuQ_ABKd4lSFeUo118.mp3</code>），就会打开真实的音乐地址。</p>
<p>所以我们酷狗音乐获取真实下载链接的流程如下：</p>
<div class="mermaid">
graph TD;
    初始化程序，引入模块-->批量获取哈希值;
    批量获取哈希值-->打开json文件;
    打开json文件-->得到play_url;
    得到play_url--下载音乐;
</div>
<p>先尝试性获取hash：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>
<span style="color:#75715e">#-*- coding:utf8 -*-</span>
<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">@Author  :   Ray
</span><span style="color:#e6db74">@Contact :   ray@raycoder.me
</span><span style="color:#e6db74">@Software:   PyCharm
</span><span style="color:#e6db74">@File    :   KugouSpider.py
</span><span style="color:#e6db74">@Time    :   2019/11/4 21:19
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>

<span style="color:#f92672">import</span> requests<span style="color:#f92672">,</span> re
<span style="color:#f92672">from</span> fake_useragent <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">from</span> random <span style="color:#f92672">import</span> randint

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">KugouSpider</span>():
    HEADER <span style="color:#f92672">=</span> {  <span style="color:#75715e"># 伪造请求头，防止被封IP</span>
        <span style="color:#e6db74">&#39;Accept&#39;</span>: <span style="color:#e6db74">&#39;*/*&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Encoding&#39;</span>: <span style="color:#e6db74">&#39;gzip,deflate,sdch&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Language&#39;</span>: <span style="color:#e6db74">&#39;zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4&#39;</span>,
        <span style="color:#e6db74">&#39;Connection&#39;</span>: <span style="color:#e6db74">&#39;keep-alive&#39;</span>,
        <span style="color:#e6db74">&#39;Content-Type&#39;</span>: <span style="color:#e6db74">&#39;application/x-www-form-urlencoded&#39;</span>,
        <span style="color:#e6db74">&#39;Referer&#39;</span>: <span style="color:#e6db74">&#39;https://kugou.com/&#39;</span>,
        <span style="color:#e6db74">&#39;User-Agent&#39;</span>: UserAgent()<span style="color:#f92672">.</span>random
    }

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getArtUrl</span>(self, artlist_url):
        jsonUrl <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;http://www.kugou.com/yy/index.php?r=play/getdata&amp;hash={0:s}&#39;</span>
        response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">=</span> artlist_url, headers <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>HEADER)
        songs <span style="color:#f92672">=</span> {}
        <span style="color:#75715e">#print(response.text)</span>
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;&lt;a title=&#34;.+&#34; hidefocus=&#34;true&#34; href=&#34;javascript:;&#34; data=&#34;(\w+)\|\d+&#34;&gt;&#39;</span>, response<span style="color:#f92672">.</span>text):
            <span style="color:#75715e">#print(jsonUrl.format(i))</span>
            jsonfile <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">=</span> jsonUrl<span style="color:#f92672">.</span>format(i), headers <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>HEADER, cookies <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>cookies)
            jsondata <span style="color:#f92672">=</span> jsonfile<span style="color:#f92672">.</span>json()
            <span style="color:#75715e">#print(jsondata)</span>
            <span style="color:#66d9ef">try</span>:
                songs[jsondata[<span style="color:#e6db74">&#39;data&#39;</span>][<span style="color:#e6db74">&#39;audio_name&#39;</span>]] <span style="color:#f92672">=</span> jsondata[<span style="color:#e6db74">&#39;data&#39;</span>][<span style="color:#e6db74">&#39;play_url&#39;</span>]
            <span style="color:#66d9ef">except</span>:
                <span style="color:#66d9ef">pass</span>
        <span style="color:#66d9ef">return</span> songs
</code></pre></div><p>哎呀！最后返回了一个空字典！<code>{}</code>为什么呢？我观察后发现，酷狗需要添加一个<code>cookie</code>才可以访问到数据。</p>
<p>我们加一下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getUrl</span>(self, artlist_url):
        jsonUrl <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;http://www.kugou.com/yy/index.php?r=play/getdata&amp;hash={0:s}&#39;</span>
        response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">=</span> artlist_url, headers <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>HEADER)
        songs <span style="color:#f92672">=</span> {}
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;&lt;a title=&#34;.+&#34; hidefocus=&#34;true&#34; href=&#34;javascript:;&#34; data=&#34;(\w+)\|\d+&#34;&gt;&#39;</span>, response<span style="color:#f92672">.</span>text):
            jsonfile <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">=</span> jsonUrl<span style="color:#f92672">.</span>format(i), headers <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>HEADER, cookies <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;kg_mid&#39;</span>: <span style="color:#e6db74">&#39;1&#39;</span>})
            jsondata <span style="color:#f92672">=</span> jsonfile<span style="color:#f92672">.</span>json()
            <span style="color:#66d9ef">try</span>:
                songs[jsondata[<span style="color:#e6db74">&#39;data&#39;</span>][<span style="color:#e6db74">&#39;audio_name&#39;</span>]] <span style="color:#f92672">=</span> jsondata[<span style="color:#e6db74">&#39;data&#39;</span>][<span style="color:#e6db74">&#39;play_url&#39;</span>]
            <span style="color:#66d9ef">except</span>:
                <span style="color:#66d9ef">pass</span>
        <span style="color:#66d9ef">return</span> songs
</code></pre></div><p>嗯？还是没有数据！我觉得可能是<code>HEADER</code>中的<code>host</code>的问题。</p>
<p>把它去掉！</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">KugouSpider</span>():
    HEADER <span style="color:#f92672">=</span> {
        <span style="color:#e6db74">&#39;Accept&#39;</span>: <span style="color:#e6db74">&#39;*/*&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Encoding&#39;</span>: <span style="color:#e6db74">&#39;gzip,deflate,sdch&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Language&#39;</span>: <span style="color:#e6db74">&#39;zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4&#39;</span>,
        <span style="color:#e6db74">&#39;Connection&#39;</span>: <span style="color:#e6db74">&#39;keep-alive&#39;</span>,
        <span style="color:#e6db74">&#39;Content-Type&#39;</span>: <span style="color:#e6db74">&#39;application/x-www-form-urlencoded&#39;</span>,
        <span style="color:#e6db74">&#39;Referer&#39;</span>: <span style="color:#e6db74">&#39;https://kugou.com/&#39;</span>,
        <span style="color:#e6db74">&#39;User-Agent&#39;</span>: UserAgent()<span style="color:#f92672">.</span>random
    }
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getUrl</span>(self, artlist_url):
        jsonUrl <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;http://www.kugou.com/yy/index.php?r=play/getdata&amp;hash={0:s}&#39;</span>
        response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">=</span> artlist_url, headers <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>HEADER)
        songs <span style="color:#f92672">=</span> {}
        <span style="color:#75715e">#print(response.text)</span>
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;&lt;a title=&#34;.+&#34; hidefocus=&#34;true&#34; href=&#34;javascript:;&#34; data=&#34;(\w+)\|\d+&#34;&gt;&#39;</span>, response<span style="color:#f92672">.</span>text):
            <span style="color:#75715e">#print(jsonUrl.format(i))</span>
            jsonfile <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">=</span> jsonUrl<span style="color:#f92672">.</span>format(i), headers <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>HEADER, cookies <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;kg_mid&#39;</span>: <span style="color:#e6db74">&#39;1&#39;</span>})
            jsondata <span style="color:#f92672">=</span> jsonfile<span style="color:#f92672">.</span>json()
            <span style="color:#66d9ef">try</span>:
                songs[jsondata[<span style="color:#e6db74">&#39;data&#39;</span>][<span style="color:#e6db74">&#39;audio_name&#39;</span>]] <span style="color:#f92672">=</span> jsondata[<span style="color:#e6db74">&#39;data&#39;</span>][<span style="color:#e6db74">&#39;play_url&#39;</span>]
            <span style="color:#66d9ef">except</span>:
                <span style="color:#66d9ef">pass</span>
        <span style="color:#66d9ef">return</span> songs
</code></pre></div><p>这样，我们就获得了真实的数据：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">{<span style="color:#e6db74">&#39;Toby Fox - Snowy&#39;</span>: <span style="color:#e6db74">&#39;https://webfs.yun.kugou.com/202002280800/8b338c7c966f73984a16d332fe0a1905/G053/M04/0C/10/dQ0DAFaVAPCAdhQcABl6n5DvBc0140.mp3&#39;</span>, <span style="color:#e6db74">&#39;Toby Fox - Undertale&#39;</span>: <span style="color:#e6db74">&#39;https://webfs.yun.kugou.com/202002280800/91772c1108ab0627888c84f9fb6380f1/G057/M04/17/05/eQ0DAFaiNEWAXZVoAF0rmY34-tU840.mp3&#39;</span>, <span style="color:#e6db74">&#39;Toby Fox - Tem Shop&#39;</span>: <span style="color:#e6db74">&#39;https://webfs.yun.kugou.com/202002280800/02fb916f700f9df912d93daa77c9d420/G055/M0A/06/07/14YBAFaVAdyIb_RdAAsQ0yCL9vEAAAorgG2O-IACxDr193.mp3&#39;</span>, <span style="color:#e6db74">&#39;Toby Fox - sans.&#39;</span>: <span style="color:#e6db74">&#39;https://webfs.yun.kugou.com/202002280800/3580fcc155cd84b346acc9465504b01a/G052/M02/0C/07/1IYBAFaVAOWINLXsAAxhJsPWw2UAAAy4gIAOs0ADGE-807.mp3&#39;</span>, <span style="color:#e6db74">&#39;Toby Fox - Dogsong&#39;</span>: <span style="color:#e6db74">&#39;https://webfs.yun.kugou.com/202002280800/399c52d789e7f659001ab84e2bcfa823/G055/M00/06/11/F5QEAFaVARWIZFBMAAkgfyVHyJ4AAAoqAMZ4XYACSCX641.mp3&#39;</span>}
</code></pre></div><p>不对呀！为什么只找到了几首音乐？我们打印一下<code>jsondata</code>。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getUrl</span>(self, artlist_url):
    jsonUrl <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;http://www.kugou.com/yy/index.php?r=play/getdata&amp;hash={0:s}&#39;</span>
    response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">=</span> artlist_url, headers <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>HEADER)
    songs <span style="color:#f92672">=</span> {}
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;&lt;a title=&#34;.+&#34; hidefocus=&#34;true&#34; href=&#34;javascript:;&#34; data=&#34;(\w+)\|\d+&#34;&gt;&#39;</span>, response<span style="color:#f92672">.</span>text):
        jsonfile <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">=</span> jsonUrl<span style="color:#f92672">.</span>format(i), headers <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>HEADER, cookies <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;kg_mid&#39;</span>: <span style="color:#e6db74">&#39;1&#39;</span>})
        jsondata <span style="color:#f92672">=</span> jsonfile<span style="color:#f92672">.</span>json()
        <span style="color:#66d9ef">print</span>(jsondata)
        <span style="color:#66d9ef">try</span>:
            <span style="color:#66d9ef">pass</span>
            <span style="color:#75715e">#songs[jsondata[&#39;data&#39;][&#39;audio_name&#39;]] = jsondata[&#39;data&#39;][&#39;play_url&#39;]</span>
        <span style="color:#66d9ef">except</span>:
            <span style="color:#66d9ef">pass</span>
    <span style="color:#66d9ef">return</span> songs
</code></pre></div><p>Woc原来这个东西返回的是这种数据：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">{<span style="color:#e6db74">&#39;status&#39;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#39;err_code&#39;</span>: <span style="color:#ae81ff">30020</span>, <span style="color:#e6db74">&#39;data&#39;</span>: {<span style="color:#e6db74">&#39;SSA-CODE&#39;</span>: <span style="color:#e6db74">&#39;bj_event_ee07e35318276c48c519523c26d9f4ce&#39;</span>, <span style="color:#e6db74">&#39;SSA-HMID&#39;</span>: <span style="color:#e6db74">&#39;1&#39;</span>}}
</code></pre></div><p>我们随便打开一个<code>hash</code>源链：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316115218.png" alt=""></p>
<p>也是这种情况。</p>
<p>我们再打开播放地址<code>https://www.kugou.com/song/#hash=FE2A4AC53981BB3FAF077CCA2461401A&amp;album_id=1983482</code>：喔！它出现了一个验证码。这个东西就是罪魁祸首。</p>
<p>验证之后再打开<code>hash源链</code>，数据就出现了。</p>
<p>所以我们可以判断酷狗音乐这个<code>cookie</code>不止<code>kg_mid</code>一个。</p>
<p>我们打开浏览器控制台：</p>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200316115245.png" alt=""></p>
<p>这里有恶心的<code>cookie</code>！</p>
<p>把它们复制到程序中去。</p>
<p>乃得：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">KugouSpider</span>():
    HEADER <span style="color:#f92672">=</span> {  <span style="color:#75715e"># 伪造请求头，防止被封IP</span>
        <span style="color:#e6db74">&#39;Accept&#39;</span>: <span style="color:#e6db74">&#39;*/*&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Encoding&#39;</span>: <span style="color:#e6db74">&#39;gzip,deflate,sdch&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Language&#39;</span>: <span style="color:#e6db74">&#39;zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4&#39;</span>,
        <span style="color:#e6db74">&#39;Connection&#39;</span>: <span style="color:#e6db74">&#39;keep-alive&#39;</span>,
        <span style="color:#e6db74">&#39;Content-Type&#39;</span>: <span style="color:#e6db74">&#39;application/x-www-form-urlencoded&#39;</span>,
        <span style="color:#e6db74">&#39;Referer&#39;</span>: <span style="color:#e6db74">&#39;https://kugou.com/&#39;</span>,
        <span style="color:#e6db74">&#39;User-Agent&#39;</span>: UserAgent()<span style="color:#f92672">.</span>random
    }
    cookies <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;kg_mid&#39;</span>: <span style="color:#e6db74">&#39;44c117b70a8abbe992b50ee90d19784f&#39;</span>,
               <span style="color:#e6db74">&#39;kg_dfid&#39;</span>: <span style="color:#e6db74">&#39;2SoQgm4W6BHT0eH1EP3qAt3X&#39;</span>,
                <span style="color:#e6db74">&#39;kg_dfid_collect&#39;</span>: <span style="color:#e6db74">&#39;d41d8cd98f00b204e9800998ecf8427e&#39;</span>,
                <span style="color:#e6db74">&#39;KuGooRandom&#39;</span>: <span style="color:#e6db74">&#39;66781582627339920&#39;</span>,
                <span style="color:#e6db74">&#39;Hm_lvt_aedee6983d4cfc62f509129360d6bb3d	1582&#39;</span>: <span style="color:#e6db74">&#39;1582627291,1582630139,1582674521&#39;</span>,
                <span style="color:#e6db74">&#39;kg_mid_temp&#39;</span>: <span style="color:#e6db74">&#39;44c117b70a8abbe992b50ee90d19784f&#39;</span>,
                <span style="color:#e6db74">&#39;Hm_lpvt_aedee6983d4cfc62f509129360d6bb3d&#39;</span>: <span style="color:#e6db74">&#39;1582676297&#39;</span>,
                <span style="color:#e6db74">&#39;ACK_SERVER_10016&#39;</span>: <span style="color:#e6db74">&#39;%7B</span><span style="color:#e6db74">%22li</span><span style="color:#e6db74">st</span><span style="color:#e6db74">%22%</span><span style="color:#e6db74">3A%5B%5B</span><span style="color:#e6db74">%22g</span><span style="color:#e6db74">zreg-user.kugou.com</span><span style="color:#e6db74">%22%</span><span style="color:#e6db74">5D%5D%7D&#39;</span>,
                <span style="color:#e6db74">&#39;ACK_SERVER_10015&#39;</span>: <span style="color:#e6db74">&#39;%7B</span><span style="color:#e6db74">%22li</span><span style="color:#e6db74">st</span><span style="color:#e6db74">%22%</span><span style="color:#e6db74">3A%5B%5B%22bjlogin-user.kugou.com</span><span style="color:#e6db74">%22%</span><span style="color:#e6db74">5D%5D%7D&#39;</span>,
                <span style="color:#e6db74">&#39;ACK_SERVER_10017&#39;</span>: <span style="color:#e6db74">&#39;%7B</span><span style="color:#e6db74">%22li</span><span style="color:#e6db74">st</span><span style="color:#e6db74">%22%</span><span style="color:#e6db74">3A%5B%5B</span><span style="color:#e6db74">%22g</span><span style="color:#e6db74">zverifycode.service.kugou.com</span><span style="color:#e6db74">%22%</span><span style="color:#e6db74">5D%5D%7D&#39;</span>
               }

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getUrl</span>(self, artlist_url):
        jsonUrl <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;http://www.kugou.com/yy/index.php?r=play/getdata&amp;hash={0:s}&#39;</span>
        response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">=</span> artlist_url, headers <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>HEADER, cookies <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>cookies)
        songs <span style="color:#f92672">=</span> {}
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;&lt;a title=&#34;.+&#34; hidefocus=&#34;true&#34; href=&#34;javascript:;&#34; data=&#34;(\w+)\|\d+&#34;&gt;&#39;</span>, response<span style="color:#f92672">.</span>text):
            jsonfile <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">=</span> jsonUrl<span style="color:#f92672">.</span>format(i), headers <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>HEADER, cookies <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>cookies)
            jsondata <span style="color:#f92672">=</span> jsonfile<span style="color:#f92672">.</span>json()
            <span style="color:#66d9ef">try</span>:
                songs[jsondata[<span style="color:#e6db74">&#39;data&#39;</span>][<span style="color:#e6db74">&#39;audio_name&#39;</span>]] <span style="color:#f92672">=</span> jsondata[<span style="color:#e6db74">&#39;data&#39;</span>][<span style="color:#e6db74">&#39;play_url&#39;</span>]
            <span style="color:#66d9ef">except</span>:
                <span style="color:#66d9ef">pass</span>
        <span style="color:#66d9ef">return</span> songs
</code></pre></div><p>这个<code>cookie</code>是可以重复使用的，我们只需要在数据无法提取时去验证一下即可。</p>
<p>下载音乐可以去看我的这篇文章：</p>
<p><a href="https://raycoder.me/p/2538.html" class="LinkCard">从零开始写一个音乐爬虫-2-网易云音乐：下载音乐文件</a></p>
<p>所以我们完成的程序如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>
<span style="color:#75715e">#-*- coding:utf8 -*-</span>
<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">@Author  :   Ray
</span><span style="color:#e6db74">@Contact :   ray@raycoder.me
</span><span style="color:#e6db74">@Software:   PyCharm
</span><span style="color:#e6db74">@File    :   KugouSpider.py
</span><span style="color:#e6db74">@Time    :   2019/11/4 21:19
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>

<span style="color:#f92672">import</span> requests<span style="color:#f92672">,</span> re
<span style="color:#f92672">from</span> fake_useragent <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">from</span> random <span style="color:#f92672">import</span> randint

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">KugouSpider</span>():
    HEADER <span style="color:#f92672">=</span> {  <span style="color:#75715e"># 伪造请求头，防止被封IP</span>
        <span style="color:#e6db74">&#39;Accept&#39;</span>: <span style="color:#e6db74">&#39;*/*&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Encoding&#39;</span>: <span style="color:#e6db74">&#39;gzip,deflate,sdch&#39;</span>,
        <span style="color:#e6db74">&#39;Accept-Language&#39;</span>: <span style="color:#e6db74">&#39;zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4&#39;</span>,
        <span style="color:#e6db74">&#39;Connection&#39;</span>: <span style="color:#e6db74">&#39;keep-alive&#39;</span>,
        <span style="color:#e6db74">&#39;Content-Type&#39;</span>: <span style="color:#e6db74">&#39;application/x-www-form-urlencoded&#39;</span>,
        <span style="color:#e6db74">&#39;Referer&#39;</span>: <span style="color:#e6db74">&#39;https://kugou.com/&#39;</span>,
        <span style="color:#e6db74">&#39;User-Agent&#39;</span>: UserAgent()<span style="color:#f92672">.</span>random
    }
    cookies <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;kg_mid&#39;</span>: <span style="color:#e6db74">&#39;d7d2db42653ccb5262c6b3a53d3e513e&#39;</span>,
               <span style="color:#e6db74">&#39;kg_dfid&#39;</span>: <span style="color:#e6db74">&#39;4E1aaE0U1ZlH0aaWYz3Z7N6n&#39;</span>,
               <span style="color:#e6db74">&#39;kg_dfid_collect&#39;</span>: <span style="color:#e6db74">&#39;d41d8cd98f00b204e9800998ecf8427e&#39;</span>,
               <span style="color:#e6db74">&#39;KuGooRandom&#39;</span>: <span style="color:#e6db74">&#39;66781582627339920&#39;</span>,
               <span style="color:#e6db74">&#39;Hm_lvt_aedee6983d4cfc62f509129360d6bb3d	1582&#39;</span>: <span style="color:#e6db74">&#39;1583409383&#39;</span>,
               <span style="color:#e6db74">&#39;kg_mid_temp&#39;</span>: <span style="color:#e6db74">&#39;d7d2db42653ccb5262c6b3a53d3e513e&#39;</span>,
               <span style="color:#e6db74">&#39;Hm_lpvt_aedee6983d4cfc62f509129360d6bb3d&#39;</span>: <span style="color:#e6db74">&#39;1583409803&#39;</span>,
               <span style="color:#e6db74">&#39;ACK_SERVER_10016&#39;</span>: <span style="color:#e6db74">&#39;%7B</span><span style="color:#e6db74">%22li</span><span style="color:#e6db74">st</span><span style="color:#e6db74">%22%</span><span style="color:#e6db74">3A%5B%5B</span><span style="color:#e6db74">%22g</span><span style="color:#e6db74">zreg-user.kugou.com</span><span style="color:#e6db74">%22%</span><span style="color:#e6db74">5D%5D%7D&#39;</span>,
               <span style="color:#e6db74">&#39;ACK_SERVER_10015&#39;</span>: <span style="color:#e6db74">&#39;%7B</span><span style="color:#e6db74">%22li</span><span style="color:#e6db74">st</span><span style="color:#e6db74">%22%</span><span style="color:#e6db74">3A%5B%5B%22bjlogin-user.kugou.com</span><span style="color:#e6db74">%22%</span><span style="color:#e6db74">5D%5D%7D&#39;</span>,
               <span style="color:#e6db74">&#39;ACK_SERVER_10017&#39;</span>: <span style="color:#e6db74">&#39;%7B</span><span style="color:#e6db74">%22li</span><span style="color:#e6db74">st</span><span style="color:#e6db74">%22%</span><span style="color:#e6db74">3A%5B%5B</span><span style="color:#e6db74">%22g</span><span style="color:#e6db74">zverifycode.service.kugou.com</span><span style="color:#e6db74">%22%</span><span style="color:#e6db74">5D%5D%7D&#39;</span>
              }

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getArtUrl</span>(self, artlist_url):
        jsonUrl <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;http://www.kugou.com/yy/index.php?r=play/getdata&amp;hash={0:s}&#39;</span>
        response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">=</span> artlist_url, headers <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>HEADER)
        songs <span style="color:#f92672">=</span> {}
        <span style="color:#75715e">#print(response.text)</span>
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;&lt;a title=&#34;.+&#34; hidefocus=&#34;true&#34; href=&#34;javascript:;&#34; data=&#34;(\w+)\|\d+&#34;&gt;&#39;</span>, response<span style="color:#f92672">.</span>text):
            <span style="color:#75715e">#print(jsonUrl.format(i))</span>
            jsonfile <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">=</span> jsonUrl<span style="color:#f92672">.</span>format(i), headers <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>HEADER, cookies <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>cookies)
            jsondata <span style="color:#f92672">=</span> jsonfile<span style="color:#f92672">.</span>json()
            <span style="color:#75715e">#print(jsondata)</span>
            <span style="color:#66d9ef">try</span>:
                songs[jsondata[<span style="color:#e6db74">&#39;data&#39;</span>][<span style="color:#e6db74">&#39;audio_name&#39;</span>]] <span style="color:#f92672">=</span> jsondata[<span style="color:#e6db74">&#39;data&#39;</span>][<span style="color:#e6db74">&#39;play_url&#39;</span>]
            <span style="color:#66d9ef">except</span>:
                <span style="color:#66d9ef">pass</span>
        <span style="color:#66d9ef">return</span> songs
</code></pre></div><p>测试：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> KugouSpider <span style="color:#f92672">import</span> KugouSpider
<span style="color:#f92672">from</span> download <span style="color:#f92672">import</span> downloadMusic

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_test</span>():
    spider <span style="color:#f92672">=</span> KugouSpider()
    downloadMusic(spider<span style="color:#f92672">.</span>getUrl(<span style="color:#e6db74">&#39;https://www.kugou.com/yy/special/single/1094256.html&#39;</span>))
<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    _test()
</code></pre></div><p>这个也要写为一个单独的文件：<code>test.py</code>。
P.S.我发现貌似随机Cookie有效：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    randten <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> large: randint(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span><span style="color:#f92672">**</span>large)
    cookies <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;kg_mid&#39;</span>: str(randten(<span style="color:#ae81ff">30</span>)),
               <span style="color:#e6db74">&#39;kg_dfid&#39;</span>: str(randten(<span style="color:#ae81ff">30</span>)),
               <span style="color:#e6db74">&#39;kg_dfid_collect&#39;</span>: str(randten(<span style="color:#ae81ff">30</span>)),
               <span style="color:#e6db74">&#39;KuGooRandom&#39;</span>: str(randten(<span style="color:#ae81ff">12</span>)),
               <span style="color:#e6db74">&#39;Hm_lvt_aedee6983d4cfc62f509129360d6bb3d	1582&#39;</span>: str(randten(<span style="color:#ae81ff">10</span>)),
               <span style="color:#e6db74">&#39;kg_mid_temp&#39;</span>: str(randten(<span style="color:#ae81ff">30</span>)),
               <span style="color:#e6db74">&#39;Hm_lpvt_aedee6983d4cfc62f509129360d6bb3d&#39;</span>: str(randten(<span style="color:#ae81ff">30</span>)),
               <span style="color:#e6db74">&#39;ACK_SERVER_10016&#39;</span>: str(randten(<span style="color:#ae81ff">30</span>)),
               <span style="color:#e6db74">&#39;ACK_SERVER_10015&#39;</span>: str(randten(<span style="color:#ae81ff">30</span>)),
               <span style="color:#e6db74">&#39;ACK_SERVER_10017&#39;</span>: str(randten(<span style="color:#ae81ff">30</span>))
              }
</code></pre></div><p>可以试试。</p>
]]></description><category domain="https://raycoder.me/categories/python/">Python</category><category domain="https://raycoder.me/categories/%E7%88%AC%E8%99%AB/">爬虫</category><category domain="https://raycoder.me/tags/python/">Python</category><category domain="https://raycoder.me/tags/%E7%88%AC%E8%99%AB/">爬虫</category><category domain="https://raycoder.me/tags/%E7%A6%8F%E5%88%A9/">福利</category><category domain="https://raycoder.me/tags/%E9%9F%B3%E4%B9%90/">音乐</category><category domain="https://raycoder.me/tags/%E7%A0%B4%E8%A7%A3/">破解</category><category domain="https://raycoder.me/tags/%E4%BC%9A%E5%91%98/">会员</category><category domain="https://raycoder.me/tags/python%E8%BF%9B%E9%98%B6/">Python进阶</category><category domain="https://raycoder.me/tags/%E9%85%B7%E7%8B%97/">酷狗</category></item><item><title>一些关于GitHub图像无法正常显示和访问速度慢的解决方案</title><link>https://raycoder.me/p/github-hosts/</link><guid isPermaLink="true">https://raycoder.me/p/github-hosts/</guid><pubDate>Tue, 18 Feb 2020 08:08:42 +0800</pubDate><description><![CDATA[<p><strong>今天我在访问GayHub的Issue时发现访问速度奇慢无比，加载好后也无法正常显示图片，raw.githubusercontent.com也无法进入。上网查找相关资料后终于有了相关的解决方法。</strong></p>
<p>网上一般流传的Hosts已经不好使了，如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback"># GitHub Start
192.30.253.112 github.com
192.30.253.118 gist.github.com
151.101.112.133 assets-cdn.github.com
151.101.184.133 raw.githubusercontent.com
151.101.112.133 gist.githubusercontent.com
151.101.184.133 cloud.githubusercontent.com
151.101.112.133 camo.githubusercontent.com
151.101.112.133 avatars0.githubusercontent.com
151.101.112.133 avatars1.githubusercontent.com
151.101.184.133 avatars2.githubusercontent.com
151.101.12.133 avatars3.githubusercontent.com
151.101.12.133 avatars4.githubusercontent.com
151.101.184.133 avatars5.githubusercontent.com
151.101.184.133 avatars6.githubusercontent.com
151.101.184.133 avatars7.githubusercontent.com
151.101.12.133 avatars8.githubusercontent.com
# GitHub End
</code></pre></div><p><code>ipconfig /flushdns</code>后无效。</p>
<p>后来又去<a href="https://github.com/chenxuhua/issues-blog/issues/3">这里</a>翻了翻，又发现了一个好用的东西：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">140.82.113.4 github.com
140.82.113.19 assets-cdn.github.com
151.101.185.194 github.global.ssl.fastly.net
185.199.108.153 assets-cdn.github.com
185.199.108.153 github.github.io
151.101.184.133 githubusercontent.com
192.30.253.118 gist.github.com
</code></pre></div><p>发现这个竟然是有用的！所以只需要使用这个Hosts即可！</p>
<p><code>ipconfig /flushdns</code>走起~</p>
<p>不过这些IP每人都<code>各不相同</code>，假如你还不能正常访问，那请去<a href="https://www.ipaddress.com">https://www.ipaddress.com</a></p>
<p>查询相对应GayHub ip地址，把之前hosts中的<code>替换</code>掉，就应该可以正常访问了。</p>
]]></description><category domain="https://raycoder.me/categories/hosts/">Hosts</category><category domain="https://raycoder.me/categories/github/">GitHub</category><category domain="https://raycoder.me/tags/github/">GitHub</category><category domain="https://raycoder.me/tags/hosts/">Hosts</category><category domain="https://raycoder.me/tags/%E5%8A%A0%E9%80%9F/">加速</category></item><item><title>使用CentOS 7 + Kodcloud(可道云) 搭建个人网盘</title><link>https://raycoder.me/p/kodcloud-with-centos7/</link><guid isPermaLink="true">https://raycoder.me/p/kodcloud-with-centos7/</guid><pubDate>Fri, 14 Feb 2020 17:10:53 +0800</pubDate><description><![CDATA[<p><strong>网盘接二连三的倒下，*度网盘又开始限速，真不让人满意🐷。。</strong></p>
<p><strong>还是自己搭建的网盘比较靠谱……😂</strong></p>
<h3 id="准备材料">准备材料</h3>
<hr>
<ol>
<li>
<p>带有CentOS的服务器一份</p>
</li>
<li>
<p>装有PHP</p>
</li>
<li>
<p>有Apache</p>
<p><del>下锅乱炖！</del></p>
</li>
</ol>
<p>我这里采用腾讯云的CVM。</p>
<h3 id="step1-安装xmapp">Step.1 安装XMAPP</h3>
<hr>
<h4 id="1-下载">1. 下载</h4>
<p>下载命令：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wget -c https://www.apachefriends.org/xampp-files/7.4.2/xampp-linux-x64-7.4.2-0-installer.run
</code></pre></div><p>不过有人说连接超时(我也是)，还好我是个好博主😂(大义凛然)，提供个<code>我的下载源</code>：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wget -c http://111.229.174.206/kodexplorer/data/User/admin/home/Coding/xampp-linux-x64-7.4.2-0-installer.run
</code></pre></div><p>也许比较慢，但总比下载不了好多了</p>
<p>下载之后会看到一个<code>.run</code>可执行文件，先添加相应的权限：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">chmod +x xampp-linux-x64-7.4.2-0-installer.run
</code></pre></div><h4 id="2安装">2.安装</h4>
<p>运行：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ./xampp-linux-x64-7.4.2-0-installer.run
</code></pre></div><p>按照提示一路<code>y/回车</code>即可</p>
<h3 id="step-2安装可道云">Step 2.安装可道云</h3>
<hr>
<p>官方下载页面：https://kodcloud.com/download/。其中有获取最新版可道云的相关命令。</p>
<h4 id="下载">下载：</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wget http://static.kodcloud.com/update/download/kodexplorer4.40.zip
</code></pre></div><h3 id="安装">安装：</h3>
<h5 id="创建目录">创建目录：</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo mkdir kodexplorer
</code></pre></div><h5 id="解压">解压：</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">unzip kodexplorer4.40.zip -d ./kodexplorer
</code></pre></div><h5 id="设置权限">设置权限：</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cd ./kodexplorer
chmod -Rf <span style="color:#ae81ff">777</span> ./*
</code></pre></div><h5 id="完成安装">完成安装：</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo cp -r kodexplorer/ /opt/lampp/htdocs/
cd /opt/lampp/htdocs
chmod <span style="color:#ae81ff">777</span> kodexplorer
chmod -R <span style="color:#ae81ff">777</span> kodexplorer/data/
</code></pre></div><h3 id="step-3-enjoy">Step 3. Enjoy!</h3>
<hr>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-fallback" data-lang="fallback">sudo /opt/lampp/xampp start
</code></pre></div><p>浏览器打开<code>IP地址/kodexplorer/</code>，设置管理员密码，开始使用。</p>]]></description><category domain="https://raycoder.me/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/">服务器</category><category domain="https://raycoder.me/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/">服务器</category><category domain="https://raycoder.me/tags/centos/">CentOS</category><category domain="https://raycoder.me/tags/%E6%90%9E%E6%9C%BA/">搞机</category><category domain="https://raycoder.me/tags/%E7%BD%91%E7%9B%98/">网盘</category><category domain="https://raycoder.me/tags/%E6%95%99%E7%A8%8B/">教程</category></item><item><title>想拥有自己的域名邮箱么？！</title><link>https://raycoder.me/p/domain-mail/</link><guid isPermaLink="true">https://raycoder.me/p/domain-mail/</guid><pubDate>Sat, 01 Feb 2020 14:20:35 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong><i class="fa fa-envelope"></i>假如你有一个域名，你想用它来弄一个域名邮箱么?!<i class="fa fa-envelope"></i></strong></p>
<!-- more -->
</blockquote>
<p>由于QQ邮箱在2020年1月20号取消了新建域名邮箱功能，而企业邮箱注册又非常麻烦，所以我决定采用一个国外的域名邮箱提供商——<a href="https://pingly.com">Pingly</a>。</p>
<h3 id="step-1打开pinglyhttpspinglycomsignup注册一个账号已有账号的点击登录httpspinglycomlogin">Step 1.打开<a href="https:/pingly.com/signup">Pingly</a>，注册一个账号。（已有账号的点击<a href="https://pingly.com/login">登录</a>）</h3>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200401131540.png" alt=""></p>
<h3 id="step-2登录注册完后按照系统的提示设置域名的txtcname及mx转发设置成功后点击verify可能要一段时间">Step 2.登录/注册完后按照系统的提示设置域名的TXT、CNAME及MX转发，设置成功后点击Verify（可能要一段时间）</h3>
<p><img src="https://gitee.com/RACD/cdn/raw/master/imgs/20200401131541.png" alt=""></p>
<h3 id="step-3然后打开你注册时的邮箱点击其中的链接进行账号的验证">Step 3.然后打开你注册时的邮箱，点击其中的链接进行账号的验证</h3>
<h3 id="final好了之后所有发到你的域名邮箱的邮件都会在收件箱httpspinglycominbox出现">Final：好了，之后所有发到你的域名邮箱的邮件都会在<a href="https://pingly.com/#inbox">收件箱</a>出现！</h3>
<p>开始使用吧！我的邮箱：<a href="mailto:ray@raycoder.me">ray@raycoder.me</a></p>
<hr>
<p>2020.4.1更新：推荐使用国内的<em class="emphasis-point">网易云企业邮</em>或<em class="emphasis-point">阿里云邮箱</em>。</p>
]]></description><category domain="https://raycoder.me/categories/%E5%9F%9F%E5%90%8D/">域名</category><category domain="https://raycoder.me/categories/%E9%82%AE%E7%AE%B1/">邮箱</category><category domain="https://raycoder.me/tags/%E5%9F%9F%E5%90%8D/">域名</category><category domain="https://raycoder.me/tags/%E8%87%AA%E5%AE%9A%E4%B9%89/">自定义</category><category domain="https://raycoder.me/tags/%E6%90%9E%E6%9C%BA/">搞机</category></item><item><title>PicGo + Gitee(码云)实现markdown图床</title><link>https://raycoder.me/p/picgo-and-gitee-markdown-pic/</link><guid isPermaLink="true">https://raycoder.me/p/picgo-and-gitee-markdown-pic/</guid><pubDate>Wed, 22 Jan 2020 14:53:20 +0800</pubDate><description><![CDATA[<blockquote>
<p><strong>转载自: <a href="https://www.jianshu.com/u/f81ef1ee8360">LeonG7</a>的<a href="https://www.jianshu.com/p/b69950a49ae2">简书博客</a>。</strong>
<strong>前言：深感在线博客的编辑器坑太多了，文档丢失、必须联网、可移植性太差，所以开始寻找可替代的方案。</strong></p>
</blockquote>
<p>咱们写博客的时候，总是需要<code>插入图片</code>的，图片存在本地的话上传到博客网站去就没法显示了，就算一个图一个图的复制粘贴上去，想移植到其他的博客网站，图就会失效，我们就需要图床。</p>
<p>图床是干什么的？ 图床就是一个便于在博文中插入在线图片连接的个人图片仓库。设置图床之后，在自己博客中插入的图片链接就可以随时随地在线预览了，并且不会因为任何意外原因无法查看，除非自己亲自删除。</p>
<h4 id="神奇的picgo就是为了解决这个问题诞生的它可以将图片上传到指定的图床上然后返回markdown链接直接粘贴到你的文档中就搞定啦">神奇的PicGo就是为了解决这个问题诞生的，它可以将图片上传到指定的图床上，然后返回markdown链接，直接粘贴到你的文档中，就搞定啦~~~</h4>
<p>问题又来了，网上推荐七牛云阿里云都是要租赁服务器的，太麻烦还要钱，微博现在挂链接又很厉害。大部分人选择用github，但是github虽好却是国外的网站，速度终究比不上国内网站，研究了小半天，终于发现完美的解决方案。</p>
<h2 id="最终决定使用picgohttpsgithubcommolunerfinnpicgo--国内的github---码云httpsgiteecom来实现markdown图床">最终决定使用<a href="https://github.com/Molunerfinn/PicGo"><code>PicGo</code></a> + <a href="https://gitee.com"><code>国内的github - 码云</code></a>来实现<code>markdown图床</code></h2>
<h2 id="1-安装">1. 安装</h2>
<ul>
<li>PicGo</li>
<li>picgo-plugin-gitee-uploader插件</li>
</ul>
<h3 id="首先打开picgo官网httpsgithubcommolunerfinnpicgo下载安装包">首先打开<a href="https://github.com/Molunerfinn/PicGo">PicGo官网</a>，下载安装包</h3>
<center><img src="https://gitee.com/dogleft/blogsrc/raw/master/img/picgo1.jpg"/></center>
<p><del>速度还挺快</del></p>
<h3 id="安装之后打开主界面">安装之后打开主界面</h3>
<center><img src="https://gitee.com/dogleft/blogsrc/raw/master/img/picgo2.jpg"/></center>
<h3 id="选择最底下的插件设置搜索gitee">选择最底下的插件设置，搜索gitee</h3>
<center><img src="https://gitee.com/dogleft/blogsrc/raw/master/img/picgo3.jpg"/></center>
<h3 id="点击gitee-uploader开始安装">点击gitee-uploader开始安装</h3>
<blockquote>
<p>这里注意一下，必须要先安装<a href="https://nodejs.org"><code>node.js</code></a>才能安装插件，没装的自己装一下，然后重启就行。</p>
</blockquote>
<p>这个地方有两个插件，我试了一遍，两个都能用，大家看心情选择，先说一下这个<code>gitee-uploader</code>，用不了的同学就选另外那个，我都会讲一遍配置。</p>
<h2 id="2-建立gitee码云图床库">2. 建立Gitee（码云）图床库</h2>
<p>注册码云的方法很简单，网站引导都是中文，不多说了，我们直接建立自己的图床库。</p>
<h3 id="点击右上角的号新建仓库">点击右上角的+号，新建仓库</h3>
<center><img src="https://gitee.com/dogleft/blogsrc/raw/master/img/picgo4.jpg"/></center>
<p>新建仓库的要点如下：</p>
<pre><code>1. 输入一个仓库名称
2. 其次将仓库设为公开
3. 勾选使用Readme文件初始化这个仓库
   这个选项勾上，这样码云会自动给你的仓库建立master分支，这点很重要!!! 我（原作者）因为这点折腾了很久，因为使用github做图床picgo好像会自动帮你生成master分支，而picgo里的gitee插件不会帮你自动生成分支。
</code></pre>
<center><img src="https://gitee.com/dogleft/blogsrc/raw/master/img/picgo5.jpg"/></center>
<p>点击创建进入下一步。</p>
<h2 id="3-配置picgo">3. 配置PicGo</h2>
<p>安装了gitee-uploader插件之后，我们开始配置插件</p>
<p>配置插件的要点如下：</p>
<center><img src="https://gitee.com/dogleft/blogsrc/raw/master/img/picgo6.jpg"/></center>
<ul>
<li>repo：用户名/仓库名称，比如我自己的仓库leonG7/blogImage，也可以直接复制仓库的url</li>
</ul>
<center><img src="https://gitee.com/dogleft/blogsrc/raw/master/img/picgo7.jpg"/></center>
<ul>
<li>branch：分支，这里写上master</li>
<li>token：填入码云的私人令牌</li>
<li>path：路径，一般写上img</li>
<li>customPath：提交消息，这一项和下一项customURL都不用填。在提交到码云后，会显示提交消息，插件默认提交的是 Upload 图片名 by picGo - 时间</li>
</ul>
<h3 id="这个token怎么获取下面登录进自己的码云">这个token怎么获取？下面登录进自己的码云</h3>
<ol>
<li>点击头像，进入设置</li>
</ol>
<center><img src="https://gitee.com/dogleft/blogsrc/raw/master/img/picgo8.jpg"/></center>
<ol start="2">
<li>找到左边安全设置里面的私人令牌</li>
</ol>
<center><img src="https://gitee.com/dogleft/blogsrc/raw/master/img/picgo9.jpg"/></center>
<ol start="3">
<li>点击生成新令牌，把projects这一项勾上，其他的不用勾，然后提交</li>
</ol>
<center><img src="https://gitee.com/dogleft/blogsrc/raw/master/img/picgo10.jpg"/></center>
<p>这里需要验证一下密码，验证密码之后会出来一串数字，这一串数字就是你的token，将这串数字复制到刚才的配置里面去。</p>
<center><img src="https://gitee.com/dogleft/blogsrc/raw/master/img/picgo11.jpg"/></center>
<blockquote>
<p>注意：这个令牌只会明文显示一次，建议在配置插件的时候再来生成令牌，直接复制进去，搞丢了又要重新生成一个。</p>
</blockquote>
<h2 id="现在保存你刚才的配置然后将它设置为默认图床大功告成">现在保存你刚才的配置，然后将它设置为默认图床，大功告成。</h2>
<p>还有一个插件<code>gitee x.x.x-beta</code>，功能差不多，<code>刚才那个能用的话就不需要用这个</code>，配置的内容有点差别，简单说一下：</p>
<center><img src="https://gitee.com/dogleft/blogsrc/raw/master/img/picgo12.jpg"/></center>
<ul>
<li>url：图床网站，这里写码云的主页 <a href="https://gitee.com">https://gitee.com</a></li>
<li>owner：所有者，写上你的码云账号名，如果你不知道你的账号名，进入你刚才的仓库，浏览器url里面有</li>
</ul>
<center><img src="https://gitee.com/dogleft/blogsrc/raw/master/img/picgo13.jpg"/></center>
<ul>
<li>
<p>repo：仓库名称，只要写上仓库名称就行，比如我自己的仓库blogImage</p>
</li>
<li>
<p>path：写上路径，一般是img，<strong>这几个项都不用加“ / “符号</strong></p>
</li>
<li>
<p>token：刚才你获取的个人令牌，两个插件是通用的，如果你用了另一个再来用这个，它会自动读取另一个插件的部分配置，不用重新申请</p>
</li>
<li>
<p>message：不用填</p>
</li>
</ul>
<h2 id="4-测试">4. 测试</h2>
<p>随便选一张图片上传（picgo也支持剪贴板上传，截图工具推荐win10的Snipaste神器！），试试看</p>
<h2 id="超级快有木有比github快很多01秒上传而且导入到你的markdown编辑器里面也是秒识别你的图片内容而如果是github图床上传太慢不说可能还会出现下面这样识别不出来的问题"><strong><code>超级快有木有！比github快很多，0.1秒上传，而且导入到你的markdown编辑器里面也是秒识别你的图片内容，而如果是github图床上传太慢不说可能还会出现下面这样识别不出来的问题！</code></strong></h2>
<h3 id="上传之后默认复制链接直接粘贴到你的markdown编辑器里就可以愉快的进行写作了">上传之后默认复制链接，直接粘贴到你的markdown编辑器里，就可以愉快的进行写作了！</h3>
<p>原文：<a href="https://www.jianshu.com/p/b69950a49ae2">https://www.jianshu.com/p/b69950a49ae2</a></p>
]]></description><category domain="https://raycoder.me/categories/picgo/">Picgo</category><category domain="https://raycoder.me/categories/%E5%9B%BE%E5%BA%8A/">图床</category><category domain="https://raycoder.me/tags/picgo/">Picgo</category><category domain="https://raycoder.me/tags/gitee/">Gitee</category><category domain="https://raycoder.me/tags/%E5%B7%A5%E5%85%B7/">工具</category></item></channel></rss>