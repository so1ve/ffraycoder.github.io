[{"content":"heimu { color: black; background: black; display: inline-flex; transition: 0.3s ease; } heimu:hover { color: white; } 这可能是旧博客的最后一篇文章了，之后会使用新博客系统。 七户创客社征文。 阅读这篇文章前，我们假定你对HTTP稍有一些了解。 JWT……和为什么要用JWT JWT，即JSON Web Tokens。顾名思义，其为用于Web授权认证的一种令牌。它最为显著的特征为安全和“无状态”。 我们先来看看过去的几种认证方式。 HTTP Basic Auth 在Web授权认证这一方面，我们最先使用的是HTTP Basic Auth。这种方式优缺点都很明显，优点是简单易用，基本上所有流行的网页浏览器都支持，","lvl0":"详解JWT","lvl1":["前端"],"lvl2":"","objectID":"ec5d3c8aa51b18861a1fbd8eee5c2e91","tags":["JWT","前端"],"url":"https://raycoder.me/p/know-jwt/"},{"content":"图片挂了是件小事，最近Gitee添加了Referer，所以图片全显示不出来了。 不重要，等我切换到新博客系统（Dolan）就全部重新上传一遍。","lvl0":"关于博客图片这件事……","lvl1":[],"lvl2":"","objectID":"7c8970cf813d34fcf5b34566965ba0b8","tags":[],"url":"https://raycoder.me/p/about-images/"},{"content":"本博客从即日起暂停更新（虽然已经咕了很久，逃 博主正在开发新的博客系统，开发完成后将把本博客迁移到新系统。","lvl0":"暂停更新","lvl1":[],"lvl2":"","objectID":"9efa1e1de594131160232e67ee86eb73","tags":[],"url":"https://raycoder.me/p/pause-update/"},{"content":" 本文转自陈YFの博客(￣▽￣)\u0026quot;\n 2020年8月9日Jsdelivr发布了一次使用政策：Create Acceptable Use Policy，其中第4条Prohibited Use引起了众多议论：\n","lvl0":"图床的千层套路","lvl1":["博客"],"lvl2":"","objectID":"0d393f36bd41e6b97b78fc3bfebf553f","tags":["图床","博客"],"url":"https://raycoder.me/p/hey-picbed/"},{"content":" 写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me\n 在Vue的开发中，我们经常有异步获取数据的情况，在没有数据的时候使用骨架装载器（Skeleton Loader，直译）占位，比如：\n","lvl0":"Vue中的{ __ob__: Observer }问题解决","lvl1":["前端","Vue"],"lvl2":"","objectID":"2e7300ec3df3ffa9f446d8609a66af47","tags":["前端","Vue","Vue问题"],"url":"https://raycoder.me/p/vue-ob-observer-problem/"},{"content":" 写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me\n 众所周知，Python有一个import this的彩蛋：\n","lvl0":"Python Import This源码剖析","lvl1":["Python"],"lvl2":"","objectID":"f78583a82eb81b997e4ba2d5a9d258dd","tags":["Python","彩蛋"],"url":"https://raycoder.me/p/python-import-this/"},{"content":"写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me 咕了这么久，我干了什么？ 呼，俺前些天在准备期末考试，终于放假了~~~😍😍😍🎉🎉🎉可以更新一下博客了！ 学 了 什 么（活 到 老 学 到 老） 哦，JS、Vue和React。 为什么关注Vue3？ Vue3.0RC🤢🤔 正文开始 （Vue3英文文档：https://v3.vuejs.org，中文：https://v3.cn.vuejs.org） Vue3重写原因？ Tree shaking support：可以将无用模块“剪辑”，仅打包需要","lvl0":"Vue3的改变有哪些？","lvl1":["前端","Vue"],"lvl2":"","objectID":"1de3842795d0e9029b5d3a0de28f2793","tags":["前端","Vue","Vue3"],"url":"https://raycoder.me/p/vue3-design/"},{"content":"写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me 最近在群里看到一些小伙伴在问问题！主要是不知道怎么添加下载链接！这件事情本来就是一个简单的markdown超链接+downloads目录的事，但是咋在他们口里就这么难咧🍌 嗯，我先来给大家分析一下hexo和hugo的工作机制。上图~~，淦它就完了~~ 就是这样。 hexo可以在/source文件夹下新建一个downloads目录，hugo就在/static文件夹下新建。 hexo需要在站点配置文","lvl0":"Hugo与Hexo的工作机制","lvl1":["博客"],"lvl2":"","objectID":"03bbb0c84bff05bcf76db904ff92a6c3","tags":["Hugo","Hexo","博客"],"url":"https://raycoder.me/p/how-hugo-and-hexo-works/"},{"content":" 写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me\n 百度的推送是真香啊嘿（迫真）\n","lvl0":"给Hugo博客加上baiduurls.txt","lvl1":["SEO"],"lvl2":"","objectID":"08dbd82d20d040a66d734a1ae33fee1d","tags":["百度","SEO"],"url":"https://raycoder.me/p/hugo-baidu-urls/"},{"content":"写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me 一些闲话 Hugo博客较Hexo博客有一点不好，就是无法生成content.json供JS实现站内搜索。一个博客怎么可以没有站内搜索呢，找文章很不方便。 之前也捣鼓了很久Algolia站内搜索，但总是觉得大材小用了，不过不得不说，Algolia的体验真的不错。 Algolia的站内搜索实现也很简单，一起看看罢！ 淦 生成索引 Algolia创建空索引 打开Algolia创建应用，自取名字(比如说blo","lvl0":"Hugo博客搭配Algolia实现站内搜索","lvl1":["博客","功能添加","站内搜索"],"lvl2":"Hugo博客搭配Algolia实现站内搜索,Hugo博客站内搜索","objectID":"c99a621c7e899ce32ccdc9d8bd70b4b9","tags":["Hugo","博客","站内搜索","Algolia"],"url":"https://raycoder.me/p/hugo-search-with-algolia/"},{"content":"写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me 没啥好说的，请参考之前的文章，万能的CLOUDFLARE WORKERS+JSProxy代理？！和使用GHProxy加速GitHub进行基础配置。 淦 复制代码 把如下代码复制到一个新worker里，如下： /* * @Author: yumu * @Date: 2020-02-05 * @Email: yumusb@foxmail.com * @Last Modified by: yumusb * @Last Modified time: 2020-02-05 */ //配置你要监控的域名 const zone = \u0026#34;\u0026#34;; //组合域名到API接口访问地址 const url = \u0026#34;https://api.cloudflare.com/client/v4/zones/\u0026#34; + zone + \u0026#34;/analytics/dashboard?since=-1440\u0026amp;continuous=true\u0026#34;; //你的API验证token const token = \u0026#34;\u0026#34; //页面显示的地址 const echourl=\u0026#34;https://RayCoder.ME\u0026#34;; async function handleRequest(request) { let requestURL =","lvl0":"使用CloudFlare Workers搭建网站状态监控","lvl1":["网站"],"lvl2":"使用CloudFlare Workers搭建网站状态监控","objectID":"b9361d9d250f6654a22c366c52fdf327","tags":["Cloudflare","CF Workers"],"url":"https://raycoder.me/p/cloudflare-workers-website-monitoring/"},{"content":"写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me 先氵一点 GitHub由于仓库部署在国外，天朝的强大阻断了数据传输二，GitHub上面的项目Clone速度是真的惨不忍睹 当然也有人说，Gitee复制一下仓库，Clone下来再改配置不就行了吗？ emmm是可以，但是Gitee也无法复制项目的Releases。 艾玛真烦 最近康到一篇文章，感觉还不错，分享给大家https://hunsh.net/archives/23，好像是基于JSProxy的一","lvl0":"使用GHProxy加速GitHub","lvl1":["代理"],"lvl2":"使用GHProxy加速GitHub","objectID":"0909cfd920d531692c092be84bcfb2cf","tags":["Workers","GitHub","代理"],"url":"https://raycoder.me/p/ghproxy-usage/"},{"content":"写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me 最近在GitHub上面发现了一个很有趣的项目，名叫Mirror，官方Demo在这里：https://mirror.am0200.com/ 哎哟我艹，貌似有那么一丢丢好康，但是这个release就有点过粪了吧？ 这个绝对是我见过最简单的博客了，使用动态路由分发视图，单页面应用。 I了I了~ 搭建，也很简单，从这里下载最新版Mirror，解压后在index.html里进行配置即可。 打开index.h","lvl0":"搭建史上最简单的博客——Mirror博客","lvl1":["折腾"],"lvl2":"搭建史上最简单的博客——Mirror博客","objectID":"4a7af305ba5457d24ca7edf64771a52b","tags":["折腾","博客","Mirror"],"url":"https://raycoder.me/p/build-the-simplest-blog-mirror-blog/"},{"content":" 写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me\n Valine近期进行了一批大更新，是时候把评论升级一下了。\n","lvl0":"Valine新版本入坑","lvl1":["博客","评论","Valine"],"lvl2":"Valine新版本使用方法、配置项","objectID":"a598ecb82f611f013d3e3cf86fb4192e","tags":["博客","评论","Valine"],"url":"https://raycoder.me/p/valine-new-version/"},{"content":" 写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me\n","lvl0":"营销号生成器源代码","lvl1":["JS"],"lvl2":"营销号生成器源代码","objectID":"9cbb549776cecd187a32cb6efe90f0f4","tags":["JS","营销号"],"url":"https://raycoder.me/p/yingxiaohao-source-code/"},{"content":" 写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me\n 内存分配 在Python学习中，我们经常会写这样的代码。\n\u0026gt;\u0026gt;\u0026gt; foo = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; bar = foo 这里，我们把foo的值赋给了bar——但是，这真的是一种赋值而不是..别名..吗？\n","lvl0":"Python学习笔记之内存分配与id函数、is关键字","lvl1":["Python","Python学习笔记","Python内建函数"],"lvl2":"Python学习笔记之内存分配与id函数","objectID":"623d47a78e737e9095776de24931bdd7","tags":["Python","Python学习笔记","Python内建函数","Python关键字"],"url":"https://raycoder.me/p/python-memory-footprint-and-id-is/"},{"content":"这真的是气死我了。我一个小站都可以被爬。不说了，上图吧。 我的文章允许您转载，但你这个没有标明作者是什么意思？ 不是你这个连shortcode都没有改也太那啥了吧？？（那时候我还不会markdown写加点） 实在不想说话了。 爬虫在百度上收录都有好几页。 我只想说：转载请写明出处！ 2020/4/16更新： 目前mamicode.com已经删除文章，e-learn.cn已经标明出处。","lvl0":"记一次文章被爬","lvl1":["博客"],"lvl2":"记一次文章被爬","objectID":"895b457d1d89c5272b440fbc825f5167","tags":["博客"],"url":"https://raycoder.me/p/article-crawled-by-spiders/"},{"content":"写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me What is SEO？ SEO（Search Engine Optimization），即搜索引擎优化。 一句废话，就是为了让搜索引擎更了解你的网站，从而达到更多收录的效果。 域名注册时长 域名注册时长是搜索引擎很重要的指标之一。本站（https://raycoder.me）注册了将近3个月，目前百度收录17条。以iMaegoo's Blog为例，域名注册了两年的时长，收录量有61条。存活时间不长的域名在百度索引里不会占","lvl0":"网站SEO优化：1","lvl1":["SEO"],"lvl2":"个人网站SEO优化","objectID":"a0df2c48146963213f12af3aa7deed43","tags":["SEO","博客"],"url":"https://raycoder.me/p/seo-1/"},{"content":"噗，抱歉，目前我更换了原版Valine，评论都不见了QwQ，我会尽力把它们迁移过来的！！","lvl0":"About Valine评论","lvl1":["博客"],"lvl2":"","objectID":"b96f9ce0d7029a3f4b176206f04eddbe","tags":["博客"],"url":"https://raycoder.me/p/about-valine/"},{"content":"写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me 近日发现GitHub Pages国内访问速度变快，准备换回去。奈何我又想保留GitHub上的源码，Hugo又没有hexo d这样的一键部署操作，只能使用Travis CI（Continuous Integration，持续集成）来实现。 什么是CI？ CI，Continuous Integration，持续集成。CI就像是一个监视器，在你赋予它权限后，它就会一直盯着你仓库的动态。当你的仓库触发指定操作","lvl0":"Travis CI自动部署Hugo博客","lvl1":["CI"],"lvl2":"Travis CI自动部署Hugo博客至GitHub","objectID":"b0ac797e90311d18a41182d1f34961ab","tags":["Travis CI","Hugo","GitHub","博客"],"url":"https://raycoder.me/p/travis-ci-automatically-deploys-hugo-blog/"},{"content":"写作不易，资瓷一下呗！本文首发于个人博客：https://raycoder.me 前天在逛大佬们的博客，有的大佬用的是github.io二级域名。然后网页挂了，交流群内一片喊声淦🙃 昨天上午又去看了看，Pages可以正常访问了。阿，怎么感觉变快了？ 众所周知GitHub采用的Fastly CDN，估计前天是增加国内节点去了。 真香，可以抛弃Netlify了QQ 而且取消了对百度Robots.txt的限制。","lvl0":"GitHub Pages变快了！","lvl1":["GitHub"],"lvl2":"GitHub Pages变快了！","objectID":"f77ce703c2ed094df58009bd8a44be10","tags":["GitHub","Pages"],"url":"https://raycoder.me/p/github-pages-becomes-faster/"},{"content":"写作不易，资瓷一下呗！个人博客：https://raycoder.me 普通文本 标题 HTML中的标题有六个级别： \u0026lt;h1\u0026gt; 用在主标题上。 \u0026lt;h2\u0026gt; 用于二级标题上。 \u0026lt;h3\u0026gt; 以此类推…… \u0026lt;h4\u0026gt; \u0026lt;h5\u0026gt; \u0026lt;h6\u0026gt; \u0026lt;h1\u0026gt;一级标题\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;二级标题\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;三级标题\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;四级标题\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;五级标题\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;六级标题\u0026lt;/h6\u0026gt; 结果：","lvl0":"HTML入门(二)：文本","lvl1":["HTML","HTML入门"],"lvl2":"HTML入门学习二：文本","objectID":"347e4de09d928260d5120185b244530d","tags":["HTML","HTML入门"],"url":"https://raycoder.me/p/html-2/"},{"content":"写作不易，资瓷一下呗！个人博客：https://raycoder.me 本文首发于Ray's Blog Word文档的结构 任何文档中标题和子标题都反映出信息的层次性。标题后面可能跟着文档简介或是文档中最重要的信息。下面是一个Word文档示例。 从这里我们理解到了Word文档中结构的运用对理解文档的帮助，编写网页的时候，道理是一样的。 HTML文档的结构 HTML使用元素描述结构 \u0026lt;html\u0026gt;\u0026lt;!--HTML代码的开始--\u0026gt; \u0026lt;body\u0026gt;\u0026lt;!--与","lvl0":"HTML入门(一)：结构","lvl1":["HTML","HTML入门"],"lvl2":"HTML入门(一)","objectID":"af8cea46a256333577fdbf28cf222a59","tags":["HTML","HTML入门","HTML结构"],"url":"https://raycoder.me/p/html-1/"},{"content":"写作不易，资瓷一下呗！个人博客：https://raycoder.me 本文首发于Ray's Blog 不瞒你们说，我看到这个项目的时候都震（智）惊（障）了！贴上链接：EtherDream / jsproxy | Github你猜这个项目是做什么的？使用Cloudflare workers进行反向代理！！！ 先附上一个网址。https://yt.raycoder.me，这是我弄的一个YouTube代理网址。这个真的只使用了Cloudflare Workers进行代理，我是没有做任何其它配置的。你也可以把","lvl0":"万能的CLOUDFLARE WORKERS+JSProxy代理？！","lvl1":["代理"],"lvl2":"使用CLOUDFLARE WORKERS搭建代理、CDN","objectID":"3ebfae2c24c0a7d27452ad9d97d676e4","tags":["代理","Cloudflare","CDN","Workers"],"url":"https://raycoder.me/p/cf-worker-proxy/"},{"content":"写作不易，资瓷一下呗！个人博客：https://raycoder.me 本文首发于Ray's Blog Python中有一种操作叫做打开文件，代码如下： \u0026gt;\u0026gt;\u0026gt; f = open(\u0026#39;/foo/bar.txt\u0026#39;, \u0026#39;r\u0026#39;) \u0026gt;\u0026gt;\u0026gt; data = f.read() \u0026gt;\u0026gt;\u0026gt; f.close() \u0026gt;\u0026gt;\u0026gt; data \u0026#39;Hello World!\u0026#39; 这样，你就从/foo/bar.txt这个文本文件中读取到了它的文本：Hello World! 但是，这样处理有一些问题： 可能在处理完文本后忘记关闭文件？ 可能在读取时出现错误？ 这时，try...except...finally...语句就派上了用场： try: f = open(\u0026#39;/foo/bar.txt\u0026#39;, \u0026#39;r\u0026#39;) except: print(\u0026#39;Fail to open /foo/bar.txt\u0026#39;) exit(-1) finally: f.close() 虽然这段代码运行良好，但是太冗长了。 这时","lvl0":"Python中的with关键字使用方法？","lvl1":["Python","Python关键字","Python学习笔记"],"lvl2":"Python中的with关键字","objectID":"e99654433d3ba04eb3625a7fbaa8e1b3","tags":["Python","Python学习笔记","多线程"],"url":"https://raycoder.me/p/python-with/"},{"content":" 写作不易，资瓷一下呗！个人博客：https://raycoder.me\n本文首发于Ray's Blog\n 最近B站把AV号改成了BV号！1以后B站没有AV了！[手动狗头]\n","lvl0":"【刻在基因里的序列号变了？】Bilibili采用新的稿件编号！AV与BV互相转化的方法！","lvl1":["算法"],"lvl2":"【刻在基因里的序列号变了？】Bilibili采用新的稿件编号！AV与BV互相转化","objectID":"75ba2b7262639ea3adbba9dbe8f61d13","tags":["算法","Bilibili"],"url":"https://raycoder.me/p/av-and-bv/"},{"content":" 写作不易，资瓷一下呗！个人博客：https://raycoder.me\n本文首发于Ray's Blog\n Leancloud也可以搭建网站？\n","lvl0":"旁门左道之使用Leancloud搭建网站！","lvl1":["免费空间"],"lvl2":"旁门左道之使用Leancloud搭建网站","objectID":"63ffeea0813b9c27fb00ce5838692940","tags":["免费空间","网站"],"url":"https://raycoder.me/p/build-website-with-leancloud/"},{"content":"写作不易，资瓷一下呗！个人博客：https://raycoder.me 本文首发于Ray's Blog 我们先来康一段代码： \u0026gt;\u0026gt;\u0026gt; def count(n): for i in range(1, n+1): print(i) \u0026gt;\u0026gt;\u0026gt; count(5) 1 2 3 4 5 这一小段代码执行了计数，输出了1-5。 不过，有时我们会有一些想♂FA，想要每次获取下一个数，如第一次执行时给你返回1，第二次返回2，第三次返回3……如此如此。 你可能会这么做： \u0026gt;\u0026gt;\u0026gt; n = 0 \u0026gt;\u0026gt;\u0026gt; def addone(): global n n+=1 print(n) \u0026gt;\u0026gt;\u0026gt; addone() 1 \u0026gt;\u0026gt;\u0026gt; n 1 但这样又暴露了一个缺点：我们使用了一个全局变量。想要避免这种缺点又要实现计数的功能，yield就派上用场了。 想要实现G","lvl0":"Python中的yield关键字分析：一个Generator","lvl1":["Python","Python关键字","Python学习笔记"],"lvl2":"Python中的Yield关键字分析：一个Generator","objectID":"0f84433bdfbccaffd3ab2a2ae290ae05","tags":["Python学习笔记","Python","Python关键字"],"url":"https://raycoder.me/p/python-yield/"},{"content":"建立个人博客白嫖推荐： 框架/主题：Hugo\u0026amp;MemE 源码托管：GitHub 网站持续集成部署：Netlify 网站DNS解析服务/免费CDN：Cloudflare （可选）免费CDN：NodeCache\u0026amp;DDOS Guard 统计：百度统计/Google Analytics 白嫖成功，废话不说开始建站！本文采用操作系统：Windows 10 2004 19587.1000，其他系统请举一反三，采用Git BASH。 Hugo\u0026amp;MemE 首先，先去下载Hugo。在你看到这篇文章之前，你可能已经阅读了许多建博客教程，也许是推荐","lvl0":"建立个人博客配置推荐","lvl1":["博客","折腾"],"lvl2":"Build a Blog Recommendation/建立个人博客配置推荐","objectID":"681e95e067b53baf645aa714ffbce8a0","tags":["博客","折腾","GitHub Pages","Hugo","Netlify","Cloudflare"],"url":"https://raycoder.me/p/build-a-blog-recommendation/"},{"content":"今天不知道吃啥，就吃老八秘制小汉堡康Ray的Python字符串特殊字符解析~~ 转义字符 意义 ASCII码值（十进制） \\a 响铃(BEL) 007 \\b 退格(BS)，将当前位置移到前一列 008 \\f 换页(FF)，将当前位置移到下页开头 012 \\n 换行(LF)，将当前位置移到下一行开头1 010 \\r 回车(CR)，将当前位置移到本行开头1 013 \\t 水平制表(HT) (跳到下一个TAB位置) 009 \\v 垂直制表(VT) 011 \\\\ 代表一个反斜线字符\u0026quot;\\\u0026quot; 092 \\' 代表一个单引号(撇号)字符 039 \\\u0026quot; 代表一个双引号字符 034 ? 代表一个","lvl0":"Python中的字符串转义字符","lvl1":["Python"],"lvl2":"Python中的字符串特殊/转义字符","objectID":"d51c38340f838a87d8a88b8019ce266c","tags":["Python"],"url":"https://raycoder.me/p/python-special-characters/"},{"content":"Hugo 我之前写了一个蠢蠢的脚本，用于自动推送生成完的静态网站： Hugo-Python(伪)自动部署 自以为很好…… 不过在看了reuixiy大佬的博客后，才发现他有一个Edit Me： 点击后发现可以Fork这个Markdown文件来修改。 不过俺们这个静态网页好像就不太行……这个脚本有毛用！！！！ 果然是我太嫩了 研究了下人家的博客Repo 没错他是直接推送一个源代码的！ 咱们打开netlify.toml 自己也新建一个netlify.toml(~blog/netlify.toml) 填入","lvl0":"Hugo-MemE/Hexo(真)自动推送部署至Netlify","lvl1":["博客"],"lvl2":"Hugo/Hexo博客自动推送部署至Netlify","objectID":"160afe11258ff6a997fbb5a6cadf67ce","tags":["Hugo","Git","Netlify"],"url":"https://raycoder.me/p/deploy-your-hugo-and-hexo-blog-to-netlify/"},{"content":"好的开端！庆祝🤤🤤🤤~撒花🎉🎉🎉~","lvl0":"本站UV达到1000人啦！","lvl1":["博客"],"lvl2":"本站达到1000UV","objectID":"54e973b2924ddd056f085e30ad8b9b69","tags":["博客"],"url":"https://raycoder.me/p/1000-uv/"},{"content":"原作者是PHP版本，我把它移植到了HTML上。代码很丑，勿喷！（适用于Hugo） 自己在./blog/static/下新建goto/index.html，代码如下。 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;robots\u0026#34; content=\u0026#34;noindex, nofollow\u0026#34; /\u0026gt; \u0026lt;noscript\u0026gt;\u0026lt;meta http-equiv=\u0026#34;refresh\u0026#34; content=\u0026#34;1;url=\u0026#39;\u0026#39;;\u0026#34;\u0026gt;\u0026lt;/noscript\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;!--[if IE 8]\u0026gt; \u0026lt;style\u0026gt; .ie8 .alert-circle,.ie8 .alert-footer{display:none}.ie8 .alert-box{padding-top:75px}.ie8 .alert-sec-text{top:45px} \u0026lt;/style\u0026gt; \u0026lt;![endif]--\u0026gt; \u0026lt;script\u0026gt; function getQueryVariable(variable){ var query = window.location.search.substring(1); var vars = query.split(\u0026#34;\u0026amp;\u0026#34;); for (var i=0;i\u0026lt;vars.length;i++) { var pair = vars[i].split(\u0026#34;=\u0026#34;); if(pair[0] == variable){return pair[1];} } return(null); } \u0026lt;/script\u0026gt; \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;script\u0026gt; x = document.getElementsByTagName(\u0026#34;title\u0026#34;)[0]; x.innerHTML=\u0026#34;外链跳转 - \u0026#34; + getQueryVariable(\u0026#34;url\u0026#34;); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; body{margin:0;padding:0;background:#E6EAEB;font-family:Arial,\u0026#39","lvl0":"Hugo-HTML版GOTO链接中转页","lvl1":["HTML"],"lvl2":"Hugo-HTML版GOTO链接中转页","objectID":"8faa97a85f33309d7657aa21a0857fd0","tags":["HTML","中转","JS"],"url":"https://raycoder.me/p/goto-transfer-page/"},{"content":"白嫖传送门：https://ddos-guard.net/en/store/web 俺们作为白嫖党选什么岂不是很清楚~ 然后填入你的域名和回源IP地址！ 然后按照流程注册！ 过一会儿就可以在控制面板看到啦！ 点击进去，就可以看到它给我们分配的IP地址。 不过速度真的不敢恭维！（可能是我个人原因） 参考资料： 【免费CDN】俄罗斯DDOS-Guard支持ssl防御1.5T | 沧水博客","lvl0":"DDOS-Guard免费CDN","lvl1":["CDN","网站"],"lvl2":"DDOS-Guard免费CDN, 免备案国外CDN","objectID":"b1b672440d70854da78ebc4f0e19c9a8","tags":["CDN","白嫖","福利"],"url":"https://raycoder.me/p/ddos-guard-free-cdn/"},{"content":"backblaze B2对象存储传送门：https://secure.backblaze.com/b2_buckets.htm 注册个账号，登录！ Backblaze前10 GB的存储空间是免费的，每天能下载1G以内文件免费，上传免费，并与cloudflare合作，只要套个cloudflareCDN即可无限免费下载。 因此我们得到如下产品： 10G存储空间免费 上行免费 下行免费 全球最可靠的云存储服务之一 全球最强的CDN云分发服务之一 新建一个桶，随便取个名。注意要选Public（公众）！这LAG机","lvl0":"Backblaze免费免备案对象存储","lvl1":["对象存储","网站"],"lvl2":"白嫖Backblaze免费免备案对象存储","objectID":"b86126a3d52588bf49f44d48f12a32de","tags":["Backblaze","对象存储","白嫖","福利"],"url":"https://raycoder.me/p/backblaze-free-object-storage/"},{"content":"最近升级了电脑系统，打开Chrome崩溃了。 网络上的一些解决方法：在打开的快捷方式后添加 --test-type --no-sandbox，禁用沙盒。 这样在你双击快捷方式时浏览器可以正常打开，但是如果你在开始菜单打开，还是一样会崩溃🙃。 在我自己的研究中发现，正解如下： 操作系统名称 : Microsoft Windows 10 家庭 Insider Preview中文版 版本 : 10.0.19582 版本 19582 Chrome版本 : 版本 83.0.4087.0（正式版本）canary （64 位） 没错，我们应该更新到Canary 金丝雀版Chrome😎！ 下载地址：https://www","lvl0":"Chrome崩溃的一些解决办法","lvl1":["Chrome"],"lvl2":"","objectID":"179b0407b1bf8acd7713a290437761f7","tags":["Chrome"],"url":"https://raycoder.me/p/chrome-crashed/"},{"content":"什么是assert？它的中文名叫做断言。我们先来看一个简单的例子： age = int(input()) if age\u0026gt;=18: print(\u0026#39;You can watch it!\u0026#39;) else: print(\u0026#39;You are too young!\u0026#39;) 这个例子进行了一下18G操作，没有达到18岁的人会被拒之门外友善的提示。 不过，我们可以通过assert关键字来实现同等的操作。 \u0026gt;\u0026gt;\u0026gt; age = int(input()) 17 \u0026gt;\u0026gt;\u0026gt; assert age \u0026gt;= 18 Traceback (most recent call last): File \u0026#34;\u0026lt;pyshell#3\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; assert age \u0026gt;= 18 AssertionError age = int(input()) try: assert age \u0026gt;= 18 print(\u0026#39;You can watch it!\u0026#39;) except AssertionError: print(\u0026#39;You are too young!\u0026#39;) 这只是一个简单的例子，assert还可以进行更复杂的操作。 引用一段菜鸟教程。 assert的语法格式如下： assert expression 等价于： if not expression: raise AssertionError assert后面也可以紧跟参数: assert expression","lvl0":"Python学习笔记之assert关键字简析","lvl1":["Python","Python关键字","Python学习笔记"],"lvl2":"","objectID":"bbf68459d4272101f137678c95de7d80","tags":["Python","关键字","Python学习笔记"],"url":"https://raycoder.me/p/python-assert/"},{"content":" ……出门看火伴，火伴皆惊忙：同行十二年，不知木兰是素贞。\n","lvl0":"我们国产语言木兰","lvl1":["吐槽"],"lvl2":"论'木兰'语言","objectID":"904e958c28368be89273c694ffb13a24","tags":["Ulang","素贞"],"url":"https://raycoder.me/p/ulang/"},{"content":"最近系统升级到1909, 送了我一套Office365. 我也很无奈啊, 送了让我激活也是够了... 用了各种激活软件都无效，比如Office Tool Plus. 根据国外某网站的资料，编写了一个批处理文件，命名为Office365激活.bat. ( 其实叫什么都可以 ) 代码如下: @echo off title Activate Office 365 ProPlus for FREE - MSGuides.com\u0026amp;cls\u0026amp;echo ============================================================================\u0026amp;echo #Project: Activating Microsoft software products for FREE without software\u0026amp;echo ============================================================================\u0026amp;echo.\u0026amp;echo #Supported products: Office 365 ProPlus (x86-x64)\u0026amp;echo.\u0026amp;echo.\u0026amp;(if exist \u0026#34;%ProgramFiles%\\Microsoft Office\\Office16\\ospp.vbs\u0026#34; cd /d \u0026#34;%ProgramFiles%\\Microsoft Office\\Office16\u0026#34;)\u0026amp;(if exist \u0026#34;%ProgramFiles(x86)%\\Microsoft Office\\Office16\\ospp.vbs\u0026#34; cd /d \u0026#34;%ProgramFiles(x86)%\\Microsoft Office\\Office16\u0026#34;)\u0026amp;(for /f %%x in (\u0026#39;dir /b ..\\root\\Licenses16\\proplusvl_kms*.xrm-ms\u0026#39;) do cscript ospp.vbs /inslic:\u0026#34;..\\root\\Licenses16\\%%x\u0026#34; \u0026gt;nul)\u0026amp;(for /f %%x in (\u0026#39;dir /b ..\\root\\Licenses16\\proplusvl_mak*.xrm-ms\u0026#39;) do cscript ospp.vbs /inslic:\u0026#34;..\\root\\Licenses16\\%%x\u0026#34; \u0026gt;nul)\u0026amp;echo.\u0026amp;echo ============================================================================\u0026amp;echo Activating your Office...\u0026amp;cscript //nologo ospp.vbs /unpkey:WFG99 \u0026gt;nul\u0026amp;cscript //nologo ospp.vbs /unpkey:DRTFM \u0026gt;nul\u0026amp;cscript //nologo ospp.vbs /unpkey:BTDRB \u0026gt;nul\u0026amp;cscript //nologo ospp.vbs /inpkey:XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 \u0026gt;nul\u0026amp;set i=1 :server if %i%==1 set KMS_Sev=kms7.MSGuides.com if %i%==2 set KMS_Sev=kms8.MSGuides.com if %i%==3 set KMS_Sev=kms9.MSGuides.com if %i%==4 goto notsupported cscript //nologo ospp.vbs /sethst:%KMS_Sev% \u0026gt;nul\u0026amp;echo ============================================================================\u0026amp;echo.\u0026amp;echo. cscript //nologo","lvl0":"白嫖Office365","lvl1":["批处理"],"lvl2":"Office365-KMS服务器激活","objectID":"b6516b9e1bfd8847ddf7821ef7acd07a","tags":["工具","福利","Office","破解"],"url":"https://raycoder.me/p/%E7%99%BD%E5%AB%96office365/"},{"content":"最近无聊就写了个Hugo自动部署的Python脚本。\n","lvl0":"Hugo-Python(伪)自动部署","lvl1":["Python","Hugo"],"lvl2":"Hugo自动部署","objectID":"b870ca44ad96e9eaed8aaffb381dbc9b","tags":["Hugo","Python","Git"],"url":"https://raycoder.me/p/hugo-auto-deploy/"},{"content":"一、网易云音乐 【转】https://zhuanlan.zhihu.com/p/30246788 调用地址：https://api.imjad.cn/cloudmusic/ 在以上网址后紧跟两个参数完成具体请求： type （默认值为type=song） id（歌曲的id） 其中type的所有可取的值如下： type 含义 song 单曲 lyric 歌词 comments 评论 detail 歌曲详情 artist 歌手 album 专辑 playlist 歌单 mv MV djradio 主播电台 dj 主播电台单曲ID detail_dj 主播电台单曲详情 search 搜索 type=song 当type=song时，返回歌曲的下载地址信息（和其他不是特别有用的信息","lvl0":"【转】适合爬虫使用的API","lvl1":null,"lvl2":"","objectID":"4cc4f8f81aad1f2fba027e9b27515bd1","tags":["爬虫","Api"],"url":"https://raycoder.me/p/spider-api/"},{"content":"exec()函数的作用：动态执行python代码。也就是说exec()可以执行复杂的python代码，而不像eval()函数那样只能计算一个表达式的值。 【转】https://www.jianshu.com/p/3cf0a649e7bc 举一个简单的小例子，代码如下： \u0026gt;\u0026gt;\u0026gt; i = 12 \u0026gt;\u0026gt;\u0026gt; j = 13 \u0026gt;\u0026gt;\u0026gt; exec(\u0026#34;answer=i*j\u0026#34;) \u0026gt;\u0026gt;\u0026gt; print(\u0026#34;Answer is %s\u0026#34;%answer) Answer is 156 这表明第三句的exec()函数能够正确地执行Python代码，并且能将计算结果赋予answer变量，就像真正的Python代码一样。 那么，我们能不能让exec()函数执行一","lvl0":"Python学习笔记之exec()函数简析","lvl1":["Python","Python关键字","Python学习笔记"],"lvl2":"","objectID":"7ad2b37b42ee236b8dc9aaeab3ca5fd0","tags":["内置函数","Python","Python进阶","Python学习笔记"],"url":"https://raycoder.me/p/python-exec/"},{"content":"一个最基本的eval()函数的格式应该如下： \u0026gt;\u0026gt;\u0026gt; command = \u0026#39;print(\\\u0026#39;Hello world!\\\u0026#39;)\u0026#39; \u0026gt;\u0026gt;\u0026gt; eval(command) Hello world! 没错，eval函数是一个可以让字符串转换为表达式的内置函数（注意eval()不支持任何形式的赋值操作，而不能是复杂的代码逻辑）。 eval()函数不仅可以执行代码，还可以作如下操作： \u0026gt;\u0026gt;\u0026gt; eval(\u0026#39;[1, 2, 3]\u0026#39;) #字符串转列表 [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; eval(\u0026#39;(1, 2, 3)\u0026#39;) #字符串转元组 (1, 2, 3) \u0026gt;\u0026gt;\u0026gt; eval(\u0026#39;{\u0026#34;one\u0026#34;: 1, \u0026#34;two\u0026#34;: 2, \u0026#34;three\u0026#34;: 3}\u0026#39;) #字符串转字典 {\u0026#39;one\u0026#39;: 1, \u0026#39;two\u0026#39;: 2, \u0026#39;three\u0026#39;: 3} \u0026gt;\u0026gt;\u0026gt; eval(\u0026#39;0o187\u0026#39;) 0o187 eval()函数的完整格式如下： eval(expression[, globals[, locals]]) expression: 表达式。 globals: 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。 locals: 变量作用域，局","lvl0":"Python学习笔记之eval()函数简析","lvl1":["Python","Python关键字","Python学习笔记"],"lvl2":"","objectID":"e876f6f78a1fb0ec165b87b6eb28aefb","tags":["Python","Python进阶","内置函数","Python学习笔记"],"url":"https://raycoder.me/p/python-eval/"},{"content":"划了这么多天水，我终于回来了…… 毕竟博主也是要上课的,QwQ。 最近终于抽出一些时间了，研究研究QQ音乐的爬虫。 我们随便打开一个歌单(https://y.qq.com/n/yqq/playlist/6809716883.html)，登录自己的QQ： ？QQ音乐竟然还对网页端做限制！根据我多年的前(摸)端(爬)开(滚)发(打)经验，这种网站一定是通过JS做限制，并且在浏览器的Network中一定会有相关的数据。 我们先打开一个音乐链接(https://y.qq.com/n/","lvl0":"从零开始写一个音乐爬虫-4：QQ音乐","lvl1":["Python","爬虫"],"lvl2":"","objectID":"4d5e4a089e90ee9855f31ea747e9414b","tags":["Python","爬虫","QQ音乐","福利","破解","音乐","会员","Python进阶"],"url":"https://raycoder.me/p/qqmusic-spider-artlist/"},{"content":"上一篇文章我写了爬取网易云音乐歌单中音乐ID及下载链接的教程，这一期我们就应该把文件下载下来了。 下载文件，我们通过Python3的urllib模块可以很轻松地实现。 新建一个download.py文件。 下载音乐主要的代码： #!/usr/bin/env python #-*- coding:utf8 -*- \u0026#39;\u0026#39;\u0026#39; @Author : Ray @Contact : ray@raycoder.me @Software: PyCharm @File : download.py @Time : 2019/11/4 21:19 \u0026#39;\u0026#39;\u0026#39; import urllib, time, os def downloadMusic(music_dictionary, path): #下载音乐 exist = os.path.exists(path) if not exist: os.makedirs(path) complete = [] failed = [] for i in music_dictionary: try: print(u\u0026#39;正在下载：\u0026#39; + i) trans = str.maketrans(\u0026#39;\\\\/*?:\u0026#34;|\u0026lt;\u0026gt;\u0026#39;, \u0026#39; \u0026#39;) urllib.request.urlretrieve(music_dictionary[i], path + i.translate(trans) + \u0026#39;.mp3\u0026#39;) print(u\u0026#39;下载完成！\u0026#39;) complete.append(i) time.sleep(1) except OSError as e: print(u\u0026#","lvl0":"从零开始写一个音乐爬虫-2：下载音乐文件","lvl1":["Python","爬虫"],"lvl2":"","objectID":"b0974cbaad91b322dae3e7daf860fbbd","tags":["Python","爬虫","福利","网易","破解","音乐","会员","Python进阶"],"url":"https://raycoder.me/p/music-spider-downloader/"},{"content":"本文将会详细的写从零开始制作网易云音乐爬虫的过程，可以下载网易云音乐音乐付费歌曲，使用Python3开发。 声明：本文从前端入手，再获得歌曲数据。如果您不想走那么多弯路，请参考这篇文章：https://zhuanlan.zhihu.com/p/30246788和这篇文章：https://www.shangyexinzhi.com/article/details/id-297404 本文采用环境： Pycharm + Python 3.7.5 所需模块： fake-useragent requests re 安装方法： pip install beautifulsoup4 fake-useragent requests 爬虫思路： graph TD; 初始化程序--获取","lvl0":"从零开始写一个音乐爬虫-1-网易云音乐：批量获取歌单音乐下载链接","lvl1":["Python","爬虫"],"lvl2":"","objectID":"b45063406507fbabbdda98712bd3758e","tags":["Python","爬虫","福利","网易","破解","音乐","会员","Python进阶"],"url":"https://raycoder.me/p/cloudmusic-spider-artlist/"},{"content":"本文将会详细的写从零开始制作酷狗音乐爬虫的过程，可以下载酷狗音乐音乐付费歌曲，使用Python3开发。 随便打开一个歌单，右键检查属性发现这个\u0026lt;a\u0026gt;标签中含有data。 点进去播放，会发现： 看来，音乐外链和这个hash哈希值是脱不了关系的了。 事实上，酷狗音乐歌曲数据外链如下： http://www.kugou.com/yy/index.php?r=play/getdata\u0026amp;hash=\u0026lt;刚才看到的哈希值\u0026gt; 填入刚刚看到的值（URL：https:","lvl0":"从零开始写一个音乐爬虫-3：酷狗音乐","lvl1":["Python","爬虫"],"lvl2":"","objectID":"4487567263b94f43a4b41351f2f541ad","tags":["Python","爬虫","福利","音乐","破解","会员","Python进阶","酷狗"],"url":"https://raycoder.me/p/kugoumusic-spider-artlist/"},{"content":"今天我在访问GayHub的Issue时发现访问速度奇慢无比，加载好后也无法正常显示图片，raw.githubusercontent.com也无法进入。上网查找相关资料后终于有了相关的解决方法。 网上一般流传的Hosts已经不好使了，如下： # GitHub Start 192.30.253.112 github.com 192.30.253.118 gist.github.com 151.101.112.133 assets-cdn.github.com 151.101.184.133 raw.githubusercontent.com 151.101.112.133 gist.githubusercontent.com 151.101.184.133 cloud.githubusercontent.com 151.101.112.133 camo.githubusercontent.com 151.101.112.133 avatars0.githubusercontent.com 151.101.112.133 avatars1.githubusercontent.com 151.101.184.133 avatars2.githubusercontent.com 151.101.12.133 avatars3.githubusercontent.com 151.101.12.133 avatars4.githubusercontent.com 151.101.184.133 avatars5.githubusercontent.com 151.101.184.133 avatars6.githubusercontent.com 151.101.184.133 avatars7.githubusercontent.com 151.101.12.133 avatars8.githubusercontent.com # GitHub End ipconfig /flushdns后无效。 后来又去这里翻了翻，又发现了一个好用的东西： 140.82.113.4 github.com 140.82.113.19 assets-cdn.github.com 151.101.185.194 github.global.ssl.fastly.net 185.199.108.153 assets-cdn.github.com 185.199.108.153 github.github.io 151.101.184.133 githubusercontent.com 192.30.253.118 gist.github.com 发现这个竟然是有用的！所以只需要使用这个Hosts即可！ ipconfig","lvl0":"一些关于GitHub图像无法正常显示和访问速度慢的解决方案","lvl1":["Hosts","Github"],"lvl2":"","objectID":"112d0ce3bbb7d0b8fc369fac2250c0b4","tags":["GitHub","Hosts","加速"],"url":"https://raycoder.me/p/github-hosts/"},{"content":"网盘接二连三的倒下，*度网盘又开始限速，真不让人满意🐷。。\n还是自己搭建的网盘比较靠谱……😂\n","lvl0":"使用CentOS 7 + Kodcloud(可道云) 搭建个人网盘","lvl1":["服务器"],"lvl2":"","objectID":"66225f51fb35d37bc3b79be271025cac","tags":["服务器","CentOS","搞机","网盘","教程"],"url":"https://raycoder.me/p/kodcloud-with-centos7/"},{"content":"假如你有一个域名，你想用它来弄一个域名邮箱么?! 由于QQ邮箱在2020年1月20号取消了新建域名邮箱功能，而企业邮箱注册又非常麻烦，所以我决定采用一个国外的域名邮箱提供商——Pingly。 Step 1.打开Pingly，注册一个账号。（已有账号的点击登录） Step 2.登录/注册完后按照系统的提示设置域名的TXT、CNAME及MX转发，设置成功后点击Verify（可能要一段时间） Step 3.然后打开你注册时的邮箱，点击其中的链接进行账号的验证 Final：好了，之后所有发到你的域名邮箱的邮","lvl0":"想拥有自己的域名邮箱么？！","lvl1":["域名","邮箱"],"lvl2":"","objectID":"b481800829b6a7dd3dc838acb80ae2d0","tags":["域名","自定义","搞机"],"url":"https://raycoder.me/p/domain-mail/"},{"content":"转载自: LeonG7的简书博客。 前言：深感在线博客的编辑器坑太多了，文档丢失、必须联网、可移植性太差，所以开始寻找可替代的方案。 咱们写博客的时候，总是需要插入图片的，图片存在本地的话上传到博客网站去就没法显示了，就算一个图一个图的复制粘贴上去，想移植到其他的博客网站，图就会失效，我们就需要图床。 图床是干什么的？ 图床就是一个便于在博文中插入在线图片连接的个人图片仓库。设置图床之后，在自己博客中插入的图片链接就可以随时随地在线预览了，并且不会因为任何意外原因无法查看，除","lvl0":"PicGo + Gitee(码云)实现markdown图床","lvl1":["Picgo","图床"],"lvl2":"PicGo+Gitee=markdown图床","objectID":"54c5e9e8d00c61844892278a1e9cb448","tags":["Picgo","Gitee","工具"],"url":"https://raycoder.me/p/picgo-and-gitee-markdown-pic/"}]